<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Angular is not that good before 2023]]></title>
    <url>%2Fblog%2F2023%2F08%2Fangular-is-not-that-good-before-2023%2F</url>
    <content type="text"><![CDATA[You might have often heard someone saying that Angular is waiting for you in 3 years. Angular is better for big or enterprise project Angular provides an excellent updating experience … In this article, I’ll show you why I think Angular is not as good as you have heard before 2023 Angular 15, 16. Of course, I can’t be 100% fair when comparing Angular with other frameworks&#x2F;libs. Also, because I’m trying to demo that Angular before 2023 is not that good, so I’ll focus too much on the disadvantages. It’s unfair for Angular. After 2023, Angular is getting much better but I’ll cover those parts in other articles. To be fair, I’m creating 2 projects, 1 for Angular, 1 for Vue in 2023&#x2F;8&#x2F;15. For Angular, I’m creating with ng new my-app-angular with @angular/cli@16.2.0.For Vue, I’m creating with npm create vue@latest with create-vue@3.7.2. And I will demo it step by step. Too simple template when creating a new projectWhen creating a new project with Angular CLI, I have 2 options Need routing CSS format While with Vue CLI, besides the 2 options, I also have more than 4 options state-management lib e2e test lib ESLint Prettier for code formatting …… To be honest, in my opinion, the above 4 options are important for a big or enterprise project. If they’re not set up at the beginning of a big project, it’s not easy to make all team members agree on one specific solution. Some people like this state management lib while others like another one. Some people like semi while others don’t… By the way, Angular doesn’t have an official state-management solution until now. Angular added this feature to the backlog in 2022 because of this issue. Until now, the most starred state management solution for Angular is ngrx. Too simple default project folder structureFor Angular, I don’t even know how to code with the template before I find the CodingStyleGuide chapter. Where to put router views? Where to put shared code? … While for Vue, I think developers can code immediately. Anyway, I’ll follow the Angular style guide to create a heroes feature module. The demo code is copied from Angular homepage demo. And here is the UI: Default change detection strategy is a performance killerHave you noticed how many times the function is called at the console when the page is loaded? 6*9&#x3D;54 times! Here is the code &lt;h2&gt;Heroes&lt;/h2&gt;&lt;ul class="heroes"&gt; &lt;li *ngFor="let hero of heroes$ | async" [class.selected]="hero.id === selectedId" [class.sensitive]="isSensitiveHeroName(hero)" (mouseenter)="showTooltip()" &gt; &lt;a [routerLink]="['/hero', hero.id]"&gt; &lt;span class="badge"&gt;&#123;&#123; hero.id &#125;&#125;&lt;/span&gt;&#123;&#123; hero.name &#125;&#125; &lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;button type="button" routerLink="/sidekicks"&gt;Go to sidekicks&lt;/button&gt; @Component(&#123; selector: "app-hero-list", templateUrl: "./hero-list.component.html", styleUrls: ["./hero-list.component.scss"],&#125;)export class HeroListComponent implements OnInit &#123; heroes$!: Observable&lt;Hero[]&gt;; selectedId = 0; constructor(private service: HeroService, private route: ActivatedRoute) &#123;&#125; ngOnInit() &#123; this.heroes$ = this.route.paramMap.pipe( switchMap((params) =&gt; &#123; this.selectedId = parseInt(params.get("id")!, 10); return this.service.getHeroes(); &#125;) ); &#125; isSensitiveHeroName(hero: Hero) &#123; console.log("isSensitiveHeroName"); return hero.name.toLowerCase().includes("sex"); &#125; showTooltip() &#123;&#125;&#125; And if you move your mouse from top to bottom, the function will be triggered 2*9*9 times! In this case, we can use the OnPush strategy. @Component(&#123; selector: 'app-hero-list', templateUrl: './hero-list.component.html', styleUrls: ['./hero-list.component.scss'], changeDetection: ChangeDetectionStrategy.OnPush // +&#125;) isSensitiveHeroName will be triggered 9 times in the first time and 9*9 times for mouseenter event. So the performance is improved by 1200% with OnPush strategy. In reality, if we want to change the Default strategy to OnPush, we need to apply more changes, not just one line in this demo. Regarding this case, there’s a better solution for Angular. export interface Hero &#123; id: number; name: string; isSensitive?: boolean; // +&#125; this.heroes$ = this.route.paramMap.pipe( switchMap((params) =&gt; &#123; this.selectedId = parseInt(params.get("id")!, 10); return this.service.getHeroes().pipe( map((heroes) =&gt; &#123; // + return heroes.map((hero) =&gt; &#123; return &#123; ...hero, isSensitive: this.isSensitiveHeroName(hero), // + &#125;; &#125;); &#125;) ); &#125;)); Now, we get better performance, maybe the best performance. That’s why you can often see this in the Angular community. Never call functions in the template Ok. Here are my concerns Is it really good to avoid using functions in the template? For better performance, we defined a derived state isSensitive. So, each time we change the name of the hero, we need to update isSensitive. In real-word apps, there would be many derived states dependent on 2 or more other states. So we need to add more and more code to keep the current performance which will quickly bring bugs and maintenance issues. There might be other ways to keep the performance without writing more code. But Here are my concern How long time does Angular need to take developers to write high-performance and easy-maintenance code? 1 month or 1 year? Luckily, in 2023 Angular launched Signals which is in developer preview now. Signals allows you to write high-performance and easy-maintenance code. Complicated NgModuleNow, let’s assume I want to use HeroListComponent out of HeroesModule. I need to export it from HeroesModule, then import the HeroesModule to another module(let’s assume AppModule). @NgModule(&#123; declarations: [HeroListComponent], imports: [CommonModule, HeroesRoutingModule], exports: [ HeroListComponent, // + ],&#125;)export class HeroesModule &#123;&#125; @NgModule(&#123; declarations: [AppComponent], imports: [ BrowserModule, AppRoutingModule, HeroesModule, // + ], providers: [], bootstrap: [AppComponent],&#125;)export class AppModule &#123;&#125; I can see only 1 good point. If I want to use the components exported from HeroesModule, I don’t need to import the components to AppModule again. However, I can see many drawbacks. It’s not easy for developers to know how many things AppModule has imported from HeroesModule. Only Angular knows. Because a component has to be declared in a module, it’s not easy for developers to know how many things the component is dependent on in the module. For example, is HeroListComponent dependent on CommonModule and HeroesRoutingModule? We need to check. Thus it’s quite common that if you move a component from one module to another and it’s not working because you need to find out what dependencies the component needs and move the dependencies also. Because the dependencies are not declared in the component. In conclusion, a component can not work by itself which is hard to think about if you’re coming from other frameworks. Luckily, we got standalone components in Angular@15 by the end of 2022. Angular team even provided a tool for you to migrate from NgModule to standalone component. Deep binding with RxJsMany Angular APIs are exposed with Observable, even HttpClient. However, it’s not easy for beginners to write code with fewer bugs with RxJs. Things to be cautious in RxJs declarative styleFor example, the previous HeroListComponent is implemented with a declarative style. If we remove the heroes$ | async in the template, the service.getHeroes will never be called again. If you’re new to Angular or RxJs, it might be a shock to you. &lt;h2&gt;Heroes&lt;/h2&gt;&lt;ul class="heroes"&gt; &lt;!-- &lt;li *ngFor="let hero of heroes$ | async" [class.selected]="hero.id === selectedId" [class.sensitive]="hero.isSensitive" (mouseenter)="showTooltip()"&gt; &lt;a [routerLink]="['/hero', hero.id]"&gt; &lt;span class="badge"&gt;&#123;&#123; hero.id &#125;&#125;&lt;/span&gt;&#123;&#123; hero.name &#125;&#125; &lt;/a&gt; &lt;/li&gt; --&gt;&lt;/ul&gt; Also, if the service.getHeroes throws an error once, the function will not work anymore. That’s why you can often see catchError(() =&gt; EMPTY) in declarative code. this.heroes$ = this.route.paramMap.pipe( switchMap((params) =&gt; &#123; this.selectedId = parseInt(params.get("id")!, 10); return this.service.getHeroes().pipe( map((heroes) =&gt; &#123; return heroes.map((hero) =&gt; &#123; return &#123; ...hero, isSensitive: this.isSensitiveHeroName(hero), &#125;; &#125;); &#125;), catchError(() =&gt; EMPTY) //+ ); &#125;)); Things to be cautious in RxJs imperative styleIn reality, many developers are using imperative programming. In this case, HeroListComponent would be like export class HeroListComponent implements OnInit &#123; heroes!: Hero[]; selectedId = 0; constructor(private service: HeroService, private route: ActivatedRoute) &#123;&#125; ngOnInit() &#123; this.route.paramMap.subscribe((params) =&gt; &#123; this.selectedId = parseInt(params.get("id")!, 10); this.service.getHeroes().subscribe((heroes) =&gt; &#123; this.heroes = heroes.map((hero) =&gt; &#123; return &#123; ...hero, isSensitive: this.isSensitiveHeroName(hero), &#125;; &#125;); &#125;); &#125;); &#125; //...&#125; And in the template, heroes$ | async needs to be changed to heroes. However, it has bugs. Just like we need removeEventListener after addEventListener, we also need to unsubscribe or use takeUntilDestroyed. this.route.paramMap.pipe(takeUntilDestroyed()).subscribe((params) =&gt; &#123; this.selectedId = parseInt(params.get("id")!, 10); this.service .getHeroes() .pipe(takeUntilDestroyed()) .subscribe((heroes) =&gt; &#123; this.heroes = heroes.map((hero) =&gt; &#123; return &#123; ...hero, isSensitive: this.isSensitiveHeroName(hero), &#125;; &#125;); &#125;);&#125;); However, takeUntilDestroyed is in the developer preview until now. Before 2023, we need to add more code. And one more thing, this way is unfriendly for OnPush strategy. Short conclusionAs you can see, deep binding with RxJs makes it easier for developers to make mistakes or write less performant code. I do think RxJs is powerful and especially good for edge cases. However, having a powerful tool doesn’t mean that we need to use it in all cases. Lots of frameworks&#x2F;libs&#x2F;projects without RxJs are working quite well. Also, I didn’t mention the things developers need to know from RxJs and the very intrusive code style it brings. Current status of AngularAs you can see, Angular has brought many new solutions. It’s a good thing, but it could be a bad thing if they don’t point out recommended solutions in time. The community could get much more split than before. declarative or imperative programming less or more RxJs Default or OnPush NgModule or standalone zone.js or Singals … Choses between those will result in different styles, which also make code hard to maintain. The first 2 choices have already made the community split. Now we have more. In my opinion, standalone + Singals are the future of Angular. RxJs will be optional for Angular. Official state management solution will be provided. Angular will be more like other frameworks&#x2F;libs. Angular has made great choices like choosing typescript, but choosing NgModule and zone.js might have been proven not that successful. Even built-in RxJs APIs is also probably not a good solution. Angular is not waiting for other frameworks&#x2F;libs in 3 years. He is making progress and choices. Some solutions that many frameworks and developers are not choosing often mean that they might not be that suitable for front end developing. In those cases, Angular is also learning from other frameworks&#x2F;libs instead of waiting and insisting that he’s in the right direction. Actually, frameworks&#x2F;libs are both learning from each other. Learning and improving themselves is much better than thinking I’m the best one. Issue Source Reference]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Several Ways of Configuring Environment Variables in Web FrontEnd Project]]></title>
    <url>%2Fblog%2F2023%2F08%2Fseveral-ways-of-configuring-environment-variables-in-web-frontend-project%2F</url>
    <content type="text"><![CDATA[It’s quite often that we need to define and use environment variables. May be in building process or runtime. There’re many solutions, I’ll show some of them. Production &#x2F; CI build phaseBasically, we don’t need to care about them, just follow the rules provided by the platform because the env variables are often set manually in the platform. For example, in the vercel So, they will not appear in our projects’ code. Development phaseIf the framework you’re currently using has provided such configurations, normally we don’t need to care also, just follow the rules provided by the platform. If not, we can consider some available solutions in the market. dotnetJust put .env file in the root of your project: S3_BUCKET="my bucket"SECRET_KEY="my secret key" Then as early as possible in your application, import and configure dotenv: require('dotenv').config()console.log(process.env) // remove this after you've confirmed it is working If you don’t want to add the require code to the source code, you can node -r dotenv/config your_script.js It works now. Also, for the reason of security or interruptions between team members’ different configurations, I recommend putting .env file in the .gitignore. For better instruction for the new developers, you can add another .env.example file not in the .gitignore with content like # You need to create a .env file in the root with the below env variables to run this project.S3_BUCKET="your bucket"SECRET_KEY="your secret key" cross-envIn the past, we had another popular package cross-env. But now, it has been archived. I think it’s really straightforward for new users. &#123; "scripts": &#123; "build": "cross-env S3_BUCKET=\"my bucket\" npm run start" &#125;&#125; Just with some issues: It’ll become unfriendly if I have many env variables. I need to remove the variables before committing if I don’t want to share them with others. ConclusionFor me, I would prefer dotenv at this moment. Issue Source Reference]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>env</tag>
        <tag>dotenv</tag>
        <tag>cross-env</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The Impact of Styles and Scripts Position in index.html]]></title>
    <url>%2Fblog%2F2020%2F03%2Fthe-impact-of-styles-and-scripts-position-in-index.html%2F</url>
    <content type="text"><![CDATA[PrefaceFor a long time, I was thinking if the .css files would block DOM parsing and rendering. It seems I got different results sometimes. So, I decided to test and summarize the behaviors carefully with chrome. Let’s begin. Put .css Files in the &lt;head&gt;Normally, we would put the .css files in the head and .js files at the bottom of &lt;body&gt;. For example, &lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;link rel="stylesheet" href="./static/header.css" /&gt; &lt;link rel="stylesheet" href="./static/main.css" /&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;MyApp&lt;/div&gt; &lt;header&gt; Header &lt;/header&gt; &lt;main&gt; Main &lt;/main&gt; &lt;footer&gt;Footer&lt;/footer&gt; &lt;script src="./static/app.js"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; Say we blocked the .css files request by fiddler. And here are the questions, Would header.css block DOM parsing and rendering? Would header.css block main.css, app.js and other resources fetching? And here are the results. header.css won’t block DOM parsing. header.css, main.css all blocked rendering which means the page would be always blank until all the .css files request in the &lt;head&gt; finished. header.css won’t block main.css, app.js and other resources fetching. Though the codes in the resources won’t be executed in advance! After header.css, main.css loaded and parsed, we will get the first paint. Then app.js was fetched, parsed and executed with DOM parsing and rendering blocked. After app.js was executed, DOM parsing and rendering keep working. DOM parsing complete. Rendering complete. Put .css Files in the &lt;body&gt;It is not very common to see this usage recently. However, test is still needed if we want to know more. Consider the following code, &lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;MyApp&lt;/div&gt; &lt;link rel="stylesheet" href="./static/header.css" /&gt; &lt;header&gt; Header &lt;/header&gt; &lt;link rel="stylesheet" href="./static/main.css" /&gt; &lt;main&gt; Main &lt;/main&gt; &lt;footer&gt;Footer&lt;/footer&gt; &lt;script src="./static/app.js"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; Say I still block all the .css files with fiddler. What would the results be? As you can see, The DOM parsing and rendering would work before they met header.css in the &lt;body&gt; which would get an earlier first paint. User can see something(usually there is a loading bar) before the styles in &lt;body&gt; loaded. header.css blocked DOM parsing, hence blocked rendering. header.css didn’t block other files fetching and app.js is still not executed in advance! After header.css was loaded, the DOM parsing and rendering keeps working. Then blocked by main.css again. However, user can see the header now! After main.css was loaded, app.js is executed! DOM parsing complete Rendering complete. Compared with the first example, we can find the difference is that .css files in the &lt;body&gt; would block DOM parsing while .css files in the &lt;head&gt; wouldn’t though they both blocked rendering. Hence, if we put the styles in the &lt;head&gt;, we can make use of the time of styles downloading and parsing to parse more DOM. However, .css files in the &lt;body&gt; would get a faster first paint and is closer to a progressive loading webpage . That’s because it doesn’t need to load all the styles in the &lt;head&gt; and allow content above the &lt;link&gt; to render. Assuming that the requests of the styles need 1 second, let’s see the following demo. &lt;!-- demo1 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;link rel="stylesheet" href="./static/app.css" /&gt; &lt;/head&gt; &lt;body&gt; &lt;link rel="stylesheet" href="./static/header.css" /&gt; &lt;header&gt; Header &lt;/header&gt; &lt;link rel="stylesheet" href="./static/main.css" /&gt; &lt;main&gt; Main &lt;/main&gt; &lt;link rel="stylesheet" href="./static/footer.css" /&gt; &lt;footer&gt;Footer&lt;/footer&gt; &lt;/body&gt;&lt;/html&gt; &lt;!-- demo2 --&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;link rel="stylesheet" href="./static/app.css" /&gt; &lt;link rel="stylesheet" href="./static/header.css" /&gt; &lt;link rel="stylesheet" href="./static/main.css" /&gt; &lt;link rel="stylesheet" href="./static/footer.css" /&gt; &lt;/head&gt; &lt;body&gt; &lt;header&gt; Header &lt;/header&gt; &lt;main&gt; Main &lt;/main&gt; &lt;footer&gt;Footer&lt;/footer&gt; &lt;/body&gt;&lt;/html&gt; Demo2 would render the page after all the styles loaded while demo1 would load and render step by step. Assuming that there is a 1 second delay in main.css, the results would be: styles in head styles in body As you can see, the result of styles in body might be more acceptable and expected. However, with that way we might need more code because we haven’t taken consideration of script. Things can be more complicated in production. Put .js Files in the &lt;head&gt; or &lt;body&gt;Actually, it works like styles in &lt;body&gt; where we put it in the &lt;head&gt; or &lt;body&gt;. The script without async and deferred would block DOM parsing and rendering. Actually, it is specified in W3C specifications. For classic scripts, if the async attribute is present, then the classic script will be fetched in parallel to parsing and evaluated as soon as it is available (potentially before parsing completes).If the async attribute is not present but the defer attribute is present, then the classic script will be fetched in parallel and evaluated when the page has finished parsing.If neither attribute is present, then the script is fetched and evaluated immediately, blocking parsing until these are both complete. Hence for better experience we can add a loading before the script. So it’s common to put the scripts at the bottom of &lt;body&gt; to let the loading dom be parsed and rendering first. Inline Scripts Blocks RenderingIt’s also worth mentioning that if we put an inline script at the bottom of the &lt;body&gt; the nearest or even all DOM and styles rendering before the script would be blocked until the script was executed. You can use code below to test &lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;link rel="stylesheet" href="./static/app.css" /&gt; &lt;/head&gt; &lt;body&gt; &lt;link rel="stylesheet" href="./static/header.css" /&gt; &lt;header&gt; Header &lt;/header&gt; &lt;link rel="stylesheet" href="./static/main.css" /&gt; &lt;main&gt; Main &lt;/main&gt; &lt;link rel="stylesheet" href="./static/footer.css" /&gt; &lt;footer&gt;Footer&lt;/footer&gt; &lt;script&gt; let startTime = Date.now(); let interval = 0; while ((interval = Date.now() - startTime) &lt; 10000) &#123; if (interval % 1000 === 0) &#123; console.log(interval / 1000 + " second passed"); &#125; &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; In that case, users might not see the loading bar. So take care of the inline scripts. EndThe above tests are tested in windows7 Chrome 80.0.3987.106. ReferencesThe future of loading CSS Source]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>DOM</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[arrayBuffer, text, and Blob Transformation in Ajax]]></title>
    <url>%2Fblog%2F2019%2F09%2Farraybuffer-text-blob-transformation-in-ajax%2F</url>
    <content type="text"><![CDATA[In some cases, we might need to fetch and handle some unusual data from a server, for example, Excel file, arrayBuffer, etc. If the backend has a united error handler things can be more complicated. In that case, the response got from backend can be a json, arrayBuffer or other types. For example, Normally the frontend would get a Excel file If some error happens in the backend or formData is not valid or the session expired, the backend would return a json like &#123; message: "unknown error!", status: 500&#125;; So, how can we handle the unknown response type in ajax? fetchIf we are using fetch, the code can be like import &#123; saveAs &#125; from "file-saver";fetch("http://www.your-api.com/getExcel", &#123; credentials: "include", headers: &#123; accept: "application/json, text/plain, */*", "content-type": "application/json;charset=UTF-8" &#125;, referrer: "", referrerPolicy: "no-referrer-when-downgrade", body: "&#123;&#125;", method: "POST", mode: "cors"&#125;) .then(response =&gt; &#123; return response .clone() .json() .catch(er =&gt; &#123; return response.blob(); &#125;); &#125;) .then(response =&gt; &#123; if (&#123;&#125;.toString.call(response) !== "[object Blob]") &#123; return alert(response.message); &#125; return saveAs( new Blob([response], &#123; type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8" &#125;), "file.xls" ); &#125;); The key is the Response api which can help us transform unknown data to json or blob or other types. However, you might need to take care of the clone api if you want to use the Response more than once. XMLHttpRequestIf you are using xhr(i.e. XMLHttpRequest), you have to set the response type before sending the request. For example, const xhr = new XMLHttpRequest();xhr.open("POST", "http://www.your-api.com/getExcel");xhr.responseType = "blob";xhr.withCredentials = true;xhr.setRequestHeader("Content-Type", "application/json");xhr.onreadystatechange = e =&gt; &#123; if (xhr.readyState === 4) &#123; console.log(xhr.response); &#125;&#125;;xhr.send('&#123;"truck_team_id":[]&#125;'); And the type of xhr.response is decided by xhr.responseType which means we will get a blob object with xhr.responseType = &quot;blob&quot; even if the server returns json. In this case, we might need to know some ways to transform data between blob, text, arrayBuffer, etc. Luckily, the Blob api gives us many choices. The transformation between arrayBuffer, blob and text can be // arrayBuffer =&gt; text;new Blob([arrayBuffer]).text(result =&gt; &#123; console.log(result); //text&#125;); // text =&gt; arrayBuffer;new Blob([text]).arrayBuffer(result =&gt; &#123; console.log(result); // arrayBuffer&#125;); And if not using Blob, we can still use TextDecoder and TextEncoder to do the transformation job between arrayBuffer and text. // arrayBuffer to textnew TextDecoder().decode(arrayBuffer);// text to arrayBuffernew TextEncoder().encode(text); UniversalityConsidering the universality, the transformation between arrayBuffer, blob and text can be useful in many scenarios. Worthy of attention! Issue Source Reference]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>arrayBuffer</tag>
        <tag>Blob</tag>
        <tag>fetch</tag>
        <tag>XMLHttpRequest</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Associated Validation in Vue]]></title>
    <url>%2Fblog%2F2019%2F08%2Fassociated-validation-in-vue%2F</url>
    <content type="text"><![CDATA[ScenarioLet’s see this gif: And collapsed code: Click here to expand code &lt;script src="//unpkg.com/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;script src="//unpkg.com/element-ui@2.11.0/lib/index.js"&gt;&lt;/script&gt;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"&gt;&lt;/script&gt;&lt;div id="app"&gt; &lt;el-form :inline="true" ref="form" :rules="rules" :model="formData"&gt; &lt;el-form-item label="startTime:" prop="startTime"&gt; &lt;el-date-picker v-model="formData.startTime" type="datetime" placeholder="choose startTime" value-format="yyyy-MM-dd HH:mm:ss" &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; &lt;el-form-item label="endTime:" prop="endTime"&gt; &lt;el-date-picker v-model="formData.endTime" type="datetime" placeholder="choose endTime" value-format="yyyy-MM-dd HH:mm:ss" &gt;&lt;/el-date-picker&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type="primary" @click="onSubmit"&gt;submit&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;/el-form&gt;&lt;/div&gt; @import url("//unpkg.com/element-ui@2.11.0/lib/theme-chalk/index.css"); var Main = &#123; data() &#123; return &#123; formData: &#123; startTime: "", endTime: "" &#125;, rules: &#123; startTime: [&#123; validator: this.startEndTimeValidator &#125;], endTime: [&#123; validator: this.startEndTimeValidator &#125;] &#125; &#125;; &#125;, watch: &#123; // "formData.startTime"() &#123; // this.validateField("endTime"); // &#125;, // "formData.endTime"() &#123; // this.validateField("startTime"); // &#125; &#125;, methods: &#123; startEndTimeValidator(rule, value, callback) &#123; let &#123; formData: &#123; startTime, endTime &#125; &#125; = this; startTime = moment(startTime, "YYYY-MM-DD HH:mm:ss"); endTime = moment(endTime, "YYYY-MM-DD HH:mm:ss"); if (startTime &gt; endTime) &#123; return callback( new Error(`start time shouldn't be larger than end time！`) ); &#125; callback(); &#125;, validateField(...args) &#123; if (typeof this.$refs.form === "undefined") &#123; return; &#125; this.$refs.form.validateField(...args); &#125;, onSubmit() &#123; console.log("submit!"); &#125; &#125;&#125;;var Ctor = Vue.extend(Main);new Ctor().$mount("#app"); When user selected a smaller endTime, we show the message: start time shouldn’t be larger than end time！ If user changes the endTime with a larger one everything is okay. However, user could also choose a smaller startTime to avoid this message. But the behavior of changing startTime wouldn’t trigger the endTime validation. So, user would still see the error message though he did the right thing. That’s what we are going to talk about: Associated Validation. ImplementationAt the very beginning, I have tried adding similar logic in the validator. However, it fails because of dead loop. To avoid dead loop, I add this var Main = &#123; // ... watch: &#123; "formData.startTime"() &#123; this.validateField("endTime"); &#125;, "formData.endTime"() &#123; this.validateField("startTime"); &#125; &#125; // ...&#125;; Em, not so good but works. Issue Source Reference]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[How to Prevent Collapse of Empty Rows in HTML table]]></title>
    <url>%2Fblog%2F2019%2F08%2Fhow-to-prevent-collapse-of-empty-rows-in-html-table%2F</url>
    <content type="text"><![CDATA[If you have met empty rows in HTML table or have seen this question Prevent collapse of empty rows in HTML table via CSS you might know what I am saying. See this image: Above answers can’t handle strings like &quot; &quot;. In this case, we still need the help of js. Just like the idea of css, // prevent empty table rows collapse.cell:empty:after &#123; content: "\00a0";&#125; We can write a function like function falsyToNbsp(value, falsyValues = [null, undefined, "", NaN]) &#123; value = typeof value === "string" ? value.trim() : value; return falsyValues.includes(value) ? "\u00a0" : value;&#125; You can use it in vue filters like import &#123; falsyToNbsp &#125; from "utils";export default &#123; // ... filters: &#123; falsyToNbsp &#125; // ...&#125;; or with other libs. Issue Source Reference]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>content</tag>
        <tag>table</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Traps in reduce]]></title>
    <url>%2Fblog%2F2019%2F08%2Ftraps-in-reduce%2F</url>
    <content type="text"><![CDATA[Optional initialValue?Sometimes, we can see code using reduce without initialValue. For example, const array = [1, 2, 3];array.reduce((re, v) =&gt; re + v); According to mdn, it is valid and seems simpler. However, is it a good practice? Cons Brought by No initialValueIn the real world, array could be []. In this case, const array = [];array.reduce((re, v) =&gt; re + v); You will got error in production! Uncaught TypeError: Reduce of empty array with no initial value Also, imagine that if you have met this code in your work ? What the hell does this reduce do? Join the string Or cumulative summation Or other situations? You would never know until you have read the context. As you can see, these are the most obvious cons brought by no initialValue. Potential Error Unclear semantics Benefits Brought with initialValueInstead, if using reduce with initialValue. For example, in the above case, we can write like this const array = [];array.reduce((re, v) =&gt; re + v, 0); We would never meet the error! It is obvious that reduce is using to do the cumulative summation job. Safer and Clearer! Issue Source Reference]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>reduce</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Make Your Own Vue Project Template - Formatter Part]]></title>
    <url>%2Fblog%2F2019%2F05%2Fmake-your-own-vue-project-template-formatter-part%2F</url>
    <content type="text"><![CDATA[As far as I know, several formatters would run with several rules when I want to format .vue file in the vscode editor. I have been confused for a long time about these formatters and their specific rules, also the combined situations. Sometimes it makes me crazy. For example, For formatters, there are ESLint, prettier, vscode internal formatter and some other formatters which I don’t know. For rules, there are .eslintrc.js, .prettierrc.js, user settings and other plugins like eslint-plugin-html, eslint-plugin-vue, etc. In some cases, I am so sure that the code has been processed by at least 2 formatters because I saw the process of the code. … What Do You Want?Before we keep going we have to figure out one question. What exactly format do we want ? After thinking, I figure it out. How can I let different developers commit with the identical styles? To be more specific, I want Slightly dependent on developers’ user settings, use configuration files instead of plugins or rules in developers’ editor as possible as we can. Syntax-highlighting Format and lint .js and script in .vue. Format and lint .css, .less, .scss and style in .vue. Format and lint template in .vue. Format and lint .html. Format and lint before commit Can be unified on vscode at least, better if works on more editors. Can We Do This by One Plugin Like Prettier?Well, I didn’t find that plugin. And prettier can’t do this job either. As we all know, currently prettier is the most popular format plugins. And it supports lots of editors and languages. So, it’s quite common to think that why don’t we just use prettier directly instead of using lots of linters or plugins? Well, according to doc in prettier, Linters have two categories of rules:Formatting rules: eg: max-len, no-mixed-spaces-and-tabs, keyword-spacing, comma-style…Prettier alleviates the need for this whole category of rules! Prettier is going to reprint the entire program from scratch in a consistent way, so it’s not possible for the programmer to make a mistake there anymore :)Code-quality rules: eg no-unused-vars, no-extra-bind, no-implicit-globals, prefer-promise-reject-errors…Prettier does nothing to help with those kind of rules. They are also the most important ones provided by linters as they are likely to catch real bugs with your code! Therefore, we have to do it one by one. Main WorkSyntax-highlightingI found two ways: add config below to settings.json which let vscode highlight it as html. "files.associations": &#123; "*.vue": "html" &#125;, install Vetur plugin. I would recommend Vetur because Vue VSCode Snippets and other plugins may depend on it. Highlight .vue as html won’t get better highlighting effect than Vetur. Other problems may appear… Format and Lint .js, script and template in .vue.ParserAs ESLint said, ESLint’s parser only officially supports the latest final ECMAScript standard. In other cases (including if rules need to warn on more or fewer cases due to new syntax, rather than just not crashing), we recommend you use other parsers and&#x2F;or rule plugins. If you are using Babel, you can use the babel-eslint parser and eslint-plugin-babel to use any option available in Babel. Once a language feature has been adopted into the ECMAScript standard (stage 4 according to the TC39 process), we will accept issues and pull requests related to the new feature, subject to our contributing guidelines. In my case, there is stage2 in my .babelrc presets. &#123; "presets": [ [ "env", &#123; "modules": false, "targets": &#123; "browsers": ["&gt; 1%", "last 2 versions", "not ie &lt;= 8"] &#125; &#125; ], "stage-2" ]&#125; So, I have to use babel-eslint as parser. PluginsAlso, I want to lint script in .vue, obviously I need plugins. According to the doc in eslint-plugin-html, Initially, eslint-plugin-vue was using eslint-plugin-html to lint code inside script tags.Since v3, eslint-plugin-vue is using its own parser, so it is incompatible with eslint-plugin-html.You should use eslint-plugin-vue exclusively and remove eslint-plugin-html from your dependencies if you still have it. That’s why we still can see some .eslintrc.js like below in old projects. module.export = &#123; //... // required to lint *.vue files plugins: ["html"] //...&#125;; Also, as documented in vue-loader doc, The official eslint-plugin-vue supports linting both the template and script parts of Vue single file components. So, we can use eslint-plugin-vue to lint .js, script and template in .vue. Specific RulesThough there is a lot of rule libs I can choose. For example, eslint:recommended, standard, airbnb, etc. Also, for .vue files, there is plugin:vue/recommended, &quot;plugin:vue/base, etc. However, You might still need to read and check which lib or rules you can accept or want because it is quite common to find that there is some rules you can’t accept in lots of rule libs. In the end, our configuration might be something like this: module.exports = &#123; root: true, parserOptions: &#123; parser: "babel-eslint", // https://eslint.vuejs.org/user-guide/#usage sourceType: "module" // "module" if your code is in ECMAScript modules &#125;, env: &#123; browser: true, node: true, es6: true // enable ES6 global variables //... &#125;, extends: [ // ...other rule libs "eslint:recommended", "plugin:vue/essential" // ...other rule libs ], // required to lint *.vue files plugins: ["vue"], rules: &#123; // add your custom rules here, including .vue and es rules. &#125;&#125;; Format and Lint .css, .less, .scss and style in .vue.As documented in vue-loader doc, stylelint supports linting style parts of Vue single file components. Format and lint .html.There is two cases happen to .html. One is vue component file like &lt;!-- component.vue --&gt;&lt;template src="./template.html"&gt;&lt;/template&gt;&lt;style src="./style.scss"&gt;&lt;/style&gt;&lt;script src="./index.js"&gt;&lt;/script&gt; For this one, eslint-plugin-vue wouldn’t support in the near future and recommend using .vue file. Related issue1, issue2. Another is index.html or public&#x2F;index.html In rare cases, we would need to modify this file. So, we might want to add formatter and linter for this file. Actually, stylelint would lint style in it automatically. While htmlhint would be needed to format and lint html in it. The only problem is the script. However, I didn’t add eslint-plugin-html for this file because Normally, there shouldn’t be inline script in index.html Inline script has different linting requirements because it would directly run in the browser and not be transformed by babel. So, It has to be written in ES5. If you want to lint the script, you might have to write lots of disable comments in it. So, in my project I add .htmlhintrc which is like &#123; "tagname-lowercase": true, "attr-lowercase": true, "attr-value-double-quotes": true, "attr-value-not-empty": true, "attr-no-duplication": true, "doctype-first": true, "tag-pair": true, "empty-tag-not-self-closed": true, "spec-char-escape": true, "id-unique": true, "src-not-empty": true, "title-require": true, "alt-require": true, "doctype-html5": true, "id-class-value": false, "style-disabled": false, "inline-style-disabled": true, "space-tab-mixed-disabled": false, "attr-unsafe-chars": true&#125; However, prettier doesn’t support htmlhint integration, so make sure that you don’t add stylistic rules in .htmlhintrc. You might not be able to understand previous sentence before finish reading the Prettier part. Don’t worry, keep reading. PrettierDo We Need PrettierUntil now, we can use ESLint, eslint-plugin-vue to format and lint .js, script and template in .vue files. stylelint to format and lint .css, .less, .scss files and style in .vue files. htmlhint to format and lint .html. It seems that all formatting and linting job have been done without Prettier. So, here comes a question: Do we need Prettier? Actually, it’s a good question. Someone just ask here, If eslint can auto fix&#x2F;format code why to use Prettier? And the answer is something like: Prettier can do some formatting thing that eslint can’t do and vice versa. So, here comes prettier-eslint which combines them. The same thing also happens on stylelint. Until 0.49.0 version, vscode-stylelint still doesn’t support auto fix in editor but prettier-vscode can. So, we do need Prettier, also with plugins to combine Prettier with ESLint and stylelint. Prettier First or Linter First?Generally, there are four ways to combine them. prettier-eslint eslint-config-prettier prettier-stylelint Code ➡️ prettier ➡️ eslint&#x2F;stylelint ➡️ Formatted Code ➡️ eslint➡️ prettier ➡️ Formatted Code ➡️ prettier ➡️ stylelint ➡️ Formatted stylelint-config-prettier Code ➡️ prettier ➡️ eslint ➡️ Formatted Code ➡️ stylelint ➡️ prettier ➡️ Formatted Code ➡️ eslint&#x2F;stylelint ➡️ prettier ➡️ Formatted I guess most people chose prettier-eslint and prettier-stylelint which is Code ➡️ prettier ➡️ eslint&#x2F;stylelint –fix ➡️ Formatted Code or eslint-config-prettier and stylelint-config-prettier which is Code ➡️ eslint&#x2F;stylelint ➡️ prettier –write ➡️ Formatted Code Both of them would work when formatting and linting before commit. The only difference is Prettier first or linter first? Obviously, the latter would decide the code style. If you choose prettier-eslint and prettier-stylelint, the pros are you can decide the code style by .eslintrc.js and .stylelintrc.js which provide lots of options. the cons are about the editor plugins. vscode-stylelint doesn’t support auto fix. You can find the issue here. vscode-eslint can’t fix all at one time by enable &quot;eslint.autoFixOnSave&quot;: true. You can find the issue here. You might encounter situations like: or even worse like If you choose eslint-config-prettier and stylelint-config-prettier, the pros are prettier-vscode support auto fix and fix all at one time. the cons are You don’t have too many choices in code style because Prettier only provides a few options for user to choose. Finally, I choose eslint-config-prettier and stylelint-config-prettier. Actually, these two configs just do one thing: Turns off all rules that are unnecessary or might conflict with Prettier. So, when you chose this it means that let prettier do the formatting job while let eslint and stylelint do the linting job. Also, you shouldn’t add stylistic rules in your .eslintrc.js and .stylelintrc.js files as those rules would overwrite eslint-config-prettier and stylelint-config-prettier. Even though you chose prettier-eslint and prettier-stylelint, you should also avoid adding conflicting stylistic rules between .prettierrc.js and .eslintrc.js or .stylelintrc.js. In the end, my .prettierrc.js module.exports = &#123; semi: false, singleQuote: true, tabWidth: 2&#125;; and .eslintrc.js // https://eslint.org/docs/user-guide/configuringmodule.exports = &#123; root: true, parserOptions: &#123; // https://eslint.vuejs.org/user-guide/#usage parser: "babel-eslint", ecmaVersion: 2019 &#125;, env: &#123; browser: true, node: true, es6: true &#125;, extends: [ // https://github.com/standard/standard/blob/master/docs/RULES-en.md "standard", // rules for vue, didn't include any js rules lib like standard or airbnb // https://github.com/vuejs/eslint-plugin-vue#priority-a-essential-error-prevention. "plugin:vue/recommended", // turn off ESLint default stylistic rules // https://github.com/prettier/eslint-config-prettier/blob/master/index.js "prettier", // turn off stylistic rules defined in standard // https://github.com/prettier/eslint-config-prettier/blob/master/standard.js "prettier/standard", // turn off stylistic rules defined in plugin:vue/recommended // https://github.com/prettier/eslint-config-prettier/blob/master/vue.js "prettier/vue" ], // required to lint index.html and *.vue files plugins: ["vue"], // add your custom rules here rules: &#123; //! avoid add stylistic rules // non stylistic rules which are not in the standard but I need "no-debugger": "error", "no-console": "error", "no-extra-semi": "error", "no-prototype-builtins": "error", "require-atomic-updates": "error", "array-callback-return": ["error", &#123; allowImplicit: true &#125;], "block-scoped-var": "error", "guard-for-in": "error", "no-alert": "error", "no-implicit-coercion": "error", "no-extra-label": "error", "no-eq-null": "error", "no-else-return": "error", "no-case-declarations": "error", "vars-on-top": "error", "require-unicode-regexp": "error", "require-await": "error", radix: "error", "prefer-promise-reject-errors": ["error", &#123; allowEmptyReject: true &#125;], "no-void": "error", "no-useless-concat": "error", "no-useless-catch": "error", "no-script-url": "error", "no-return-await": "error", "no-undef": "error", "no-use-before-define": ["error", &#123; functions: false, classes: true &#125;], "no-delete-var": "error", "no-label-var": "error", "no-restricted-globals": [ "error", &#123; name: "event", message: "Use local parameter instead." &#125; ], // todo not good enough for confusing let foo=()=&gt;&#123;&#125; "arrow-body-style": ["error", "as-needed"], "arrow-parens": ["error", "as-needed"], "no-confusing-arrow": ["error", &#123; allowParens: true &#125;], "no-var": "error", "prefer-const": "error", "prefer-rest-params": "error", "prefer-spread": "error", "require-yield": "error", "symbol-description": "error", // eslint-plugin-vue Uncategorized rules "vue/v-on-function-call": ["error", "never"], "vue/require-direct-export": "error", // 'vue/no-empty-pattern': 'error', "vue/eqeqeq": "error", "vue/comma-dangle": "error", // disable if too many violations "vue/component-name-in-template-casing": [ "error", "PascalCase" | "kebab-case", &#123; registeredComponentsOnly: true, ignores: [] &#125; ] &#125;&#125;; and .stylelintrc.js module.exports = &#123; extends: [ "stylelint-config-recommended", // https://github.com/bjankord/stylelint-config-sass-guidelines "stylelint-config-sass-guidelines", "stylelint-config-prettier" ], plugins: ["stylelint-color-format", "stylelint-no-indistinguishable-colors"], rules: &#123; //! avoid add stylistic rules "color-named": "never", "declaration-no-important": true, "selector-max-empty-lines": 0, "selector-max-id": 1, "selector-max-universal": 0, "no-unknown-animations": true, "selector-class-pattern": null, "declaration-property-value-blacklist": null, // todo reduce to 1 when BEM is determined "max-nesting-depth": [ 1, &#123; ignore: ["pseudo-classes", "blockless-at-rules"], ignoreAtRules: ["each", "media", "supports", "include"] &#125; ], "scss/at-import-partial-extension-blacklist": null, "scss/at-import-partial-extension-whitelist": ["scss"], "scss/dollar-variable-pattern": /--.+/u, "scss/partial-no-import": null, "scss/double-slash-comment-inline": null, "scss/double-slash-comment-empty-line-before": null, "scss/selector-nest-combinators": null, "scss/dollar-variable-default": null, "scss/at-function-pattern": null, "scss/at-mixin-pattern": null, "scss/at-import-no-partial-leading-underscore": null, "plugin/stylelint-no-indistinguishable-colors": true, "color-format/format": &#123; format: "rgb" &#125; &#125;&#125;; Format and Lint Before CommitAfter some research, I found that git hook can help us do this job. We can build it by ourself or use third party tools like husky. In my case, I use husky to add git hook and use lint-staged to run my linters and formatters. So, in my project, I add .huskyrc.js, module.exports = &#123; hooks: &#123; "pre-commit": "lint-staged" &#125;&#125;; and .lint-staged.config.js, module.exports = &#123; "*.(js|vue)": ["eslint --fix --cache", "prettier --write", "git add"], "*.(vue|htm|html|css|less|sass|scss|styl|stylus|md|js)": [ "stylelint --fix --cache", "prettier --write ", "git add" ], "*.(htm|html)": ["htmlhint", "prettier --write", "git add"]&#125;; It will run eslint/stylelint/htmlhint before commit. If error appears, commit would be blocked until errors have been fixed. So far, we can ensure the code quality in the repository by eslint, eslint-plugin-vue, stylelint, htmlhint, prettier, husky and lint-staged with no requirements for user settings. Hope svg below can help you organize thoughts. Ways to Avoid Linting Some LinesSometimes, we might need to avoid linting some lines. So, I made a disable list. eslint vscode also provides convenience like below, eslint-plugin-vueFind it via this issue. try &lt;!-- eslint-disable --&gt; this will disable linting for everything below it, you can use &lt;!-- eslint-enable --&gt; to re-enable it back. stylelint You can find it in the change log. Also, for convenience you can install a snippet plugin. For example, I use Stylelint Disable Snippets which works like htmlhint They haven’t support it yet. The latest issue. git In the situation that we need to commit directly and skip the git hook, we can use command like git commit --no-verify -m &quot;your commit message&quot;. Let Editor Consistent With Project ConfigurationsIt is quite common that we want to develop with auto-save, auto-formatter and auto-lint with our editor. In this case, we need to depend on editor’s plugins. According to above configuration. We need eslint, stylelint and htmlhint for lint prettier for format. Vetur for the syntax highlighting. After installing these plugins in your editor, we have to combine them in a proper way. For me, the way is Set prettier as default formatter. Disable vetur formatter. Disable vetur validation for .vue files and internal validation for .css, .less, .scss, style in .html, .js. Enable stylelint, eslint and htmlhint validation. Enable internal script in .html validation because we didn’t add validation for that. And in the user settings, take vscode for example &#123; "files.autoSave": "onFocusChange", // call internal formatter for current file on save. "editor.formatOnSave": true, // set internal formatter as prettier-vscode "editor.defaultFormatter": "esbenp.prettier-vscode", // default value is ['vue'] "prettier.disableLanguages": [""], // show eslint on status bar "eslint.alwaysShowStatus": true, // some rules like [spaced-comment](https://github.com/prettier/prettier/issues/5755) enable in standard // but not disabled in prettier/standard, so need auto fix by eslint. "eslint.autoFixOnSave": true, // enable validation in real time "eslint.validate": [ "javascript", "javascriptreact", &#123; "language": "html", "autoFix": true &#125;, &#123; "language": "vue", "autoFix": true &#125; ], // enable validation in real time "stylelint.enable": true, "htmlhint.enable": true, // disable vetur formatter because formatting job would be done by prettier "vetur.format.enable": false, //disable vetur validation because // eslint plugin in editor will validate template and script using configuration file in project. "vetur.validation.template": false, "vetur.validation.script": false, // stylelint plugin in editor will validate using configuration file in project. "vetur.validation.style": false, "html.validate.styles": false, "css.validate": false, "less.validate": false, "scss.validate": false, // we didn't validate script in html, so enable default validation "html.validate.scripts": true, // disable default validate // eslint plugin in editor will validate template and script using configuration file in project. "javascript.validate.enable": false, // tslint plugin in editor will validate template and script using configuration file in project. "typescript.validate.enable": false&#125; And I made this image for a better understanding. How to Handle History Files with Current Formatter and Linter?Actually, there are many choices. For example, We can fix all the stylistic errors at one time and add disable comments around the remaining linting errors. After that, each time we commit, it won’t have any effects on the code review. Or we can fix all the errors one by one though it will need lots of time. Or you can just leave it there until one day you commit that file. In that case, you might need adding comments each time you commit which would have a little effects on our code review. … For me, I choose the first one. So, I add these scripts in my package.json. &#123; // ... "scripts": &#123; // ... "lint:es": "eslint --ext .js,.vue ./ --fix --cache --debug", "lint:style": "stylelint \"**/*.&#123;vue,htm,html,css,less,sass,scss,styl,stylus,md,js&#125;\" --fix --cache", "lint:html": "htmlhint **/*.&#123;htm,html&#125; --ignore */build/**, */dist/**, */node_modules/**", "lint": "exitzero npm run lint:es &amp;&amp; exitzero npm run lint:style &amp;&amp; exitzero npm run lint:html", "format": "prettier --write \"**/*.*\"", "lint-format": "npm run lint &amp;&amp; npm run format" // ... &#125;&#125; and install related packages by npm i eslint@latest eslint-plugin-vue@latest eslint-config-prettier@latest eslint-plugin-standard@latest eslint-config-standard@latest eslint-loader@latest eslint-plugin-node@latest eslint-plugin-promise@latest eslint-plugin-json@latest -Dnpm i husky@latest lint-staged@latest prettier@latest htmlhint@latest stylelint@latest stylelint-config-prettier@latest stylelint-config-recommended@latest stylelint-config-sass-guidelines@latest stylelint-color-format@latest stylelint-no-indistinguishable-colors@latest exitzero@latest -D Run npm run lint-format. Check all the formatted and linted files. Add the files which don’t need formatting and linting to the .stylelintignore, .prettierignore or .eslintignore. Add configuration comments to disable the errors which the linters can’t fix. In this case, you might need eslint-disable-snippets and Stylelint Disable Snippets editor plugin. Commit the modified files by git commit -m &quot;init format and lint&quot;. Remarks prettier doesn’t support stylus until v1.18.2. eslint would ignore files whose names start from dot. For example, .postcssrc.js .prettierrc.js .stylelintrc.js … However, prettier would format these files. So, if you want to keep consistent with prettier we can add these files to .eslintignore like !/*.js vue-cli3.0 has choice for formatOnSave. However, I don’t recommend because it has multiple cons Project has to run Consume more time on dev Equals compulsory which is not friendly Sometimes you need to restart editor after modifying the .prettierrc.js or .eslintrc.js, especially when you modified options like tabWidth etc. If you have enabled multiple formatters in vscode, you would see Format Document with ... choice when you right click your mouse. The Format Document choice is using your default formatter which is defined by &quot;editor.defaultFormatter&quot;. For example, &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot; is using prettier as default formatter. lint-staged has problems with committing partially staged files currently. The related issues are #62, #75 and article. Prettier support vue at v1.15. So to make sure that prettier will work for you, you might need to check if your prettier version is not earlier than v1.15. This latest vue project format template can be found in my repository vue-project-template. Actually, this idea was not only for vue but also for other front end projects. Whatever lib we choose, we are always writing style, html and script. All we need to do is to choose different plugins for our project. In this case, we choose, eslint-plugin-vue. In other case, you might need eslint-plugin-react, eslint-plugin-angular, etc. Reference ‘Fix all auto-fixable problems’ doesn’t fix as many issues as possible What’s the difference between prettier-eslint, eslint-plugin-prettier and eslint-config-prettier? Poll Results: Popularity of CSS Preprocessors A Survey on CSS Preprocessors Source]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>codeStyle</tag>
        <tag>ESLint</tag>
        <tag>babel</tag>
        <tag>babel-eslint</tag>
        <tag>eslint-plugin-vue</tag>
        <tag>eslint-config-prettier</tag>
        <tag>stylelint</tag>
        <tag>stylelint-config-recommended</tag>
        <tag>stylelint-config-prettier</tag>
        <tag>htmlhint</tag>
        <tag>prettier</tag>
        <tag>husky</tag>
        <tag>lint-staged</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TCP Connection Reuse on HTTP/1.1 and 2.0]]></title>
    <url>%2Fblog%2F2019%2F04%2Ftcp-connection-reuse-in-http-1-1-and-2-0%2F</url>
    <content type="text"><![CDATA[I saw the introduction of http&#x2F;2.0 in developers.google.com. However, I feel confused about the request and response multiplexing. So I decided to make a demo or an example for better understanding. TCP Connection ReuseWhen I saw the TCP connection reuse, I had a lot of questions in my head. For instances, how do I know if the TCP was reused? What would the network be if the TCP wasn’t reused? It seems that HTTP 1.1 also supports TCP connection reuse. So, what’s the difference? …. After searching, I found that there is a Connection ID column in the chrome dev tool Network panel. For example, here is the network image of baidu.com : According to this question The new Connection ID Network Panel column in Canary can help indicate to you that a TCP connection was reused instead of handshaking and establishing a new one. Combined with the above image, we can say that in the network panel of baidu.com Requests to ss1.bdstatic.com are based on H2 (http&#x2F;2.0.) and share the same TCP connection because there is only one connection ID. Requests to www.baidu.com are based on http&#x2F;1.1 and 6 requests share two TCP connections because there are two connection IDs. It seems http&#x2F;1.1 also support TCP connection Reuse. So, how can I prove the advantages of H2 or what’s the difference between the connection reuse of http&#x2F;1.1 and 2.0? That confused me in the past. Prove The Advantages of H2I pick two requests from the network record and then fetch it at the console. The code of requests to http&#x2F;1.1 is: Array(13) .fill() .forEach(() =&gt; &#123; fetch('https://www.baidu.com/favicon.ico', &#123; credentials: 'omit', referrer: 'https://www.baidu.com/', referrerPolicy: 'unsafe-url', body: null, method: 'GET', mode: 'cors' &#125;) &#125;) And the code of requests to http&#x2F;2.0 is: Array(13) .fill() .forEach(() =&gt; &#123; fetch( 'https://ss3.baidu.com/6ONWsjip0QIZ8tyhnq/ps_default.gif?_t=1556369856347', &#123; credentials: 'omit', referrer: 'https://www.baidu.com/', referrerPolicy: 'unsafe-url', body: null, method: 'GET', mode: 'cors' &#125; ) &#125;) Here are the results: Take a closer look at the pictures, we can find that On http&#x2F;1.1 connections, chrome would open up to 6 TCP connections per host and reuse the connections. While on http&#x2F;2.0 connections, chrome would open only one TCP connection per host on http&#x2F;2.0 connections. Also, on http&#x2F;1.1 connections chrome would send the requests one by one when the requests are using the same TCP connection. Just as the developers.google.com said: On HTTP 1.0&#x2F;1.1 connections, Chrome enforces a maximum of six TCP connections per host. If you are requesting twelve items at once, the first six will begin and the last half will be queued. Once one of the original half is finished, the first item in the queue will begin its request process. This would bring more delay when sending more requests. While on http&#x2F;2 connections, chrome would send all the requests to the same origin simultaneously without delay. Differences of TCP Connection Reuse between HTTP&#x2F;1.1 and 2.0On http&#x2F;1.1 connections, chrome would reuse TCP connection by default and you can find Connection: keep-alive in the response headers. But according to docs in mdn This connection will not stay open forever: idle connections are closed after some time (a server may use the Keep-Alive header to specify a minimum time the connection should be kept open). And for http&#x2F;2.0, according to developers.google.com all HTTP&#x2F;2 connections are persistent, and only one connection per origin is required, which offers numerous performance benefits. Source Reference]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>TCP</tag>
        <tag>http/1.1</tag>
        <tag>http/2.0</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web Performance Optimization Summary in 2019.3]]></title>
    <url>%2Fblog%2F2019%2F03%2Fweb-performance-optimization-summary-in-2019-3%2F</url>
    <content type="text"><![CDATA[Where to Learn Web Performance Optimization(WPO)About one month ago, I started to learn and summarize the knowledge about web performance optimization. However, beyond my expectations, there is too many things need to know. After thinking, I chose developers.google.com to start to learn. And other resources are listed here with this article. The reasons that I chose developers.google.com can be listed below: Articles will update when some methods or workarounds is outdated. This is extremely important for me to check it out when I need to update my knowledge about WPO. Also, it lets me know that I am learning something which can be tested and applied right now. For me, a blog is not better than a real-time updated document. All the knowledge about WPO was listed systematically which is easy to understand, remember and use. Summary About WPOThere are too many things for me to remember or test according to the doc. So, I am trying to summarize and abstract to make it simple to deduce and remember. Well, let’s start with the questions. What Is the Target of WPOTo make the page load as quickly as possible, also in a progressive way if possible. How Can We Do ThatGenerally, we can analyze from the following aspects. Use as much cache as possible. For a better control of cache in the front end, we may need to learn something about PWA or Service Worker. Or we might need some knowledge about offline storage like Indexed DB, Web SQL, localStorage and so on. For those content that we can’t use the cache, we need to take other measures. Send as little content as possible which needs code compression, GZIP, code split, tree shake, image compression and remove or replace the bigger resources with smaller ones if possible. refactor component, export, import and file structure with code split or routes. Send the content as closely as possible which needs the help of CDN. Send the content simultaneously as many as possible which needs the help of http/2.0 to breakthrough the 6 parallel TCP connections limit in http&#x2F;1.1 and request the resources simultaneously instead of one by one. Load the resource in a more efficient way which needs to put script at the bottom of body use the async or defer according to the situation use prefetch, preconnect or dns-prefetch according to the situation Render the page in a more efficient way which requires more efficient practice in our daily code. For examples, Use requestAnimationFrame to change the UI instead of setTimeout or setInterval. Implement lazy load with Intersection Observer instead of calculating the position of each target element by getBoundingClientRect. Stick to compositor-only properties like transform and opacity to avoid re-layout and re-paint. Reduce the complexity of selectors. …. How Can We Prove That Our Optimization Is WorkWe need some tools like below to collect the result each time we did an optimization. Lighthouse WebPageTest PageSpeed Insights …… StrictlyStrictly speaking, if we want to do WPO seriously for a long time, we still need to do something like: Set a performance budget Use performance or google analysis tool to get the performance data in the real scene. … Last WordsHere is just a summary about WPO. More accurate information is in developers.google.com. Source Reference]]></content>
      <categories>
        <category>Web Performance Optimization</category>
      </categories>
      <tags>
        <tag>performance</tag>
        <tag>browser</tag>
        <tag>LightHouse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Notes for Developing Web Page]]></title>
    <url>%2Fblog%2F2019%2F02%2Fnotes-for-developing-web-page%2F</url>
    <content type="text"><![CDATA[Here is the stuff. Still Consider IE?If you still need to be compatible with IE browser, the below tag might be needed to render page using EdgeHTML instead of uncertain render engine. &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt; Use Custom Font on the Web?fontmin will help you. For more information, check issues&#x2F;72. Consider Scroll BarBefore we can directly set scroll bar width by ::-webkit-scrollbar for major browsers on PC, we always need to take care of the toggle of scroll bar because it might affect the layout except in Mac. For example, It is common that we need to use box-sizing: border-box; to include the scroll bar. Sometimes we even need to get the scroll bar width in js. Anyway, make sure that you have already considered scroll bar before production. For example, the style, the effect of layout, etc. Mobile Web PageFor the mobile web page, we need to do something else and I write a summary here. Source Reference]]></content>
      <categories>
        <category>summary</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Notes for Developing Mobile Web Page]]></title>
    <url>%2Fblog%2F2019%2F01%2Fnotes-for-developing-mobile-web-page%2F</url>
    <content type="text"><![CDATA[LayoutI guess most of you were using rem, vw, viewport etc. For rem or vw, we always work with the below tag. &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt; And then we transformed px to rem or vw by plugins. However, some guys prefer using internal scale logic like below: &lt;!-- if the device-width is 375 --&gt;&lt;meta name="viewport" content="width=750, initial-scale=0.5" /&gt; It will also work by changing the width and initial-scale at the same time. However, in most cases, we can see the meta[name=&quot;viewport&quot;] with more complicated content. For example, &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no"/&gt; What if we remove the minimum-scale, minimum-scale and user-scalable? The result is: If an input was focused on safari, the web page would zoom in. Here is the proof. You will get the scale buttons like below when you touch the page in WeChat 7.0.0, at least in Android. And the solution is to add user-scalable=no or minimum-scale=1, minimum-scale=1. But you have to accept a shortcoming: User can’t zoom the page using two fingers, at least in my Android WeChat and Chrome 71. Though in some browsers user can still zoom like UC, QQ etc. For better compatibility, we may have to use both user-scalable=no and minimum-scale=1, minimum-scale=1. That’s why we always see the code below. &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no"/&gt; Screen With High ResolutionNormally, we would use png@2x, png@3x etc to solve the vague problem of images brought by high resolution screen. For example, @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) &#123; .example &#123; background: url('/images/my_image@2x.png') center center no-repeat; background-size: cover; &#125;&#125;@media (-webkit-min-device-pixel-ratio: 3), (min-resolution: 288dpi) &#123; .example &#123; background: url('/images/my_image@3x.png') center center no-repeat; background-size: cover; &#125;&#125; A convenient way to do this is by retinajs. And for icons, I would suggest you use svg if possible. vh Is Always Calculated as If the Url Bar Is Hidden.In brief, 100vh doesn’t equal window.innerHeight. For more, check issues&#x2F;38. Consider the Pop-Up KeyboardIf there is an input or another form element, the keyboard would pop up when the element was focused. For example, Is this a bug? Maybe… At least, you have to notice that before deploying. And the best way I think is to consult PM or designer if it’s okay. In that case, the keyboard would make vh smaller which may ruin the layout using vh. Link Highlight While It’s Being TappedIn my Android Chrome 71, the highlight would show when I touch the link. We can disable it by the code below. a &#123; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); -webkit-tap-highlight-color: transparent; /* For some Androids */&#125; I would suggest you disable it because different manufacturers may show different colors. img Without src Would Have 1px White border on Mobile Chrome 70.You may need to add the code below to your reset.css to hide the img without src. img:not([src]) &#123; opacity: 0;&#125; Qrcode in WeChat Use img Instead of background-image. Otherwise, it won’t work. Don’t put two qrcodes in one screen. Otherwise, it would only recognize one. Format-detectionIt is said that iOS safari has a default style for telephone numbers, email, etc. As I tested in iPhoneX 11.3, at least for telephone numbers, it does have a default style like below. If we want to disable the default style we can use the code below to avoid that. &lt;meta name="format-detection" content="telephone=no, email=no, date=no, address=no, url=no"/&gt; If you want to call telephone, send message etc when the element is clicked you can do it by &lt;a href="tel:020-11811922"&gt;Call me: 020-11811922&lt;/a&gt;&lt;a href="sms:10086"&gt;Send me a message: 10086&lt;/a&gt; Disable SelectYou may want to avoid the situation like below when the user is touching the text of the element. You can use the code below to avoid that. .example &#123; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;&#125; The user may still hear the tone or feel the vibration, at least in my WeChat 7.0.0. However, the user can still trigger selection on UC, QQ browser with an extra operation. Avoid Popup Menu in Long Touch ?（Not Compatible）You may also want to disable popup like below when the user is touching an image or other stuff In this case, user-select:none is not enough to cover this. You may have to add js code like below. window.addEventListener('contextmenu', event =&gt; event.preventDefault()) Our User may still hear the tone or feel the vibration, at least in my Android Chrome 71. However, in WeChat, QQ and UC browser, it doesn’t work. and CSS to disable callout in iOS. .target &#123; -webkit-touch-callout: none;&#125; Use touchstart to Imitate hoverAs we all know, there is no hover on mobile. If you really want that, you can use touchstart to imitate it. No Need to Worry About the Scroll BarOn mobile, the scroll bar would hide automatically when you stop scrolling. Source Reference user-scalable]]></content>
      <categories>
        <category>summary</category>
      </categories>
      <tags>
        <tag>mobile</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WheelEvent Compatibility and Delta Handler]]></title>
    <url>%2Fblog%2F2019%2F01%2Fwheelevent-compatibility-and-delta-handler%2F</url>
    <content type="text"><![CDATA[I have seen many times people talking about the compatibility problems of wheelEvent, something about wheel, DOMMouseScroll, mousewheel etc. But now, it seems we don’t need to care about those compatibility problems anymore. As mdn shows, IE9 support wheel event in addEventListener and DOMMouseScroll is only needed for Firefox 17-. And for other major browsers, they all support wheel event. But, there are other problems still need to take care. deltaevent.delta returns different numbers in the major browsers. For instance, if you run the code below at your console in some page, document.body.addEventListener('wheel', function(event) &#123; console.log(event.deltaY)&#125;) then moving your mouse wheel, you will see the deltaY numbers. browsers&#x2F;win7 deltaY Chrome 70 100 Firefox 64 3 IE 11 88.19 Well, you can find a solution to unify the deltaY. But I think the easier way is to give up unifying and only do the accumulation job. For example, try the code below: let wheelSize = 0document.body.addEventListener('wheel', function(event) &#123; wheelSize += event.deltaY &gt; 0 ? 0.025 : -0.025 console.log(wheelSize, event.deltaY)&#125;) In this way, we will get the unified wheelSize. More Situations Need to Watch OutWhen used in projects, there are more things we need to watch out. For example, We might have wheelSize limit. We might want to prevent calculating wheelSize when the page has been scrolled to the top or the bottom. … And the code would become more complicated. For instance, let targetNode = document.bodylet curWheelSize = 1let minWheelSize = 1let maxWheelSize = 10let minScrollTop = 0let maxScrollTop = targetNode.parentNode.scrollHeight - targetNode.parentNode.offsetHeighttargetNode.addEventListener('wheel', wheelCb)function wheelCb(event) &#123; const isDeltaYPositive = event.deltaY &gt; 0 let scrollTop = targetNode.parentNode.scrollTop if ( (scrollTop &lt;= minScrollTop &amp;&amp; !isDeltaYPositive) || (scrollTop &gt;= maxScrollTop &amp;&amp; isDeltaYPositive) ) &#123; return &#125; let stepSize = isDeltaYPositive ? 0.025 : -0.025 let targetWheelSize = curWheelSize + stepSize targetWheelSize = Math.max(targetWheelSize, minWheelSize) targetWheelSize = Math.min(targetWheelSize, maxWheelSize) curWheelSize = targetWheelSize&#125; Original Post Reference]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>WheelEvent</tag>
        <tag>delta</tag>
        <tag>wheel</tag>
        <tag>DOMMouseScroll</tag>
        <tag>mousewheel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tricks in Vue]]></title>
    <url>%2Fblog%2F2019%2F01%2Ftricks-in-vue%2F</url>
    <content type="text"><![CDATA[There are some tricks which can’t be found easily in Vue.js homepage. So, for convenient, I summarized them here. VueAccess Global Variable in TemplateHave you ever done something like this in lots of components? &lt;template&gt; &lt;a @click=&quot;window.open(&apos;...&apos;)&quot;&gt;&lt;/a&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;, data() &#123; return &#123; window: window &#125;; &#125;&#125;;&lt;/script&gt; or &lt;template&gt; &lt;a @click=&quot;bus.$emit(&apos;some-event&apos;)&quot;&gt;&lt;/a&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;, data() &#123; return &#123; bus: bus &#125;; &#125;&#125;;&lt;/script&gt; Actually, you don’t have to, you can register window or bus in Vue.prototype like: Vue.prototype.window = window;Vue.prototype.bus = bus; in the main.js or the entry file. Then you can use bus or window in template directly. Also, this usage prevents Vue watching the attributes of bus or window which would bring a waste of performance. Reactive or Not ReactiveAlways, if we want a data reactive, we have to do something like this: data: &#123; newTodoText: '', visitCount: 0, hideCompletedTodos: false, todos: [], error: null&#125; Set some initial value to adds all the properties found in its data object to Vue’s reactivity system. Things we need to take care about is: If we want to add reactive attributes dynamically, we have to use something like Vue.set or this.$set. Otherwise, they might not be reactive. If we definitely don’t want some data to participate in Vue’s reactivity system even we initialize it in data. We can use something like Object.freeze(). For example, freeze a huge array to improve performance. Scoped Style Won’t Work on Dynamically Inserted ElementsI always use the &lt;style scoped&gt; tag in .vue files. It is always good except when we want to insert elements dynamically. For example: &lt;template&gt; &lt;div id=&quot;app&quot; ref=&quot;app&quot;&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;, mounted() &#123; this.$refs.app.innerHTML = `&lt;h1 class=&quot;App__title&quot;&gt;App__title&lt;/h1&gt;`; &#125;&#125;;&lt;/script&gt;&lt;style scoped&gt;.App__title &#123; color: red;&#125;&lt;/style&gt; color: red won’t work on .App__title because of scoped. The actual style is rendered with a unique attribute like: So, how do we solve this? /deep/ or &gt;&gt;&gt;. &lt;style scoped&gt;/deep/ .App__title &#123; color: red;&#125;&lt;/style&gt; They can be used to override child component style. Here is the doc. Smarter WatchersHave you ever written code like this: &#123; // ... created() &#123; this.fetchPostList() &#125;, watch: &#123; searchInputValue() &#123; this.fetchPostList() &#125; &#125; // ...&#125; Actually, you can simplify it by &#123; // ... watch: &#123; searchInputValue:&#123; handler: 'fetchPostList', immediate: true &#125; &#125; // ...&#125; As the doc said: Passing in immediate: true in the option will trigger the callback immediately with the current value of the expression. $attrs and $listenersI don’t know if you have used $attrs and $listeners from this. However, I never used those until I met this situation. For example: &lt;div id="app"&gt; &lt;base-input :value="value" placeholder="parentPlaceholder" otherAttrs="otherAttrs" @input="inputCb" @click="clickCb" &gt;&lt;/base-input&gt;&lt;/div&gt;&lt;script&gt; let BaseInput = &#123; name: "base-input", template: ` &lt;div&gt; &lt;input type="text" :value="value" :placeholder="placeholder" :otherAttrs="otherAttrs" @input="$emit('input',$event)" @click="$emit('click',$event)" @focus="focusCb" /&gt; &lt;/div&gt;`, props: &#123; value: &#123; type: String &#125; &#125;, computed: &#123; listeners() &#123; const listeners = &#123; ...this.$listeners, focus: this.focusCb &#125;; return listeners; &#125; &#125;, methods: &#123; focusCb(event) &#123; console.log("child", event); &#125; &#125; &#125;; window.app = new Vue(&#123; el: "#app", components: &#123; BaseInput &#125;, data: &#123; value: "", parentPlaceholder: "parentPlaceholder" &#125;, methods: &#123; inputCb(event) &#123; console.log(event); &#125;, clickCb(event) &#123; console.log(event); &#125; &#125; &#125;);&lt;/script&gt; It’s obviously tedious to bind every attribute and listener by hand. Actually, this is where $attrs and $listeners will help us. We can write the BaseInput template like: let BaseInput = &#123; name: "base-input", template: `&lt;div&gt;&lt;input type="text" :value="value" v-bind="$attrs" v-on="listeners" /&gt;&lt;/div&gt;`, props: &#123; value: &#123; type: String &#125; &#125;, computed: &#123; listeners() &#123; const listeners = &#123; ...this.$listeners, // move `focus` in to `listeners` instead of adding one more `focus` listener. focus: this.focusCb &#125;; return listeners; &#125; &#125;, methods: &#123; focusCb(event) &#123; console.log("child", event); &#125; &#125;&#125;; Vue-Router$router and $routeHave you ever wonder about the relationship between $router and $route? I give you a hint: this.$router.currentRoute === this.$route; //true VuexCommit Data by One MutationWe can’t directly mutate state in Vuex. Instead, we have to commit a mutation to mutate the data. However, it would be tedious to write lots of similar mutations like this: let store = new Vuex.Store(&#123; modules: &#123; // ... &#125;, mutations: &#123; updateName(state, data) &#123; state.name = data; &#125;, updateChildrenCount(state, data) &#123; state.children.count = data; &#125; // other similar mutations &#125;&#125;); We can write a public mutation to do this like: let store = new Vuex.Store(&#123; modules: &#123; // ... &#125;, mutations: &#123; replaceProperty(state, &#123; path, data &#125;) &#123; if (typeof path !== "string") &#123; return; &#125; path = path.split("."); let targetObj = path.slice(0, -1).reduce((re, key) =&gt; re[key], state); targetObj[path.pop()] = data; &#125; &#125;&#125;); Then we can mutate state in anywhere with only one mutation like: commit( "replaceProperty", &#123; path: "name", data: name &#125;, &#123; root: true &#125;);commit( "replaceProperty", &#123; path: "children.count", data: data &#125;, &#123; root: true &#125;);commit( "replaceProperty", &#123; path: "some.other.deep.path.in.state", data: data &#125;, &#123; root: true &#125;); It would also work for modules! Original Post Reference 7 Secret Patterns Vue Consultants Don’t Want You to Know - Chris Fritz vue-loader&#x2F;issues&#x2F;749]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>$attrs</tag>
        <tag>$listeners</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[event.preventDefault() in contextmenu Would Trigger mouseup event]]></title>
    <url>%2Fblog%2F2018%2F12%2Fevent.preventdefault()-in-contextmenu-would-trigger-mouseup-event%2F</url>
    <content type="text"><![CDATA[QuestionHow many logs would you have when you click and release right mouse button? Demo1document.oncontextmenu = function() &#123; console.error(event.type, Date.now())&#125;document.onmouseup = function() &#123; console.error(event.type, Date.now())&#125; Demo2document.oncontextmenu = function() &#123; event.preventDefault() console.error(event.type, Date.now())&#125;document.onmouseup = function() &#123; console.error(event.type, Date.now())&#125; The answer is 1,2. The question is Does that matter? And why? MattersNormally, click and release right button would only trigger contextmenu instead of mouseup. document.oncontextmenu = function() &#123; console.error(event.type, Date.now())&#125;document.onmouseup = function() &#123; console.error(event.type, Date.now())&#125; It does make senses in most cases that when we were using onmouseup means that we only want to listen to the mouseup of left button. However, if you used event.preventDefault() in contextmenu, mouseup event would be triggered when you press and release the right button. document.oncontextmenu = function() &#123; event.preventDefault() console.error(event.type, Date.now())&#125;document.onmouseup = function() &#123; console.error(event.type, Date.now())&#125; In most cases, this is not expected as it changes the behavior of mouseup listener because of changes in contextmenu listener. To be honest, this awful unless we add button detection in mouseup listener every time we want to do something when user only press and release left button. document.oncontextmenu = function() &#123; event.preventDefault() console.error(event.type, Date.now())&#125;document.onmouseup = function() &#123; if (event.button !== 0) &#123; return &#125; console.error(event.type, Date.now())&#125; Whyaccording to mdn mouseup, default action of mouseup is Default Action : Invoke a context menu (in combination with the right mouse button, if supported) document.oncontextmenu = function() &#123; console.error(event.type, Date.now())&#125;document.onmouseup = function() &#123; event.preventDefault() console.error(event.type, Date.now())&#125; However, at least Chrome 70 didn’t prevent triggering contextmenu event. But it might explain something. Because default action of rightClick was to invoke a context menu. So, mouseup won’t get triggered. And event.preventDefault() in contextmenu listener did the actual prevent job. So, mouseupget triggered. Anyway, it’s still hard to understand. Original Post Reference]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>mouseup</tag>
        <tag>contextmenu</tag>
        <tag>preventDefault</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Easier Way to Understand apply and call in JS]]></title>
    <url>%2Fblog%2F2018%2F12%2Feasier-way-to-understand-apply-and-call-in-js%2F</url>
    <content type="text"><![CDATA[The first time I know apply was when I met this code: Math.max.apply(null, [1, 2, 3, 4]) As the mdn shows, the syntax is: function.apply( thisArg , [argsArray] ) Actually, in case above, thisArg has no influence which means code below also works: Math.max.apply(undefined, [1, 2, 3, 4])Math.max.apply(Math, [1, 2, 3, 4]) The only effect of apply in the code above is that it can pass the values in array to the function max. So, code above equal Math.max(1, 2, 3, 4) Why would I mention this? Because we don’t need this anymore because we already have ... which works like: Math.max(...[1, 2, 3, 4]) The reason that we still need apply and call is the thisArg. They can help us call some powerful methods. thisArg in apply and callI guess you might have seen this code: Array.prototype.slice.call(&#123; length: 2 &#125;)function fn() &#123; console.log(Array.prototype.slice.call(arguments))&#125;fn(1, 2, 3, 4) //[1,2,3,4] Today, we don’t need this either because of Array.from. But I still want to talk about it for explanation. In the case above, call was used because we want to do something like: let obj = &#123; length: 2 &#125;obj.slice() //Uncaught TypeError: obj.slice is not a function It would cause error because slice was defined in Array.prototype. Only Array instance can call that method. But actually in the implementation of slice, it doesn’t need to be called by Array instance and there is a lot of methods like this. So, in this case, call or apply would let non Array instance call these methods which means Array.prototype.slice.call(&#123; length: 2 &#125;)//works like something like thislet obj = &#123; length: 2 &#125;obj.slice = Array.prototype.sliceobj.slice() And to help it easier to understand , you can remember it like: method.call(thisArg, ...args)//works like in most casesthisArg.method = method// or this way, if thisArg is a primitive valueObject.getPrototypeOf(thisArg).method = methodthisArg.method(...args)//for applymethod.apply(thisArg, args)//works like in most casesthisArg.method = method// or this wayObject.getPrototypeOf(thisArg).method = methodthisArg.method(...args) Wasn’t that easy ? So, let get back to Math.max.apply({}, [1, 2, 3, 4]). You can remember it like: let thisArg = &#123;&#125;thisArg.max = Math.maxthisArg.max(...[1, 2, 3, 4]) And more cases: Object.prototype.toString.call([]) //"[object Array]"//works like thislet thisArg = []thisArg.toString = Object.prototype.toStringthisArg.toString() //"[object Array]"//while[].toString()//"" Or ;[' sd ', 1, 3].map(Function.prototype.call, String.prototype.trim) //['sd','1','3']//works like;[' sd ', 1, 3].map(function(...args) &#123; return String.prototype.trim.call(...args)&#125;)//works like;[' sd ', 1, 3].map(function(...args) &#123; let thisArg = args[0] thisArg.trim = String.prototype.trim // way above wouldn't work because thisArg is a Primitive value, so we use way below instead. Object.getPrototypeOf(thisArg).trim = String.prototype.trim return thisArg.trim(...args.slice(1))&#125;) More in applyAs apply can accept an array-like object. So, what would happen if coding like: Array.apply(null, &#123; length: 2 &#125;) Actually, it equals Array.apply(null, [undefined, undefined]) So, you can understand it like: let thisArg = &#123;&#125; //set null would get error in code below, also thisArg in above case is not importantthisArg.Array = ArraythisArg.Array(undefined, undefined) Function.prototype.call.applyYou might have seen code using Function.prototype.call.apply which seems a little weird. However, it still make sense, especially in ES5. For example, var arrayLike = &#123; 0: 0, length: 1 &#125;Function.prototype.call.apply([].push, [arrayLike, 1])console.log(arrayLike) //&#123;0: 0, 1: 1, length: 2&#125; which works like let arrayLike = &#123; 0: 0, length: 1 &#125;let thisArg = [].pushthisArg.call(arrayLike, 1)console.log(arrayLike) //&#123;0: 0, 1: 1, length: 2&#125; also equal let arrayLike = &#123; 0: 0, length: 1 &#125;[].push.call(arrayLike,1)console.log(arrayLike) //&#123;0: 0, 1: 1, length: 2&#125; which works like let arrayLike = &#123; 0: 0, length: 1 &#125;let thisArg = arrayLikethisArg.push = [].pushthisArg.push(1)console.log(arrayLike) //&#123;0: 0, 1: 1, length: 2&#125; Hope it&apos;s easier to understand `apply` and `call`.[**Original Post**](https://github.com/xianshenglu/blog/issues/50)]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>apply</tag>
        <tag>call</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Serval Ways to Force Update in Vue]]></title>
    <url>%2Fblog%2F2018%2F12%2Fserval-ways-to-re-render-in-vue%2F</url>
    <content type="text"><![CDATA[I have to mention this before we go on. As the doc-Forcing-an-Update says: If you find yourself needing to force an update in Vue, in 99.99% of cases, you’ve made a mistake somewhere. When I come back to write a blog, I find it’s totally true. Well, let’s begin. Here is the demo code based on &#x65;&#x6c;&#x65;&#109;&#x65;&#x6e;&#x74;&#x2d;&#117;&#105;&#x40;&#x32;&#46;&#x34;&#x2e;&#x31;&#x31; and &#x76;&#117;&#101;&#64;&#x32;&#x2e;&#x35;&#46;&#49;&#55;: &lt;div id="app"&gt; &lt;p v-for="item in items" :key="item.id"&gt;&#123;&#123; item.label &#125;&#125;&lt;/p&gt; &lt;hr /&gt; &lt;el-tree :data="items" show-checkbox node-key="id" :default-expanded-keys="[2, 3]" v-if="isElTreeShow" :key="elTreeVersion" &gt; &lt;/el-tree&gt;&lt;/div&gt;&lt;script&gt; window.app = new Vue(&#123; el: "#app", data: &#123; isElTreeShow: true, elTreeVersion: 100, items: [ &#123; id: 1, label: "Level one 1" &#125;, &#123; id: 2, label: "Level one 2", children: [ &#123; id: 21, label: "Level two 2-1" &#125; ] &#125;, &#123; id: 3, label: "Level one 3" &#125; ], compare(a, b) &#123; return a.id - b.id; &#125;, compareReverse(a, b) &#123; return -this.compare(a, b); &#125; &#125; &#125;);&lt;/script&gt; Auto Update with Vue’s Reactivity SystemGo check the doc. $forceUpdateFor example, if someone made a mistake and wrote the code like let length = app.items.length;app.items[length] = &#123; id: length + 1, label: `Level one $&#123;length + 1&#125;` &#125;; You will not see the data update because you just add an nonreactive attribute. In this case, you might need app.$forceUpdate(). However, better idea is using code like: let length = app.items.length;app.items.push(&#123; id: length + 1, label: `Level one $&#123;length + 1&#125;` &#125;); or let length = app.items.length;this.$set(app.items, length, &#123; id: length + 1, label: `Level one $&#123;length + 1&#125;`&#125;); ReassignHowever, it’s common to use third party components. In this case, it may not be easy to modify the component if we find something not good. For example, if we sort the data using: app.items.reverse(); Here is the result: The part above the hr works as expected while the el-tree doesn’t change even you use $forceUpdate. So, in this case, what can we do? We can make it update by reassigning like: app.items = app.items.slice(); Until now, every thing about force update has been solved. I haven’t met problems which can’t be solved by ways above. However, there is some way stronger I have to mention. v-if&#x2F;keyIn some cases, we do need to destroy and rebuild the component. But I didn’t find any API about rebuild except this issue. Some guys said we can rebuild using v-if=&quot;isElTreeShow&quot;: app.isElTreeShow = !app.isElTreeShow;app.$nextTick(() =&gt; &#123; app.isElTreeShow = !app.isElTreeShow;&#125;); or a better idea use :key=&quot;elTreeVersion&quot; app.elTreeVersion++; See? That’s pretty cool. Original Post]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>key</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Remnant Shadows When Toggling HD Pictures with Alpha]]></title>
    <url>%2Fblog%2F2018%2F12%2Fremnant-shadows-when-toggling-pictures-with-alpha-in-firefox-and-safari%2F</url>
    <content type="text"><![CDATA[See the demo: &lt;div id="app" class="app"&gt; &lt;img src="./images/hd3.png" class="app__image" id="app__image" /&gt; &lt;button class="app__button" id="app__button"&gt;next image&lt;/button&gt;&lt;/div&gt;&lt;script&gt; let app__button = document.getElementById('app__button') let app__image = document.getElementById('app__image') app__button.addEventListener('click', function(event) &#123; app__image.style.visibility = 'hidden' app__image.src = './images/hd4.png' app__image.onload = function() &#123; app__image.style.visibility = 'visible' &#125; &#125;)&lt;/script&gt; The code is easy. But the images are special. Type is png. Size is more than 10M. Alpha channel has been modified. Both happen on my win7 and Mac 10.13. In this case, when we click the button above, the result in Firefox and Safari would be: If you look at it carefully, you would see the remnant shadows of previous image. That is unexpected because I change the src in the onload callback. Also, the same thing would happen in Chrome, though the frequency is much lower. So, how do we solve this? Solutionlet app__button = document.getElementById('app__button')let app__image = document.getElementById('app__image')app__button.addEventListener('click', function(event) &#123; app__image.src = '../images/transparent.png' let tempImage = new Image() tempImage.src = '../images/hd4.png' tempImage.onload = function(event) &#123; // setTimeout(() =&gt; &#123; // if you are still worried, you can use setTimeout or requestAnimationFrame to delay app__image.src = event.target.src // &#125;, 20) &#125;&#125;) See? We change the previous image with a transparent image. A little hack, but it works. Obviously, there is a little interval between images onload and browsers’ ready to render the latest image, especially in Firefox and Safari. When the browsers’ performance becomes better this problem may not happen again. Anyway, hope we lucky. Original Post]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>performance</tag>
        <tag>image</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Browsers Disabled Audio AutoPlay]]></title>
    <url>%2Fblog%2F2018%2F11%2Fbrowsers-disabled-audio-autoplay%2F</url>
    <content type="text"><![CDATA[If you have used audio or video, I guess you probably know autoplay attribute. Sometimes, PM wants to use that. However, the browsers doesn’t want that. When I was using autoplay on 2018.10, I find that safari and chrome disabled autoplay when user haven’t interacted with the page, especially on safari mobile. It’s annoying. So, if you want to use autoplay it may fail. So, some guys choose to play the audio when user click or touch the page. But I think the better way is to detect whether the user’s browser support autoplay. And the way is: audioEl .play() .then(res =&gt; &#123; //not disabled &#125;) .catch(er =&gt; &#123; //disabled &#125;) However, ie11 and edge before 2018.1 returns undefined when audio.play(). So, if you care about that, you may try: let audioState = audioEl.play()if (typeof audioState !== 'undefined') &#123; audioState .then(res =&gt; &#123; //not disabled &#125;) .catch(er =&gt; &#123; //disabled &#125;)&#125;//other logic? what are you gonna do? Original Post Reference Autoplay Best Practices with Video.js]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>audio</tag>
        <tag>autoplay</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chrome, vh Is Always Calculated as If the Url Bar Is Hidden]]></title>
    <url>%2Fblog%2F2018%2F11%2Fchrome-vh-is-always-calculated-as-if-the-url-bar-is-hidden%2F</url>
    <content type="text"><![CDATA[The first time when I know vh I was very excited. Finally, we can do this by css instead of js. However, still too naive. As we all know, scroll bar would hide automatically on mobile. So, it wouldn’t affect the layout like on desktop. However, the address bar would also hide when scrolling. Like images below: And the code is: &lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; html, body, .app &#123; /* height: 100%; */ height: 100vh; &#125; .app &#123; width: 100%; border: 10px solid orange; box-sizing: border-box; position: relative; &#125; .app__footer &#123; height: 100px; width: 100%; box-sizing: border-box; border: 10px solid pink; position: absolute; bottom: 0; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="app" class="app"&gt; &lt;header class="app__header"&gt;&lt;/header&gt; &lt;main class="app__main"&gt;&lt;/main&gt; &lt;footer class="app__footer"&gt;app__footer&lt;/footer&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; The viewport size changes when scrolling. In my Mi6X, the smaller is 659px while the larger one is 715px when the address bar is hidden. According to test on chrome 70, height:100% and window.innerHeight is always equal to the smaller one. I think it is correct. I also thought 100vh would act like 100%. However, it’s not. According to developers.google the vh is always calculated as if the URL bar is hidden since Chrome version 56. So, 100vh is equal to the larger one which is 715px on my phone. That’s why images above would happen. In this case, if we use something like bottom:0; with 100vh we would meet situation like image one. Part of app__footer was covered. Instead, if we use height:100%, it won’t happen. However, as we all know it wouldn’t be possible to use 100% when we were in nested css modules. So, in this case, how can we get the 100% in nested css modules? Of course, we can save the 100% to rem like: document.documentElement.style.fontSize = window.innerHeight * 0.01 + 'px' But I think the better way is using CSS_variables. For example: html,body,.app &#123; /* height: 100%; */ /* height: 100vh; */ height: calc(var(--vh) * 100);&#125; document.documentElement.style.setProperty( '--vh', window.innerHeight * 0.01 + 'px') Also, if you are worried about the compatibility. Here is the polyfill. Original Post Reference the-trick-to-viewport-units-on-mobile CSS3 100vh not constant in mobile browser]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>vh</tag>
        <tag>CSS variables</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Image Load Error Handler]]></title>
    <url>%2Fblog%2F2018%2F11%2Fimage-load-error-handler%2F</url>
    <content type="text"><![CDATA[PrefaceIn the past, I posted an answer in SO about how to replace broken images. And the code is window.addEventListener( 'error', windowErrorCb, &#123; capture: true &#125;, true)function windowErrorCb(event) &#123; let target = event.target let isImg = target.tagName.toLowerCase() === 'img' if (isImg) &#123; imgErrorCb() return &#125; function imgErrorCb() &#123; let isImgErrorHandled = target.hasAttribute('data-src-error') if (!isImgErrorHandled) &#123; target.setAttribute('data-src-error', 'handled') target.src = 'backup.png' &#125; else &#123; //anything you want to do console.log(target.alt, 'both origin and backup image fail to load!') &#125; &#125;&#125; And the point is : Put the code in the head and executed as the first inline script. So, it will listen the errors happen after the script. Use event capturing to catch the errors earlier, also for those events which don’t bubble. Use event delegation which avoids binding events on each image. Give the error img element an attribute after giving them a backup.png to avoid error of the backup.png and subsequent infinite loop like below: img error-&gt;backup.png-&gt;error-&gt;backup.png-&gt;error-&gt;,,,,, I thought the answer is almost perfect. But it turns out there is more scenes I don’t know. No Src?Until Chrome 70.0.3538.102 in win7, code below wouldn’t trigger error event. &lt;img /&gt; But code below would trigger! &lt;img src="" /&gt; &lt;img src /&gt; That does make sense. However, img without src wouldn’t hidden. They would have 1px border like: In this case, we may have to do something about that. For instance, img:not([src]) &#123; opacity: 0;&#125; or a default backgroundImage which will work on img though 1px border is still there. img:not([src]) &#123; background: no-repeat left top / cover; background-image: linear-gradient(to right, lightblue, pink); /*or your logo*/&#125; BackgroundImage Error?I still can’t find a perfect solution for backgroundImage. The best answer in SO is like: .app__bg_img_box &#123; background: no-repeat left top / cover; background-image: url(./images/github.png), linear-gradient(to right, lightblue, pink); /* you can also use default.png like code below */ /* background-image: url(./images/github.png), url(./images/default.png); */&#125; And the cons is obvious. You have to take care of the transparency problem of the target image. Users can see the toggle between target image and default image. A little flaw is that default image will always be downloaded. Another way I figured out is like code below. Here is the simplest code: let backgroundDivs = Array.from(document.querySelectorAll('.app__bg_img_box'))backgroundDivs.forEach(div =&gt; &#123; let imgUrl = window .getComputedStyle(div) .backgroundImage.match(/url\(["']?(.*)["']?\)/) if (imgUrl) &#123; let img = new Image() img.src = imgUrl[1] img.onerror = function(event) &#123; div.style.backgroundImage = 'url(./images/default.png)' img.onerror = null &#125; &#125;&#125;) It will work well in most simple scenes but the cons is also obvious: Code will be more complicated if you want to deal with multiple backgroundImages. Each time you updated your dom structure, you may have to run the code above if you have add new divs with backgroundImage. EndingIf lucky enough, we may have the new API in Images which would make code below work. background: image('target.gif', 'fallback.gif'); Reference onerror event using background: url() image-set-notation]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>img</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Build Multiple Choice Cascader with Third Party ui]]></title>
    <url>%2Fblog%2F2018%2F11%2Fbuild-multiple-choice-cascader-with-third-party-ui%2F</url>
    <content type="text"><![CDATA[PrefaceI need to make a cascader which can support multiple choices. However, I didn’t find any ui which supports that until 2018.11.18. That was a little pity. MainI check the element-ui and find multiple cascader was in toDoList while ant-design refuse to support that directly. Maybe because they have already implemented TreeSelect. Here is what TreeSelect looks like: Almost the result I want except the ui. It doesn’t look like a cascader but a tree. Anyway, I built a multiple cascader component based on select and cascader in ant-design-vue. Here is the result: The principle is easy. I use the input in select and hide the popup. And then I hide the input in cascader and show the popup. So, MultipleCascader is equal to input in select plus popup in cascader and use transform to let them stay together. Talking about the event, you have to listen and change the data to show correctly. That is a little troublesome. Anyway, here is the earliest demo in codesandbox. I am not sure if the demo would be always able to visit. The latest version is in here.So, here is the earliest code: App.vue &lt;template&gt; &lt;div id=&quot;app&quot; class=&quot;app&quot;&gt;&lt;MultipleCascader /&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import MultipleCascader from &quot;./components/MultipleCascader&quot;;export default &#123; name: &quot;app&quot;, components: &#123; MultipleCascader &#125;&#125;;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; MultipleCascader.vue &lt;template&gt; &lt;div class=&quot;multi_cascader&quot;&gt; &lt;a-cascader size=&quot;large&quot; class=&quot;multi_cascader__cascader&quot; :popupVisible=&quot;cascaderPopupVisible&quot; :popupClassName=&quot;&apos;multi_cascader__cascader_popup&apos; + timestamp&quot; changeOnSelect expandTrigger=&quot;hover&quot; :options=&quot;cascaderOptions&quot; :fieldNames=&quot;&#123; label: &apos;label&apos;, value: &apos;id&apos;, children: &apos;children&apos; &#125;&quot; v-model=&quot;cascaderValues&quot; ref=&quot;cascader&quot; :showSearch=&quot;&#123; cascaderFilter &#125;&quot; @change=&quot;cascaderChange&quot; &gt;&lt;/a-cascader&gt; &lt;a-select size=&quot;large&quot; class=&quot;multi_cascader__select&quot; dropdownClassName=&quot;hide&quot; mode=&quot;multiple&quot; :value=&quot;selectValues&quot; allowClear placeholder=&quot;Please select&quot; :options=&quot;selectOptions&quot; @focus=&quot;cascaderPopupVisible = true&quot; @deselect=&quot;deleteOption&quot; @change=&quot;selectChange&quot; @search=&quot;selectSearch&quot; &gt;&lt;/a-select&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;MultipleCascader&quot;, data: function() &#123; return &#123; timestamp: Date.now(), selectOptions: [], selectValues: [], cascaderPopupVisible: false, cascaderValues: [], cascaderOptions: [ &#123; id: 1, value: &quot;1&quot;, label: &quot;1&quot;, children: [ &#123; id: 1.1, value: 1.1, label: &quot;1-1&quot; &#125;, &#123; id: 1.2, value: 1.2, label: &quot;1-2&quot;, children: [ &#123; id: 1.21, value: 1.21, label: &quot;1-2-1&quot; &#125;, &#123; id: 1.22, value: 1.22, label: &quot;1-2-2&quot; &#125; ] &#125; ] &#125;, &#123; id: 2, value: 2, label: &quot;2&quot; &#125; ] &#125;; &#125;, mounted() &#123; document.addEventListener(&quot;click&quot;, this.hideCascaderPopup); &#125;, destroyed() &#123; document.removeEventListener(&quot;click&quot;, this.hideCascaderPopup); &#125;, methods: &#123; cascaderChange(values, options) &#123; // you may have different logic with the selected option, here I just want the last one. let targetValue = values.slice(-1).pop(); let targetOption = options.slice(-1).pop(); let selectedValIndex = this.selectValues.indexOf(targetValue); if (selectedValIndex &gt;= 0) &#123; this.selectValues.splice(selectedValIndex, 1); this.selectOptions.splice(selectedValIndex, 1); &#125; else &#123; this.selectValues.push(targetValue); this.selectOptions.push(targetOption); &#125; &#125;, deleteOption(value) &#123; let selectedValIndex = this.selectValues.indexOf(value); this.cascaderChange([value], [this.selectOptions[selectedValIndex]]); &#125;, selectChange(values, vNodes) &#123; if (values.length === 0) &#123; this.selectValues = []; this.selectOptions = []; &#125; &#125;, selectSearch(keyword) &#123; let searchInput = this.$refs.cascader.$el.querySelector(&quot;input&quot;); if (searchInput) &#123; searchInput.value = keyword; searchInput.dispatchEvent(new Event(&quot;input&quot;)); &#125; &#125;, cascaderFilter(inputValue, path) &#123; return path.some( option =&gt; option.label.toLowerCase().indexOf(inputValue.toLowerCase()) &gt; -1 ); &#125;, hideCascaderPopup(event) &#123; let cascaderPopup = document.querySelector( &quot;.multi_cascader__cascader_popup&quot; + this.timestamp ); let isClickCascaderPopup = cascaderPopup &amp;&amp; cascaderPopup.contains(event.target); if (isClickCascaderPopup) &#123; return; &#125; this.cascaderPopupVisible = false; &#125; &#125;&#125;;&lt;/script&gt;&lt;style scoped&gt;.multi_cascader &#123; height: 100vh; display: flex; flex-flow: column; justify-content: center; align-items: center;&#125;.multi_cascader__select &#123; width: 50%; margin-top: 0; margin-bottom: auto; transform: translate(0, -100%);&#125;.multi_cascader__cascader &#123; width: 50%; margin-top: auto; margin-bottom: 0; opacity: 0;&#125;&lt;/style&gt;&lt;style&gt;/* global style*/.hide &#123; display: none;&#125;&lt;/style&gt; EndingReference]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>ant-design-vue</tag>
        <tag>element-ui</tag>
        <tag>multiple-choice-cascader</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Usage of ESLint]]></title>
    <url>%2Fblog%2F2018%2F10%2Fusage-of-eslint%2F</url>
    <content type="text"><![CDATA[PrefaceI won’t start with questions like what or why. I will start with how and why. Let’s begin. Maininstall eslintInstall global eslint package: npm i eslint@latest -g Then setup a config file. For example: cd /cd d/nodemoduleseslint --init Then it will give you some choices. tips: You may need to npm init first but you can remove it later. If you can’t use arrow key, you may try use cmd.exe instead. After that you will get a config file with some settings. According to tips on terminal, you will need to load some packages like me because of your previous choices. So, I need to: npm i eslint-plugin-react@latest -g Actually you can remove the package.json ( if you have ) now because we are making global eslint settings, not for a project. As far, I have a global eslint config file (d:\nodemodules\.eslintrc.json). And my test file is test4.js. Here is the origin code: let name = &#123; name: "test4.js"&#125;;let obj = &#123;&#125;;function fn(params) &#123;&#125; So, how can I lint test4.js by d:\nodemodules\.eslintrc.json? run eslint on terminalLet’s switch to the folder of test4.js. Then for me, I run code below: eslint --config d:\nodeModules\.eslintrc.json test4.js Result: Here it is. Well, of course we want to fix it when run lint. So, according to ESLint doc we can try code below: eslint --fix --config d:\nodeModules\.eslintrc.json test4.js Result: ESLint will fix some problems, mainly spaces. In the case above, no-unused-vars problems will not be fixed. set custom rulesFuthermore, the expected indent is 4 spaces. But I want 2 spaces to be the default indent. So, we always set our own rules based on ESLint. In my case, I altered the d:\nodemodules\.eslintrc.json like: &#123; //other settings "rules": &#123; "indent": [ "error", 2 //change to 2 not 4 ], //other rules &#125;&#125; Then, run the code above again: eslint --fix --config d:\nodeModules\.eslintrc.json test4.js It works immediately. If you want to change other rules, you may have to know more about the existing rules in Eslint rules. For me, For me, I usually set own rules based on standard not recommended rules and my custom rules is like: &#123; //other settings "extends": "standard", //other settings "rules": &#123; "indent": ["error", 2], "linebreak-style": ["off", "unix"], "quotes": ["error", "single"], "semi": ["error", "never"], "no-multiple-empty-lines": [ "error", &#123; "max": 1, "maxEOF": 0 &#125; ] &#125;&#125; In this case, we run again: eslint --fix --config d:\nodeModules\.eslintrc.json test4.js Actually, I got error: So, I have to run npm i eslint-config-standard@latest -g It turns out I got more warnings. So, I keep installing: npm i eslint-plugin-import@latest eslint-plugin-node@latest eslint-plugin-promise@latest eslint-plugin-standard@latest -g After that, there is no correct warnings. So, I run eslint --fix --config d:\nodeModules\.eslintrc.json test4.js I got a little difference because of different rules: script in .htmlIf you use code above to format js in .html, it will fail. For example: &lt;!-- test4.html --&gt;&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; html, body &#123; width: 100%; height: 100%; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;canvas id="canvas"&gt;&lt;/canvas&gt; &lt;div&gt; &lt;div&gt; &lt;div&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; let name = &#123; name: "test4.js" &#125;; let obj = &#123;&#125;; function fn(params) &#123;&#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; eslint --fix --config d:\nodeModules\.eslintrc.json test4.html Result: See? Actually, we need plugins for non .js files. After search, I have to run code: npm i eslint-plugin-html@latest -g Also, we need to update d:\nodeModules\.eslintrc.json and it would be: &#123; "env": &#123; "browser": true, "commonjs": true, "es6": true, "node": true &#125;, "extends": "standard", "parserOptions": &#123; "ecmaFeatures": &#123; "jsx": true &#125;, "ecmaVersion": 2018, "sourceType": "module" &#125;, "plugins": ["html"],//add this plugin "rules": &#123; "indent": ["error", 2], "linebreak-style": ["off", "unix"], "quotes": ["error", "single"], "semi": ["error", "never"], "no-multiple-empty-lines": [ "error", &#123; "max": 1, "maxEOF": 0 &#125; ] &#125;&#125; After that, you run the code and ESLint would work for .html files. move –fix to editorAs far, it seems there is only one flaw left. Do we have to run the code every time we want to format? Actually, we don’t have to. For me, using vscode, ESLint provides plugins to do these jobs. For other editor users, you may want to check the ESLint doc. Here is the operations for vscode. Install ESLint plugin. Then add some settings in your User Settings. &#123; "eslint.options": &#123; //replace with your filename and path "configFile": "D:/nodeModules/eslint/.eslintrc.json" &#125;, "eslint.alwaysShowStatus": true, "eslint.autoFixOnSave": true, "eslint.run": "onSave", "eslint.validate": [ "javascript", "javascriptreact", &#123; "language": "html", "autoFix": true &#125;, &#123; "language": "vue", "autoFix": true &#125; ]&#125; After restarting your editor, you will see And If your default settings of formatOnSave:true, then ESLint would format your code onSave. make global and local config file independentUntil now, everything seems perfect with ESLint. But there is one thing I need to mention. Suppose that you create a new vue project using vue-cli. vue create my-projcd my-proj You may find that ESLinter error like below: You can see this because we set the eslint.options in the User Settings. eslint.options setting is like passing it on the command line in a terminal using the --config. If you do this ESLint respects this and will not use the one in the project folder. However, if we delete the eslint.options it won’t be able to format other files. So, the compromise solution is : delete the eslint.options move the global config file to the top. For example: home .eslintrc projects projectOne .eslintrc projectTwo If we move the d:\nodeModules\.eslintrc.json to home, then delete the eslint.options. The result would be: code in project one will be validated using the local .eslintrc file code in project two will be validated using the .eslintrc file in your home directory Got it? I learn this from Override global eslintrc if one is found in current project. At last, eslint in User Settings is: &#123; "eslint.options": &#123; // "configFile": "D:/nodeModules/eslint/.eslintrc.json", &#125;, "eslint.alwaysShowStatus": true, "eslint.autoFixOnSave": true, "eslint.run": "onSave", "eslint.validate": [ "javascript", "javascriptreact", &#123; "language": "html", "autoFix": true &#125;, &#123; "language": "vue", "autoFix": true &#125; ]&#125; And in the folder of all projects, I have global eslint config file: EndingReference Override global eslintrc if one is found in current project]]></content>
      <categories>
        <category>code-quality</category>
      </categories>
      <tags>
        <tag>ESLint</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Problems Met When Using canvas]]></title>
    <url>%2Fblog%2F2018%2F10%2Fproblems-met-when-using-canvas%2F</url>
    <content type="text"><![CDATA[PrefaceKind of weird when using canvas, but it’s true. Let’s take a look. Maincanvas would lost accurate data when opacity isn’t equal to 255sample code: &lt;canvas id="canvas"&gt;&lt;/canvas&gt; let canvas = document.getElementById('canvas')let cxt = canvas.getContext('2d')let imageData = cxt.getImageData(0, 0, 1, 1)let data = imageData.datadata[0] = 200data[1] = 100data[2] = 50data[3] = 25console.log(imageData.data) //[200, 100, 50, 25]cxt.putImageData(imageData, 0, 0)let debugImgData = cxt.getImageData(0, 0, 1, 1)console.log(debugImgData.data) //[204, 102, 51, 25] imageData.data wouldn’t be equal to debugImgData.data because opacity isn’t equal to 255. If we set opacity to 255. They would be the same. data[3] = 255 imageData.data is readonlyYou can modify data but you can’t reassign it like imageData.data=[1,22,3,5]. It will fail silently. copy imageDataBecause imageData.data is readonly. So, you can’t copy it like code below: let newImgData = cxt.createImageData(debugImgData)newImgData.data = debugImgData.dataconsole.log('newImgData', newImgData.data) //[0,0,0,0] According to mdn, return value of createImageData is A new ImageData object with the specified width and height. The new object is filled with transparent black pixels. which is [0,0,0,0,,,,]. And assignment of newImgData.data = debugImgData.data fail silently. So, if you want to copy imageData the right way is: let newImgData = cxt.createImageData(debugImgData)newImgData.data.set(debugImgData.data)console.log('newImgData', newImgData.data) //[200, 100, 50, 255] That is because ImageData.data is a Uint8ClampedArray. So we can find the API ofUint8ClampedArray.prototype.set() which stores multiple values in the typed array, reading input values from a specified array. EndingReference HTML Canvas putImageData with transparency causes incorrect RGB to be saved]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Override 3rd Party Style]]></title>
    <url>%2Fblog%2F2018%2F10%2Foverride-3rd-party-style%2F</url>
    <content type="text"><![CDATA[PrefaceIt is very common to see 3rd party libs in our projects, especially some UI frames. Meanwhile, here comes the problems. How can we override partial 3rd party style and avoid our style being overridden by 3rd party. Well, that’s two question. MainOverride Partial 3rd Party Style lib-override.css I think the first thing is to prepare a single file like lib-override.css to do this job whatever choice we make. override ways It’s obvious that !important or #id can help us do this job. However, I wouldn’t suggest you to do that. I would choose to use class selector with namespace to solve this kind of problem. For example, 3rd party code is: .el-button--primary &#123; color: #fff;&#125; Then you can write: .app &#123; .el-button--primary &#123; color: #fff; &#125;&#125; Code above also works to avoid our style being overridden by 3rd party. In some cases, if one class is not enough you may have to add more class as namespace. EndingReference]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>override.css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Understand .sync in Vue]]></title>
    <url>%2Fblog%2F2018%2F10%2Funderstand-sync-in-vue%2F</url>
    <content type="text"><![CDATA[PrefaceThe first time I met .sync modifier, I didn’t know it very well. So, I seldom use that. Today, I am going to get it. MainIn the past, I use “two-way binding” like this: &lt;div class="app" id="app"&gt; &lt;button-counter :child-count="parCount" @add="add"&gt;&lt;/button-counter&gt; &lt;p&gt;parent component &#123;&#123;parCount&#125;&#125;&lt;/p&gt;&lt;/div&gt; let app = new Vue(&#123; el: "#app", data: &#123; parCount: 0 &#125;, methods: &#123; add() &#123; this.parCount++; &#125; &#125;, components: &#123; "button-counter": &#123; template: '&lt;button @click="add"&gt;You clicked me &#123;&#123; childCount &#125;&#125; times.&lt;/button&gt;', props: ["childCount"], methods: &#123; add() &#123; this.$emit("add"); &#125; &#125; &#125; &#125;&#125;); It was easy to understand except a little inconvenient. I need to listen and handle event in child and parent component. Also true two-way binding can create maintenance issues, because child components can mutate the parent without the source of that mutation being obvious in both the parent and the child. So, Vue recommends emitting events in the pattern of update:myPropName. For example: &lt;div class="app" id="app"&gt; &lt;button-counter :child-count="parCount" @update:child-count="parCount=$event" &gt;&lt;/button-counter&gt; &lt;p&gt;parent component &#123;&#123;parCount&#125;&#125;&lt;/p&gt;&lt;/div&gt; let app = new Vue(&#123; el: "#app", data: &#123; parCount: 0 &#125;, methods: &#123;&#125;, components: &#123; "button-counter": &#123; template: '&lt;button @click="add"&gt;You clicked me &#123;&#123; childCount &#125;&#125; times.&lt;/button&gt;', props: ["childCount"], methods: &#123; add() &#123; this.$emit("update:child-count", this.childCount + 1); // child-count is right while childCount won't work &#125; &#125; &#125; &#125;&#125;); See? In this case, we don’t have to add event callback in parent component because vue have done that. And this is the principle of .sync. For convenience, Vue offers a shorthand for this pattern with the .sync modifier which would make the code above like: &lt;div class="app" id="app"&gt; &lt;button-counter :child-count.sync="parCount"&gt;&lt;/button-counter&gt; &lt;p&gt;parent component &#123;&#123;parCount&#125;&#125;&lt;/p&gt;&lt;/div&gt; let app = new Vue(&#123; el: "#app", data: &#123; parCount: 0 &#125;, methods: &#123;&#125;, components: &#123; "button-counter": &#123; template: '&lt;button @click="add"&gt;You clicked me &#123;&#123; childCount &#125;&#125; times.&lt;/button&gt;', props: ["childCount"], methods: &#123; add() &#123; this.$emit("update:childCount", this.childCount + 1); // childCount is right while child-count won't work &#125; &#125; &#125; &#125;&#125;); Also, The .sync modifier can also be used with v-bind when using an object to set multiple props at once: &lt;text-document v-bind.sync="doc"&gt;&lt;/text-document&gt; This passes each property in the doc object (e.g. title) as an individual prop, then adds v-on update listeners for each one. For more information, go Vue.js EndingReference]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>.sync</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Move the Switch of Console to URLSearchParams]]></title>
    <url>%2Fblog%2F2018%2F10%2Fmove-the-switch-of-console-to-urlsearchparams%2F</url>
    <content type="text"><![CDATA[PrefaceIt is very common for us to use console.log When we are in a development environment. So, how do you handle this when you are preparing to deploy it to server? In the past, I chose to delete those debug logs. However, I guess nobody likes doing that and in some place, I really want to keep that. MainOne day, I find a better way to handle this. Before the main js code, I add code below: let urlSearchParams = new URLSearchParams(window.location.search)let isDebug = urlSearchParams.get('debug') === '1'if (!isDebug) &#123; console.log = function() &#123;&#125;&#125; EndingReference]]></content>
      <categories>
        <category>debug</category>
      </categories>
      <tags>
        <tag>console.log</tag>
        <tag>URLSearchParams</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue Form Input Bindings Fail?]]></title>
    <url>%2Fblog%2F2018%2F10%2Fvue-form-input-bindings-fail%2F</url>
    <content type="text"><![CDATA[PrefaceWhen I was using form validate in Vue, I found sometimes vue doesn’t render data which was modified by me. I even thought it was a bug. Anyway, let’s take a look. MainHere is a simple demo: html,body &#123; width: 100%; height: 100%;&#125;.app &#123; width: 100%; height: 100%;&#125; &lt;div class="app" id="app"&gt; &lt;form&gt; &lt;input type="text" id="positive-num" :value.trim="positiveNum" @input="oldValidate" :placeholder="positiveNumTip" /&gt; &lt;p&gt;&#123;&#123;positiveNumResTip&#125;&#125;&#123;&#123;positiveNum&#125;&#125;&lt;/p&gt; &lt;/form&gt;&lt;/div&gt; let app = new Vue(&#123; el: "#app", data: &#123; positiveNumTip: "please enter a positive num", positiveNum: "", positiveNumResTip: "validated and modified result: " &#125;, methods: &#123; oldValidate(event) &#123; let value = event.target.value; let reg = /^[\d]+[.]?[\d]*$/; let newVal = Number.parseFloat(value); if (!value.match(reg)) &#123; if (!isNaN(newVal) || newVal &gt; 0) &#123; this.positiveNum = newVal; &#125; else &#123; this.positiveNum = 1; &#125; &#125; else &#123; this.positiveNum = value; &#125; &#125; &#125;&#125;); When I was pressing dddddddddd, what did I got? The first letter was replaced to 1 but the others not. And the most important is the result I got is always 1 which means this.positiveNum is 1 while the value in the input is not 1. Why? I even thought it was a bug until one day I met a similar problem which was solved in SO. The key is the Lifecycle. The guide mentions it before but I didn’t understand it until now. Let’s see the picture again: See? The first time we change positiveNum to 1 and then we always change positiveNum to 1. So, vue wouldn’t re-render because the data doesn’t change. So, the connection between input and positiveNum was cut off until positiveNum isn’t equal to 1. We can add updated to see how many times data has changed: let app = new Vue(&#123; el: "#app", data: &#123; positiveNumTip: "please enter a positive num", positiveNum: "", positiveNumResTip: "validated and modified result: " &#125;, methods: &#123; oldValidate(event) &#123; let value = event.target.value; let reg = /^[\d]+[.]?[\d]*$/; let newVal = Number.parseFloat(value); if (!value.match(reg)) &#123; if (!isNaN(newVal) || newVal &gt; 0) &#123; this.positiveNum = newVal; &#125; else &#123; this.positiveNum = 1; &#125; &#125; else &#123; this.positiveNum = value; &#125; &#125; &#125;, updated() &#123; console.log("data updated"); //only triggered once &#125;&#125;); As explained before, you can only see &#39;data updated&#39; once. So, how can we solved this problem? The key is still the Lifecycle. Vue wouldn’t re-render because data doesn’t change. So, we can update data after data has been changed and rendered. Understood? See code below: &lt;div class="app" id="app"&gt; &lt;form&gt; &lt;input type="text" id="positive-num" :value.trim="positiveNum" @input="newValidate" :placeholder="positiveNumTip" /&gt; &lt;p&gt;&#123;&#123;positiveNumResTip&#125;&#125;&#123;&#123;positiveNum&#125;&#125;&lt;/p&gt; &lt;/form&gt;&lt;/div&gt; let app = new Vue(&#123; el: "#app", data: &#123; positiveNumTip: "please enter a positive num", positiveNum: "", positiveNumResTip: "validated and modified result: " &#125;, methods: &#123; oldValidate(event) &#123; let value = event.target.value; let reg = /^[\d]+[.]?[\d]*$/; let newVal = Number.parseFloat(value); if (!value.match(reg)) &#123; if (!isNaN(newVal) || newVal &gt; 0) &#123; this.positiveNum = newVal; &#125; else &#123; this.positiveNum = 1; &#125; &#125; else &#123; this.positiveNum = value; &#125; &#125;, newValidate(event) &#123; let value = event.target.value; let reg = /^[\d]+[.]?[\d]*$/; this.positiveNum = value; this.$nextTick(() =&gt; &#123; if (!this.positiveNum.match(reg)) &#123; let newVal = Number.parseFloat(this.positiveNum); if (!isNaN(newVal) || newVal &gt; 0) &#123; this.positiveNum = newVal; &#125; else &#123; this.positiveNum = ""; //for better use I changed the wrong value to '' &#125; &#125; &#125;); &#125; &#125;, updated() &#123; console.log("data updated"); &#125;&#125;); See? I move the origin logic to the this.$nextTick(callback). Every time you press the wrong button, it will pass the wrong value to positiveNum and will be corrected in this.$nextTick(callback) which will make the logic run correctly. Also, you can see the updated log at the console. EndingReference change child-component checked state from parent-component synchronously fail]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>$nextTick</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Better Way to Use orientationchange Event on Mobile]]></title>
    <url>%2Fblog%2F2018%2F10%2Fbetter-way-to-use-orientationchange-event-on-mobile%2F</url>
    <content type="text"><![CDATA[PrefaceWhen I was using orientationchange event, I met a few bugs. So, I take it down. Maincompatibility problemWhen I was testing my code on my android, it was ok. However, it doesn’t work on my boss’s iPhone6. So, i have to change the code. The origin code was like: &lt;div class="box" id="box"&gt; html,body &#123; width: 100%; height: 100%;&#125;.box &#123; width: 100%; height: 100%; background: pink;&#125;.box.landscape &#123; background: lightblue;&#125; let box = document.getElementById('box')window.addEventListener('orientationchange', orientationChangeCb)function orientationChangeCb(event) &#123; let isLand = isLandscape() if (isLand) &#123; box.classList.add('landscape') &#125; else &#123; box.classList.remove('landscape') &#125;&#125;function isLandscape() &#123; if ('orientation' in window) &#123; return Math.abs(window.orientation) === 90 &#125; else &#123; return window.innerWidth &gt; window.innerHeight &#125;&#125; To be compatible with iPhone6, I use resize event instead. However, the better way I think is : let eventForOrientationChange = 'onorientationchange' in window ? 'orientationchange' : 'resize'if (isMobile()) &#123; window.addEventListener(eventForOrientationChange, orientationChangeCb)&#125; isMobile ?Because onorientationchange is a mobile event, so if you try to run code below on your computer with chrome, you will get: window.onorientationchange //undefined'onorientationchange' in window //false It seems a little weird but it’s true until chrome 69. That’s why I add isMobile() before I use window.addEventListener. In that case, we don’t have to listen for the resize event on desktop. window.orientation or screen.orientationAccording to mdn, window.orientation has been Deprecated. However, similar API screen.orientation has a big problem for compatibility. Safari and QQ doesn’t support. As of 2018.10.4, global support in caniuse is only 72.5%. css onlyIf you just want to update style, you don’t have to use code above. CSS media queriessupport code like: @media (min-height: 680px), screen and (orientation: portrait) &#123; /* ...; */&#125;@media (min-height: 680px), screen and (orientation: landscape) &#123; /* ...; */&#125; EndingReference detect viewport orientation, if orientation is portrait display alert message advising user of instructions]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>mobile</tag>
        <tag>orientationchange</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[X-UA-Compatible and ie=edge]]></title>
    <url>%2Fblog%2F2018%2F10%2Fx-ua-compatible-and-ie-edge%2F</url>
    <content type="text"><![CDATA[Preface平时会用 vue 写新项目，老项目就在原有基础上更新。对于 vue 这种框架，使用官方的脚手架通常就避免了很多问题，就像平时用模板创建新的单页一样。 然而有时总是会遇到些不按模板走的代码，虽然跑起来也没有问题，但是放到有些浏览器上就有 bug 了，这个时候对既有模板的理解和掌握就很重要了。 Main当我用 html 模板创建一个新单页时，拿到的页面是这样的，vue 也是类似，至少三个 meta 标签基本都是一样的： &lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; viewport 是在兼容移动端时才了解的内容，费了不少功夫。而 X-UA-Compatible 则是在遇到非常规代码的时候才想起来的。有一回改个老项目，用了 transform，在 ie11 上测试，没有用，而且在它的工具栏里样式表里根本看不到我写的代码，这个时候我就好奇了，这是 ie11 啊，怎么会不支持 transform 呢？然后我瞄了一下开发者工具，大概是这样的： 然后我就好奇了，为什么会是 ie7 模式呢？我明明装的是 ie11 浏览器啊，然后脑袋一闪，好像明白了什么，看了看 html ，果然没有: &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; 加上之后，再刷新，网页就正常了。 在这件事之前，我知道这个东西，但是因为是用的模板，一直没有遇到过这个问题，而且通常来说，我会以为，我既然是在 ie11 里打开的，默认你也没有理由用 ie11- 的文档模式去渲染啊，结果就错了。后来看到 SO 上高票答主大概是这么解释 ie 的行为的： ie 会用它认为最好的方式去渲染页面，如果没有上面那行代码的话 此外，ie11 已经开始废弃上面那个了，如果不兼容 ie 的话，其实上面的代码也可以不用写了，不过目前为止 html 模板和 vue 的模板都还是默认支持的。而上面的那行代码实际意思呢，就是： Edge：始终以最新的文档模式来渲染页面。忽略文档类型声明。对于 IE8，始终保持以 IE8 标准模式渲染页面。对于 IE9，则以 IE9 标准模式渲染页面。 当然 ie 还可以等于其他值，不过其他值大多都是老版本，目前而言，都没有必要去纠结了，譬如： “IE&#x3D;edge” “IE&#x3D;11” “IE&#x3D;EmulateIE11” “IE&#x3D;10” “IE&#x3D;EmulateIE10” “IE&#x3D;9” “IE&#x3D;EmulateIE9 … EndingReference What does &lt;meta http-equiv&#x3D;“X-UA-Compatible” content&#x3D;“IE&#x3D;edge”&gt; do?]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>meta</tag>
        <tag>content</tag>
        <tag>http-equiv</tag>
        <tag>X-UA-Compatible</tag>
        <tag>ie=edge</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 qrcodejs 生成二维码的几个问题]]></title>
    <url>%2Fblog%2F2018%2F10%2Fproblems-met-when-using-qrcodejs%2F</url>
    <content type="text"><![CDATA[Preface产品希望我这边下载页面加个二维码，可以扫描下载 APP，并且希望二维码中有公司的 logo，很合理的需求，不过实现的时候依旧遇到了几个问题，在此记录下。 Main二维码的实现逻辑我当然没有这个时间去研究，直接用的 qrcodejs。官方给的 demo 是最简单的版本，各种各样的需求都是在 issues 里找到的提示，似乎这个库已经很久没有人去维护了，虽然 star 是很多。 官网示例（改编）&lt;div id="qrcode" class="qrcode"&gt;&lt;/div&gt; .qrcode &#123; width: 150px; height: 150px; border: 2px solid green; margin-top: 15px;&#125; let qrcodeEl = document.getElementById('qrcode')let qrcode = new QRCode(qrcodeEl, &#123; text: 'https://avatars1.githubusercontent.com/u/23273077', width: 128, height: 128, colorDark: '#000000', colorLight: '#ffffff', correctLevel: QRCode.CorrectLevel.H&#125;) 效果如图： 尺寸控制我给官网的示例加上了边框，二维码的尺寸和 js 里的尺寸不一样，这个缺点立马就暴露出来了。 我很可能是想生成的二维码填满传入的 qrcode 元素的，但是这里的 width 不支持 100%，更不支持 vw 这种尺寸单位了。当然，我可以用 qrcode.offsetWidth 来解决这个问题，但是如果 qrcode 的尺寸后期会动态修改的话，那不还是会有问题么。 经 SO 的提示，发现了一个好方案， .qrcode &#123; width: 150px; height: 150px; border: 2px solid green; margin-top: 15px;&#125;.qrcode canvas + img &#123; width: 100%; height: 100%;&#125; 这样就可以了，不过仍然有个不足，就是二维码有失真。经测试，只有传入的尺寸和 qrcode 的尺寸一样时，才不会失真，所以传入的尺寸还是需要动态计算。不过，可以试试 svg 的 qrcode 库，svg 不会出现这个问题。 加 logo 的二维码qrcodejs 并没有提供这个 API，issues 里有人给了 demo，其实就是在原有元素上覆盖一个 logo 就可以了，虽然遮盖了原有二维码的一部分，但是实测并不影响扫描。不过我没有进行大规模测试，可能会有一定的错误率。 &lt;div id="qrcode" class="qrcode"&gt; &lt;img src="https://avatars1.githubusercontent.com/u/23273077" class="qrcode__logo" /&gt;&lt;/div&gt; .qrcode &#123; width: 150px; height: 150px; border: 2px solid green; margin-top: 15px; position: relative;&#125;.qrcode canvas + img &#123; width: 100%; height: 100%;&#125;.qrcode__logo &#123; width: 50px; height: 50px; border-radius: 10%; border: 1px solid #fff; position: absolute; margin: auto; left: 0; top: 0; right: 0; bottom: 0;&#125; 效果如图： 检测二维码的生成某些情况下，我需要重用二维码，在这种情况下，我发现，二维码的生成是异步的，譬如： let qrcodeEl = document.getElementById('qrcode')let qrcode = new QRCode(qrcodeEl, &#123; text: 'https://avatars1.githubusercontent.com/u/23273077', width: 200, height: 200, colorDark: '#000000', colorLight: '#ffffff', correctLevel: QRCode.CorrectLevel.H&#125;)let qrcodeImg = document.querySelectorAll('.qrcode canvas+img')console.log('qrcodeImg.src', qrcodeImg.src)setTimeout(function() &#123; console.log('qrcodeImg.src', qrcodeImg.src)&#125;, 1000) 第一个日志就是空白的，第二个才有 base64。搞笑的是，qrcodejs 也没有给出回调或者通知告诉用户什么时候生成完毕。 这个问题也是在 issues 里找到的提示，关键点在于 MutationObserver。 这个 API 很少在项目中用，因为不兼容性 ie11-，但是有时在几千行代码里 debug 时会用，尤其是我怀疑中间有代码改了某个元素的属性，确又找不到证据或者找不到哪段代码时，会用这个来监测下。在这里的用法如下： let qrcodeEl = document.getElementById('qrcode')let qrcode = new QRCode(qrcodeEl, &#123; text: 'https://avatars1.githubusercontent.com/u/23273077', width: 200, height: 200, colorDark: '#000000', colorLight: '#ffffff', correctLevel: QRCode.CorrectLevel.H&#125;)let qrcodeImg = document.querySelector('.qrcode canvas+img')listenQrcodeSrc()function listenQrcodeSrc() &#123; var observeConfig = &#123; attributes: true &#125; var observeCb = function(mutationsList, observer) &#123; mutationsList.forEach(function(mutation) &#123; if ( mutation.type.toLowerCase() === 'attributes' &amp;&amp; mutation.attributeName.toLowerCase() === 'src' ) &#123; console.log('qrcodeImg src done!', mutation.target.src) observer.disconnect() &#125; &#125;) &#125; if (typeof MutationObserver !== 'undefined') &#123; var observer = new MutationObserver(observeCb) observer.observe(qrcodeImg, observeConfig) &#125;&#125; 微信中二维码要放在 img 中，不能放在 background-image2019.1.31 ，微信 7.0.0 亲测 微信中多个二维码在一起识别错误这个问题，我也遇到了，根据网友的提示，微信是截屏识别的，所以会出现这种问题。我测试的结果是，左右两个，永远识别的右边的那个。网上有好几种方案： 调透明度和层级 最初尝试过，结果发现失败，等到成功的时候，透明度已经小于 0.5 了，视觉差异太明显，所以放弃了这个方案。 替换二维码 最终采取的是这个，这个也有问题，就是用户会看到二维码变化的过程，除非你把多个二维码做得很像。 假设，我们要显示两个二维码，所谓替换二维码，其实也就是在多个 img.src 属性里切换，可以把实际的二维码保存在 data-real-src 属性里，然后在用户 touchstart 事件中，替换另一个 img 的 src 为当前按下的这个，然后在 touchend 事件中再改回来，因为原来的地址都保存在 data-real-src 属性里。 这里就用到了前面提到的检测 src 属性来判断 qrcode 生成完毕，否则一开始直接把 src 属性赋给 data-real-src 属性，就是空白。 示例代码（这里代码跟前面脱节了，dom 是另外的结构，仅作为示例代码）： //* pubMethods 是类似 jq 的一些 API 的汇总对象var qrcodeImgs = pubMethods.$('.download__qrcode-box canvas+img')listenQrcodeSrc()var downloadBox = pubMethods.$('.download')[0]downloadBox.addEventListener('touchstart', changeQrcodeSrcToOne)downloadBox.addEventListener('touchend', changeQrcodeSrcBack)downloadBox.addEventListener('touchcancel', changeQrcodeSrcBack)function listenQrcodeSrc() &#123; var observeConfig = &#123; attributes: true &#125; var observeCb = function(mutationsList, observer) &#123; mutationsList.forEach(function(mutation) &#123; if ( mutation.type.toLowerCase() === 'attributes' &amp;&amp; mutation.attributeName.toLowerCase() === 'src' ) &#123; mutation.target.setAttribute('data-real-src', mutation.target.src) observer.disconnect() &#125; &#125;) &#125; qrcodeImgs.forEach(function(ele) &#123; if (typeof MutationObserver !== 'undefined') &#123; var observer = new MutationObserver(observeCb) observer.observe(ele, observeConfig) &#125; &#125;)&#125;function changeQrcodeSrcToOne(event) &#123; var target = event.target var getQrcodeBox = pubMethods.closest( target, '.download__qrcode-box', downloadBox ) if (getQrcodeBox) &#123; var targetImg = qrcodeImgs.filter(function(ele) &#123; return getQrcodeBox.contains(ele) &#125;)[0] qrcodeImgs.forEach(function(ele) &#123; ele.src = targetImg.getAttribute('data-real-src') &#125;) &#125;&#125;function changeQrcodeSrcBack(event) &#123; qrcodeImgs.forEach(function(ele) &#123; ele.src = ele.getAttribute('data-real-src') &#125;)&#125; EndingReference Make qr code full width 微信中有两个挨着二维码长按识别的问题?]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>qrcodejs</tag>
        <tag>wechat</tag>
        <tag>MutationObserver</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义微信分享样式]]></title>
    <url>%2Fblog%2F2018%2F10%2Fset-custom-style-of-share-in-wechat%2F</url>
    <content type="text"><![CDATA[Preface产品希望我们在微信分享出去的链接，有自己的样式，而不是仅仅一个链接。用产品的话来说，你发给客户一个链接，客户敢点么？？？ 听着比较有意思，不过也不能说完全没有道理，毕竟各种各样的诈骗大家也是有所耳闻，经确认，产品想要： 而我们当前分享是： Main总监给我提示说，微信有 js-sdk ，可以在 js 里设置这个样式。 于是，我找到了微信 JS-SDK 说明文档，基本上就是根据文档走些配置，这个要和产品那边要些账号密码，改些东西之类，根据文档来，没什么好说的。 大体流程如下： 步骤一：绑定域名 步骤二：引入 JS 文件 步骤三：通过 config 接口注入权限验证配置 wx.config(&#123;&#125;) //传入一些初始化参数 步骤四：通过 ready 接口处理成功验证 wx.ready(function() &#123;&#125;) //传入成功回调 步骤五：通过 error 接口处理失败验证 wx.error(function() &#123;&#125;) //传入失败回调 实际操作的时候，遇到了几点麻烦，这里需要提一下： 测试的时候，注意开启 debug 模式，方便定位问题。wx.config(&#123; debug: true /*其他参数*/ &#125;) 出于安全考虑，开发者必须在服务器端实现签名的逻辑。这个是文档说的，反正就是给后台处理了，最终前端初始化需要的几个字段，除了 debug 和 jsApiList ，都是从后台拿的。 wx.config(&#123; debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。 appId: '', // 必填，公众号的唯一标识 timestamp: , // 必填，生成签名的时间戳 nonceStr: '', // 必填，生成签名的随机串 signature: '',// 必填，签名 jsApiList: [] // 必填，需要使用的JS接口列表&#125;); 后台在实现的时候，可能需要注意文档提示的两点： access_token（有效期 7200 秒，开发者必须在自己的服务全局缓存 access_token） jsapi_ticket（有效期 7200 秒，开发者必须在自己的服务全局缓存 jsapi_ticket） 因为这会导致一开始生成的签名没错，但是两个小时后就失效了。 代码逻辑通常的逻辑都是前端从后台拿到上面的几个字段，在前端完成初始化，然后添加初始化成功和失败的回调。 示例： var link = location.href$.ajax(&#123; url: 'your_url', //后台给你提供的接口 type: 'GET', data: &#123; url: link &#125;, async: true, dataType: 'json', success: function(data) &#123; wx.config(&#123; debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来 appId: data.configMap.appId, // 必填，公众号的唯一标识 timestamp: data.configMap.timestamp, // 必填，生成签名的时间戳 nonceStr: data.configMap.nonceStr, // 必填，生成签名的随机串 signature: data.configMap.signature, // 必填，签名，见附录1 jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2 &#125;) wx.ready(function(res) &#123; wx.onMenuShareAppMessage(&#123; title: document.title, desc: document.title, link: link, imgUrl: Imgurl, trigger: function(res) &#123;&#125;, success: function(res) &#123;&#125;, cancel: function(res) &#123;&#125;, fail: function(res) &#123;&#125; &#125;) wx.onMenuShareTimeline(&#123; title: document.title, link: link, imgUrl: Imgurl, trigger: function(res) &#123;&#125;, success: function(res) &#123;&#125;, cancel: function(res) &#123;&#125;, fail: function(res) &#123;&#125; &#125;) &#125;) wx.error(function(res) &#123; alert(res) &#125;) &#125;, error: function(error) &#123; alert(error) &#125;&#125;) 我司稍微特殊些，直接把初始化的代码放在前面需要引入微信的 js 文件后面了，所以我直接引入这个文件就完成了初始化操作。不过，我还是需要在引入后监听初始化成功和失败的回调。 我司代码： &lt;script src="./js/shareInWeChat.js?debug=1"&gt;&lt;/script&gt;&lt;!-- 里面包含了 wx.config(&#123;&#125;) 的代码--&gt;&lt;!-- 通过 debug 参数来切换调试模式 --&gt; setWeChatShareStyle(product, imgUrl)function setWeChatShareStyle(product, imgUrl) &#123; var success = function(res) &#123;&#125; var fail = function(res) &#123;&#125; var desc = product.description &amp;&amp; product.description !== '' ? product.description : '后备描述' wx.ready(function() &#123; var eventConf = &#123; title: product.name, desc: desc, imgUrl: imgUrl, link: window.location.href, success: success &#125; if (pubMethods.isAndroid()) &#123; // 安卓适用于老接口，新接口不行 wx.onMenuShareAppMessage(eventConf) wx.onMenuShareTimeline(eventConf) wx.onMenuShareQQ(eventConf) wx.onMenuShareQZone(eventConf) &#125; if (pubMethods.isIOS()) &#123; // iOS 适用于新接口，老接口不行 wx.updateAppMessageShareData(eventConf, success) wx.updateTimelineShareData(eventConf, success) &#125; &#125;) wx.error(fail)&#125; 最初我担心，这样可能会监听不到 wx.config 初始化的结果，结果发现还是可以监听到的，说明 wx.config 里面的操作是个异步操作。 代码兼容性 统一传参 如上面代码所示，虽然根据微信的文档，对于不同的接口，传的参数稍有区别，但是我为了方便，都放在 eventConf 里面了，事实证明也是可以的（不可以我就要吐槽了，毕竟传入的是对象）。 接口更新的 bug 虽然微信文档上有接口更新的说明： 请注意，原有的 wx.onMenuShareTimeline、wx.onMenuShareAppMessage、wx.onMenuShareQQ、wx.onMenuShareQZone 接口，即将废弃。请尽快迁移使用客户端 6.7.2 及 JSSDK 1.4.0 以上版本支持的 wx.updateAppMessageShareData、updateTimelineShareData 接口。 但我实际上测试的结果是，安卓不支持新接口，iOS 支持，但是我如果把新老接口全用上，有一端会失败，所以最终才有上面那个机型判断的结果，对于不同的机型采用了不同的接口。 if (pubMethods.isAndroid()) &#123; // 安卓适用于老接口，新接口不行 wx.onMenuShareAppMessage(eventConf) wx.onMenuShareTimeline(eventConf) wx.onMenuShareQQ(eventConf) wx.onMenuShareQZone(eventConf)&#125;if (pubMethods.isIOS()) &#123; // iOS 适用于新接口，老接口不行 wx.updateAppMessageShareData(eventConf, success) wx.updateTimelineShareData(eventConf, success)&#125; 分享的图片不能是 base64 由于我司需要对图片进行处理再去分享，所以当我用 canvas 导出 base64 作为 imgUrl 的时候，我发现是没有效果的。 EndingReference 微信分享自定义样式 微信分享图标设置，以及 wx.config 配置]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>wechat</tag>
        <tag>share</tag>
        <tag>qq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[settings in vscode]]></title>
    <url>%2Fblog%2F2018%2F09%2Fsettings-in-vscode%2F</url>
    <content type="text"><![CDATA[配置 vscode 支持特定语言的设置，比如，为不同的语言设置不同的配置： &#123; "[html]": &#123; "editor.tabSize": 4 &#125;, "[css]": &#123; "editor.tabSize": 4 &#125;, "[javascript]": &#123; "editor.insertSpaces": true, "editor.tabSize": 2 &#125;, "[typescript]": &#123; "editor.tabSize": 2 &#125;&#125; 个别插件的配置比较特殊，需要配置后才能正常使用，譬如 csscomb, eslint, Easy LESS 等，注意查看文档。 我的配置文件，借助 Settings Sync VSCode 插件，不定期修改会同步到 https://gist.github.com/xianshenglu 相关插件HTML：Auto Rename Tag 修改 HTML 标签时，自动修改匹配的标签 Open in Browser HTML CSS Class Completion: CSS class 提示 HTMLHint: HTML 格式提示 CSS：Can I Use: HTML5、CSS3、SVG 的浏览器兼容性检查 Color Highlight: 颜色值在代码中高亮显示 Color Picker: 拾色器 csscomb: css 排序，格式化，支持 .vue，但对于嵌入式样式缩进有问题 HTML CSS Support: css 提示，支持 .vue JSESLint: ESLint 语法校验，自动格式化，修改等 Version Lens package.json: 文件显示模块当前版本和最新版本 View Node Package: 快速打开选中模块的主页和代码仓库 JavaScript (ES6) code snippets: ES6 语法代码段 Version Lens: 在 package.json 里显示包最新版本号 HTML&#x2F;CSS&#x2F;JSEmmet: html,css,js 提示 框架vetur: 目前比较好的 Vue 语法高亮 VueHelper: Vue2 代码段（包括 Vue2 api、vue-router2、vuex2） vue-peek: vue 文件内查找速览声明 vue-format: vue 格式化插件 非语言类Bracket Pair Colorizer: 不同层级括号上色 Code Spelling Checker: 单词拼写检查 Output Colorizer: 彩色输出信息 Partial Diff: 对比两段代码或文件 Path Autocomplete: 路径补全 Path Intellisense: 路径提示 Project Manager: 快速切换项目 Settings Sync VSCode: 设置同步到 Gist]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>--vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在 VirtualBox 中访问局域网]]></title>
    <url>%2Fblog%2F2018%2F08%2Faccess-lan-in-virtualbox%2F</url>
    <content type="text"><![CDATA[Preface工作需要，在 MAC 中开发，调试的时候，就装了 virtualBox 虚拟机来调试 IE，但是开发中经常调试的是局域网的网址，比如 localhost:8080，我可以用 192.168.x.x:8080 在局域网中另一台设备上访问，但是放到虚拟机中就不行了。 Main经搜索，方案如下： 在虚拟系统未打开的情况下,在设置》网络属性中设置两个网络连接： 网络连接 1 设置成 NAT， 网络连接 2 设置成 Bridged Adapter,名称是 eth0（这个我没找到，但是选的另一个） 这样的话就可以联上互联网同时可以连上局域网。 但是在这种情况下，在虚拟机中输入网址时，遇到 老版的 IE ，需要输入在局域网网址前加 http:&#x2F;&#x2F; 否则，直接输 192.168.x.x 可能会变成自动搜索。 Reference设置 VirtualBox 虚拟机访问局域网]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>VirtualBox</tag>
        <tag>LAN</tag>
        <tag>192.168.x.x</tag>
        <tag>chinese</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Auto Zoom in When Form Element Gains Focus in IOS]]></title>
    <url>%2Fblog%2F2018%2F08%2Fauto-zoom-in-when-form-elements-are-focused-in-ios%2F</url>
    <content type="text"><![CDATA[PrefaceWhen I was testing my webpage on IOS, I find that the page would be zoomed out automatically if there is some form elements and some element gains focus. Sometimes it will be really weird. MainAfter searching I found this How do you disable viewport zooming on Mobile Safari? and I add user-scalable=0 in my meta[name=viewport]. It works. However, user can still zoom the webpage though it won’t zoom out automatically when form element gains focused. ReferenceHow do you disable viewport zooming on Mobile Safari?]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>form</tag>
        <tag>IOS</tag>
        <tag>focus</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端大文件分拆上传与上传池管理]]></title>
    <url>%2Fblog%2F2018%2F08%2Fsplit-file-and-upload-in-frontend%2F</url>
    <content type="text"><![CDATA[Preface后台管理项目有个上传组件，本来大家通过这个组件上传好好的，后来好像是腾讯云那边做了限制，这边上传 zip 包超过 50M 就会返回 413，所以总监让我对文件进行拆分，分块上传，然后他后台那边进行合并处理。 Main咋一看，好像蛮简单，就是拆分下文件，根据文件份数发 n 个请求就可以了，所以搜索了下，示例代码大概是这样： ``````js EndingReference]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Blob</tag>
        <tag>Chinese</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Use Custom Font on Web]]></title>
    <url>%2Fblog%2F2018%2F08%2Fuse-custom-font-on-web%2F</url>
    <content type="text"><![CDATA[PrefaceCSS3 can set custom font-family with src pointing to the specific font file. We can use it for some cool font or use it when there is no specific font on the user’s computer. However, when I try to use it I find something blocking my way. MainWell, it’s about the language problem. As we all know, if I try to use some font for Non-English language the font file may not be small enough. For example, I am trying to use some kind of Chinese font and I find the font file. However, the file is more than 5M and I haven’t handled the compatibility problem. So, I am trying to find a solution about this. And I find fontmin! fontmin will extract the text you files used and generate the corresponding font file which is much smaller than your original font file. For example: var Fontmin = require('fontmin')var srcPath = 'src/font/*.ttf'var destPath = 'asset/font'var text = '我说你是人间的四月天；笑响点亮了四面风；轻灵在春的光艳中交舞着变。'// initialvar fontmin = new Fontmin() .src(srcPath) // font file you want to simplify .use( Fontmin.glyph(&#123; // extract glyph text: text // all the text you will use &#125;) ) .use(Fontmin.ttf2eot()) // eot transform plugin .use(Fontmin.ttf2woff()) // woff transform plugin .use(Fontmin.ttf2svg()) // svg transform plugin .use(Fontmin.css()) // css generation plugin .dest(destPath) // output the simplified font file// runfontmin.run(function(err, files, stream) &#123; if (err) &#123; console.error(err) &#125; console.log('done')&#125;) In my case, I need to extract text from some file. So, I do it like this: var textvar fs = require('fs')fs.readFile('data.js', 'utf8', function(er, data) &#123; if (er) &#123; return console.log(er) &#125; text = data var Fontmin = require('fontmin') var srcPath = 'font/*.ttf' var destPath = 'font/' // initial var fontmin = new Fontmin() .src(srcPath) // font file you want to simplify .use( Fontmin.glyph(&#123; // extract glyph text: text // all the text you will use &#125;) ) .use(Fontmin.ttf2eot()) // eot transform plugin .use(Fontmin.ttf2woff()) // woff transform plugin .use(Fontmin.ttf2svg()) // svg transform plugin .use(Fontmin.css()) // css generation plugin .dest(destPath) // output the simplified font file // run fontmin.run(function(err, files, stream) &#123; if (err) &#123; console.error(err) &#125; console.log('done') &#125;)&#125;) And here is what I got: which is much smaller than origin Microsoft YaHei UI Light.ttf(11M). However, here is a little tip I want to give you. After you run the script above, the original font file *.ttf has been replaced. So, you had better back up the original font file before you run the script. Then if you need to run the script again, you should use the original font file, not the file which has been updated.]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>font</tag>
        <tag>fontmin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Find What Font the Browser Is Actually Using]]></title>
    <url>%2Fblog%2F2018%2F08%2Ffind-what-font-the-browser-is-actually-using%2F</url>
    <content type="text"><![CDATA[PrefaceWhen the designer asked me what is the font of some text I told her to press F12 and check the font-family in Computed, like this: MainHowever, when I am using that font-family I find that I was totally wrong. The actual font the text used is this: That is totally different from the font-family though I know that we can’t be sure that the browser would use the font-family we set in css. EndingReference how-can-i-determine-what-font-a-browser-is-actually-using-to-render-some-text]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>font-family</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Skills on Mobile Development]]></title>
    <url>%2Fblog%2F2018%2F07%2Fskills-on-mobile-development%2F</url>
    <content type="text"><![CDATA[MainAccess localhost on MobileAs you know, If I am working with url like http://localhost:8080 It doesn’t work on mobile. So, I have to try another way. After some research, I find something related: localhost is a hostname which points to 127.0.0.1 by default and also can be changed. Normally, we are using the same WIFI on our computer and mobile. So, in my case, I use command ipconfig and got the ip 192.168.x.x. I add --host 192.168.x.x in my package.json scripts like this: &#123; "name": "webpack-boilerplate", "version": "1.0.0", "description": "", "main": "app.js", "scripts": &#123; "build": "npm run lint &amp;&amp; webpack --config webpack.config.js -p", "dev": "npm run lint &amp;&amp; webpack-dev-server --config webpack.dev.config.js --inline --host 192.168.x.x", "lint": "./node_modules/.bin/eslint js" &#125;,&#125; If you aren’t using package.json, you can directly replace localhost to 192.168.x.x in the url. Then I open the url http://192.168.x.x:8080 on my computer and mobile. Both work! EndingReference 移动端前端开发调试]]></content>
      <categories>
        <category>debug</category>
      </categories>
      <tags>
        <tag>mobile</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A Trap When Using letter-spacing to Remove the Extra Space in chrome66.0.3359.139]]></title>
    <url>%2Fblog%2F2018%2F06%2Fa-trap-when-using-letter-spacing-to-remove-the-extra-space-in-chrome66.0.3359.139%2F</url>
    <content type="text"><![CDATA[PrefaceAs we all know there would be extra space between inline-blocks when using inline-block layout. There are lots of solutions like font-size:0,word-spacing,margin-left,letter-spacing and so on. Choice I MadeNormally I prefer using letter-spacing because it seems ok when we assign a value which is bigger than the width of extra space(e.g. -1em). However, it won’t be okay with word-spacing and margin-left when we set bigger value like -1em. Using font-size is not convenient when we try to using em as font-size unit. So, letter-spacing seems to be the best choice. Well, I agree with that though I found a bug in chrome66.0.3359.139 today. Bug I FoundPlease run the code below: &lt;nav class="nav"&gt; &lt;span class="nav__text"&gt;nav1&lt;/span&gt; &lt;span class="nav__text"&gt;nav2&lt;/span&gt; &lt;span class="nav__text"&gt;nav3&lt;/span&gt;&lt;/nav&gt; * &#123; margin: 0; padding: 0;&#125;a &#123; text-decoration: none; color: inherit; cursor: auto;&#125;.nav &#123; width: 260px; height: 100px; background-color: pink; color: white; font-size: 20px; letter-spacing: -1em;&#125;.nav__text &#123; width: 90px; height: 40px; box-sizing: border-box; border: 1px solid black; line-height: 40px; background-color: yellowgreen; text-align: center; display: inline-block; letter-spacing: normal;&#125; If you are using Chrome(test version 66.0.3359.139) or Opera(test version 53.0.2907.99), what you see might be: If you are using Firefox(60.0.2),IE10 or Edge, what you see might be: That’s interesting. So, I checked the mdn-letter-spacing and found this: Specifies extra inter-character space in addition to the default space between characters. Values may be negative, but there may be implementation-specific limits. **User agents may not further increase or decrease the inter-character space in order to justify text.** It seems that this is the reason. So, I tested and try to find the best value for letter-spacing and it turns out that 0.3em or 0.31em is the best value. EndingAnyway, letter-spacing is still the best solution though we have to be more careful. Referencemdn-letter-spacing]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>chrome</tag>
        <tag>inline-block</tag>
        <tag>letter-spacing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Layout On Mobile]]></title>
    <url>%2Fblog%2F2018%2F06%2Flayout-on-mobile%2F</url>
    <content type="text"><![CDATA[PrefaceBased on first-exploration-on-mobile we can develop adaptive pages on mobile. Now, let’s do it. MainBasic CodeSuppose that we got the PSD which is designed according to iPhone6. So, what do we have now? width:375*667 DPR:2 So, let’s develop according to iPhone6 first. And this is the basic code: &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;meta name="viewport" content="width=375,initial-scale=1,user-scalable=no"&gt; &lt;style&gt; /* reset.css */ * &#123; margin: 0; padding: 0; &#125; html, body &#123; height: 100%; width: 100%; &#125; li &#123; list-style: none; &#125; a &#123; text-decoration: none; color: inherit; &#125; /* base.css */ .nav, .nav__list &#123; width: 100%; height: 100%; &#125; .nav__list &#123; background-color: pink; overflow: hidden; &#125; .nav__item &#123; width: 65px; height: 40px; line-height: 40px; margin: 5px; float: left; background-color: yellowgreen; color: white; &#125; .nav__link &#123; display: block; width: 100%; height: 100%; text-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;nav class="nav"&gt; &lt;ul class="nav__list"&gt; &lt;li class="nav__item"&gt; &lt;a href="#" class="nav__link"&gt;nav1&lt;/a&gt; &lt;/li&gt; &lt;li class="nav__item"&gt; &lt;a href="#" class="nav__link"&gt;nav2&lt;/a&gt; &lt;/li&gt; &lt;li class="nav__item"&gt; &lt;a href="#" class="nav__link"&gt;nav3&lt;/a&gt; &lt;/li&gt; &lt;li class="nav__item"&gt; &lt;a href="#" class="nav__link"&gt;nav4&lt;/a&gt; &lt;/li&gt; &lt;li class="nav__item"&gt; &lt;a href="#" class="nav__link"&gt;nav5&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt;&lt;/body&gt; Well, I made a simple one just for test. Hope you don’t mind. If we switch to iPhone6 device, it looks okay. Of course it will be terrible if we switch to other devices. For example, iPhone6 Plus: We got extra space on the right because the width of iPhone6 Plus is 414px which is wider than 375px in iPhone6. Please notice that we have used 65px, 40px and 5px in the css. Those values should be zoomed according to the device-width. So, here is the way how we fix this: Adaptive by rem and jsWe need do some transform to use rem. On iPhone6 with 375px and DPR:2, We can use 65px, 40px, 5px with: &lt;meta name="viewport" content="width=375,initial-scale=1,user-scalable=no"&gt; We can also use 130px, 80px, 10px with: &lt;meta name="viewport" content="width=750,initial-scale=0.5"&gt; Further on, if we calculate rem by (device-width*DPR)&#x2F;10: &lt;!--width=750=375*DPR,initial-scale=0.5=1/DPR--&gt;&lt;meta name="viewport" content="width=750,initial-scale=0.5"&gt; html &#123; /*75px = device-width * DPR / 10 */ font-size: 75px;&#125;body &#123; /*32px = 16px * DPR */ font-size: 32px;&#125; Those numbers would be: 65px &#x3D;&gt; (65&#x2F;375) * device-width &#x3D;&gt; (65&#x2F;375) * 10rem 40px &#x3D;&gt; (40&#x2F;375) * device-width &#x3D;&gt; (40&#x2F;375) * 10rem 5px &#x3D;&gt; (5&#x2F;375) * device-width &#x3D;&gt; (5&#x2F;375) * 10rem In fact, options above will get the same effect. But for option3, we make everything connected with DPR and device-width. So, here is the basic logic to be adaptive: We use the device-width*DPR&#x2F;10 to calculate rem and set it on html. We set (initial font-size * DPR) on body. For font-size set with px, we have to set different font-size for different DPR by @media&#x2F;-webkit-device-pixel-ratio or plugins(e.g. less). We update meta by setting the width as device-width*DPR and initial-scale as 1&#x2F;DPR which would make the page render in device-width*DPR and then scale to device-width. Well, you can just see the code: &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;meta name="viewport" content="width=device-width,initial-scale=1"&gt; &lt;script&gt; document.addEventListener( 'DOMContentLoaded', () =&gt; &#123; let dpr = window.devicePixelRatio let html = document.documentElement let body = document.body let deviceWidth = window.innerWidth || html.clientWidth html.style.fontSize = (deviceWidth * dpr) / 10 + 'px' html.setAttribute('data-dpr', dpr) body.style.fontSize = 'initial' body.style.fontSize = parseInt(getComputedStyle(body).fontSize) * dpr + 'px' let metaViewport = document.querySelector('meta[name=viewport]') metaViewport.setAttribute( 'content', `width=$&#123;dpr * deviceWidth&#125;,initial-scale=$&#123;1 / dpr&#125;` ) &#125;, &#123; capture: true &#125;, true ) &lt;/script&gt; &lt;link rel="stylesheet/less" href="./less.less"&gt; &lt;script src="http://cdnjs.cloudflare.com/ajax/libs/less.js/3.0.2/less.min.js"&gt;&lt;/script&gt;&lt;/head&gt; base.css in less.less /* base.css */.px2px(@name, @px) &#123; @&#123;name&#125;: round(@px) * 1px; [data-dpr='2'] &amp; &#123; @&#123;name&#125;: round(@px*2) * 1px; &#125; // for mx3 [data-dpr='2.5'] &amp; &#123; @&#123;name&#125;: round(@px * 2.5) * 1px; &#125; //for Pixel2 [data-dpr='2.625'] &amp; &#123; @&#123;name&#125;: round(@px * 2.625) * 1px; &#125; // for XiaoMi note [data-dpr='2.75'] &amp; &#123; @&#123;name&#125;: round(@px * 2.75) * 1px; &#125; [data-dpr='3'] &amp; &#123; @&#123;name&#125;: round(@px * 3) * 1px; &#125; //for Pixel2 XL [data-dpr='3.5'] &amp; &#123; @&#123;name&#125;: round(@px * 3.5) * 1px; &#125; // for Samsung note4 [data-dpr='4'] &amp; &#123; @&#123;name&#125;: @px * 4px; &#125;&#125;.nav &#123; //suggest use em not px otherwise have to set different font-size for different DPR .px2px(font-size, 16px); overflow: hidden; width: 100%;&#125;.nav__list &#123; // width: 110%; width: 100%; height: 100%; // for inline-block // white-space: nowrap; overflow: hidden; background-color: pink; // letter-spacing: -0.3em;&#125;.nav__item &#123; float: left; // display: inline-block; // letter-spacing: normal; color: white; background-color: yellowgreen; width: 65/375 * 10rem; height: 40/375 * 10rem; margin: 5/375 * 10rem; line-height: 40/375 * 10rem;&#125;.nav__link &#123; display: block; width: 100%; height: 100%; text-align: center;&#125; Code above will work in Apple’s product. However, when we switch to Pixel 2 we will find this: After a little calculation, I find that the total width of 5 navs is 1078.85 while width of .nav__list is 1078. Well, I think it is reasonable though I hate this. In this case, we have to do something else to fix this. For example: Set margin-right:auto on the last nav. Set wider width of .nav__list and set overflow:hidden on .nav. Use width:20% and padding instead of margin. Other css tricks. Anyway, this is the previous solution for adaptation on mobile before appearance of vw,flex and grid layout. Let’s make a conclusion: principle Set different font-size for different DPR by less. Use viewport scale to solve the problem of 1px on border and font-size. Make the width and height of element connect with device-width by rem. pro Fix 1px problem on border because we set 1px on device*DPR. con We have to set lots of font-size based on DPR every time we want to set font-size with px. Though we can simplify our job by preprocessor(e.g. less). However, how we going to do with more and more DPR? .px2px(@name, @px) &#123; @&#123;name&#125;: round(@px) * 1px; [data-dpr='2'] &amp; &#123; @&#123;name&#125;: round(@px*2) * 1px; &#125; // for mx3 [data-dpr='2.5'] &amp; &#123; @&#123;name&#125;: round(@px * 2.5) * 1px; &#125; //for Pixel2 [data-dpr='2.625'] &amp; &#123; @&#123;name&#125;: round(@px * 2.625) * 1px; &#125; // for XiaoMi note [data-dpr='2.75'] &amp; &#123; @&#123;name&#125;: round(@px * 2.75) * 1px; &#125; [data-dpr='3'] &amp; &#123; @&#123;name&#125;: round(@px * 3) * 1px; &#125; //for Pixel2 XL [data-dpr='3.5'] &amp; &#123; @&#123;name&#125;: round(@px * 3.5) * 1px; &#125; // for Samsung note4 [data-dpr='4'] &amp; &#123; @&#123;name&#125;: @px * 4px; &#125;&#125; Write more and more? That’s not a good idea. If we use em instead it will not be a problem because we already set the initial font-size * DPR on body. Decimals appear which may cause a little problem in layout. Adaptive by vwBefore we start with vw let’s take a look at the rem and js solution. So, do we have a better solution for: border 1px problem? I don’t think so. make the width and height of element connect with device-width? Yes, we do have vw, vh even vmin and vmax. And for the con of the rem and js solution: In this case, we can use rem instead of em because rem works more like px than em Can we avoid the decimals ? May be not with vw but won’t be worse than rem. Anyway, here is the code: &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;meta name="viewport" content="width=device-width,initial-scale=1"&gt; &lt;script&gt; document.addEventListener( 'DOMContentLoaded', () =&gt; &#123; let dpr = window.devicePixelRatio let html = document.documentElement let body = document.body let deviceWidth = window.innerWidth || html.clientWidth html.setAttribute('data-dpr', dpr) html.style.fontSize = 'initial' html.style.fontSize = parseInt(getComputedStyle(html).fontSize) * dpr + 'px' let metaViewport = document.querySelector('meta[name=viewport]') metaViewport.setAttribute( 'content', `width=$&#123;dpr * deviceWidth&#125;,initial-scale=$&#123;1 / dpr&#125;` ) &#125;, &#123; capture: true &#125;, true ) &lt;/script&gt; &lt;link rel="stylesheet/less" href="./less.less"&gt; &lt;script src="http://cdnjs.cloudflare.com/ajax/libs/less.js/3.0.2/less.min.js"&gt;&lt;/script&gt;&lt;/head&gt; base.css in less.less /* base.css */.nav &#123; font-size: 1rem; width: 100%;&#125;.nav__list &#123; width: 100%; height: 100%; overflow: hidden; background-color: pink;&#125;.nav__item &#123; float: left; color: white; background-color: yellowgreen; width: 65/375 * 100vw; height: 40/375 * 100vw; margin: 5/375 * 100vw; line-height: 40/375 * 100vw;&#125;.nav__link &#123; display: block; width: 100%; height: 100%; text-align: center;&#125; I tested every device in chrome device-mode. They all work. However, there are still decimals which might bite you someday. Anyway, let’s make a conclusion: principle Make the font-size connect with dpr by rem. Use viewport scale to solve the problem of 1px on border and font-size. Make the width and height of element connect with device-width by vw. pro Border 1px problem is solved as before. Decimals problem will be a litter better than rem and js solution. con Decimals still exist. Adaptive by vw and flexSolution with vw almost perfect except the decimals. So, how we are going to fix that? Flex gave us a choice. We can leave the decimals to browser by flex. /*part of css which has been modified*/.nav__list &#123; width: 100%; height: 100%; overflow: hidden; background-color: pink; display: flex; /*new added*/ justify-content: space-around; /*new added*/&#125;.nav__item &#123; color: white; background-color: yellowgreen; flex: 0 0 auto; /*new added*/ width: 65/375 * 100vw; height: 40/375 * 100vw; line-height: 40/375 * 100vw;&#125; If you don’t know something about flex, please check MDN. Anyway, we can leave decimals to browser. That is the most exciting part. Well, let’s make a conclusion: principle Make the font-size connect with dpr by rem. Use viewport scale to solve the problem of 1px on border and font-size. Make the width and height of element connect with device-width by vw. Leave margin to browser by flex. pro Border 1px problem is solved as before. Decimals problem will be better than vw. con Decimals still exist but only has a little influence. EndingAnyway, the decimals problem always exist because of different sizes of mobiles. But the more new API we have, the less influence it will have. Besides, js above is not perfect. Here is the current version I am using. And the last thing is we didn’t handle the problem with img. Maybe you should seek some help from retina.js. Referencefirst-exploration-on-mobile @media&#x2F;-webkit-device-pixel-ratio lib-flexible retina.js]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>mobile</tag>
        <tag>orientationchange</tag>
        <tag>rem</tag>
        <tag>DPR</tag>
        <tag>device-width</tag>
        <tag>initial-scale</tag>
        <tag>vw</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[First Exploration on Mobile]]></title>
    <url>%2Fblog%2F2018%2F06%2Ffirst-exploration-on-mobile%2F</url>
    <content type="text"><![CDATA[PrefaceRecently, I have been working on mobile development. Before this I have heard something strange but I didn’t pay attention to. Now, I have to figure out though there is a lot of stuff. I am trying to make it clear as possible as I can but I am not sure content below is completely right. Basic conceptsCss Pixels, Physical Pixels and DPRFirst, let’s start with demo: &lt;div class="cont"&gt; &lt;div class="left"&gt;left&lt;/div&gt; &lt;div class="right"&gt;right&lt;/div&gt;&lt;/div&gt; * &#123; margin: 0; padding: 0;&#125;html,body &#123; height: 100%; width: 100%;&#125;.cont &#123; background: pink; overflow: auto; height: 100%; width: 100%;&#125;.left &#123; float: left; width: 50%; height: 20%; background: lightblue;&#125;.right &#123; float: right; width: 50%; height: 20%; background: yellowgreen;&#125; Before switching to device mode, make sure you don’t have code starts with &lt;meta name=&quot;viewport&quot; ... in your head tag. Normally, we will find everything seems ok when we switch to mobile. For example, Let’s switch to iPhone6. According to chrome-devtools, width 375 and height 667 is css pixels. And before we keep going , we need to figure out some terms first including css pixels, physical pixels and DPR. Here is some related readings: converting-between-physical-pixels-and-css-pixels what-exactly-is-device-pixel-ratio mdn-devicePixelRatio After reading those stuff, I am still confused. But I can figure something out at least. Well, here is the point based on iPhone6: width 375 and height 667 is css pixels DPR is 2 DPR &#x3D; physical pixels&#x2F;css pixels. So physical pixels is 750*1334 Layout Viewport and Visual ViewportOk, let’s keep going. If you calculate the dimensions of viewport, you will get some strange values like below: document.documentElement.clientWidth //980document.documentElement.clientHeight //1743 Maybe you thought that the value should be 375*667 or 750*1334. However, it doesn’t. The result 980*1743 is the dimensions of layout viewport. Well, before keep going we need to know something about layout viewport and visual viewport. Here is the related articles: quirksmode-viewports quirksmode-viewports2 quirksmode-viewports-app Based on the articles above we can be sure of something about layout viewport and visual viewport. layout viewport is the area that the browser uses to calculate the dimensions of elements with percentual width. visual viewport is the part of the page that’s currently shown on-screen. The user may scroll to change the part of the page he sees, or zoom to change the size of the visual viewport. Zoom doesn’t change the size of layout viewport but visual viewport. The size of visual viewport &lt;&#x3D; the size of layout viewport. Both layout viewport and visual viewport are measured by css pixels. Many mobile browsers initially show any page in fully zoomed-out mode to show the complete content of the site. Thus layout viewport is equal to the visual viewport at that moment. And in this case of iPhone6, here is something we can be sure of: layout viewport is 980*1743 visual viewport is also 980*1743 The mobile browser show the page in fully zoomed-out mode to show the complete content of the site. Meta TagNow, we know what happened when we switch to mobile mode. Also, we know why the size of font becomes smaller in visual. However, we would want the layout viewport to be 375*667 or 750*1334 if we want to build a adaptive website. Fortunately, we can control the size of layout viewport by tag meta. For instance, &lt;meta name="viewport" content="width=375,initial-scale=1,user-scalable=no"&gt; You can find the doc of meta in mdn-meta and viewport in mdn-viewport_meta_tag. In the code above, we define 375px for the width of layout viewport. Here, 375px is css pixels. Also, you can prove it by: document.documentElement.clientWidth //375document.documentElement.clientHeight //667 So, any change? Yes. The change is the font-size is bigger in visual than before. Before we change the text is too small to read. We can keep testing by change the width in meta. For example, let’s try 750: &lt;meta name="viewport" content="width=750,initial-scale=1,user-scalable=no"&gt; Look what we got: This makes sense. However, if you remove user-scalable=no in the meta the browser will again enter into the fully zoomed-out mode. In that case, you will find the font-size is smaller and the whole page is showed in the screen which make the effect of initial-scale=1 disappear. To be compatible with mobiles with different sizes we need to switch the number to device-width: &lt;meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no"&gt; It is easy to understand, I think. Until now, it seems that we can be compatible with mobiles. Is that true? Adaptive LayoutIn the case above, we set width:50% for the .left and .right box. So, they could be adaptive. If we use px the page will not be adaptive because the size of viewport varies between mobiles. So, we have two choices Use different size according to the size of viewport Use percentage always Option2 will work if our page is simple enough. In most instances, it will bring a disaster because of nested elements. One modification in parent will bring changes to all descendant elements. The problem of option1 is if we can avoid writing so many media queries codes to adapt to different sizes of viewport. For example: /* ... other codes for .cont with different sizes */@media (max-width: 800px) &#123; .cont &#123; width: 200px; &#125;&#125;@media (max-width: 400px) &#123; .cont &#123; width: 100px; &#125;&#125;/*... other codes for .cont with different sizes */ Actually, we can avoid these codes. The key is rem. For example, code above can be simplified like: html &#123; font-size: 80px;&#125;.cont &#123; width: 2.5rem;&#125;/* no more codes for .cont with different sizes */ When the size of viewport is 400px, we just need to update the font-size of html with 40px. That is easy with js. Seems wonderful with rem? huh? You can use rem everywhere and js just run one time. Here is the related lib lib-flexible. Latest Adaptive LayoutBasically, there is no big problem with rem. Well, you might realize that we can totally use vw instead. That’s correct! The compatibility has become better for most developers to use. The same thing happen to flex and grid layout. Until 2018.6, flex is a choice but we still need to wait for grid or look for some polyfill. However, there is still some little problems when using vw or rem layout. We still use px for font-size and border. I think it is easy to understand because decimals would appear. In that case, we may get 15px or 17px instead of 16px. At the same time, border may disappear because of some numbers like 0.9px. Develop with plugins For instance, if we are developing based on iPhone6 whose width is 375px in css pixel while the designer gives us a PSD whose width is 750px, how we are going to do? Calculate the div with 75px and transform to 10% and write 10vw? So we calculate and write it one by one? That’s terrible. We can just write 75px and other numbers and leave the transform jobs to plugins(e.g. less,postcss.etc.). Problems Caused by DPRBlurry or Sharp in Different DPR DeviceUntil now, we haven’t talked about DPR which we mentioned in the beginning. As mdn-devicepixelratio says: In simpler terms, this tells the browser how many of the screen’s actual pixels should be used to draw a single CSS pixel. On the desktop or before the appearance of Retina display, DPR is always equal to 1. However, things became complicated after that. At present, there is a lot of DPR on the market which varies from 1 to 4. Sometimes, there comes 1.5 or 2.75. Anyway, we will talk about it later. We can always get DPR by window.devicePixelRatio. The problem is that on retina screens or device whose DPR more than 1 images will become blurry. Of course we will try to avoid that. So, we have to figure out what happened to those mobiles with bigger DPR. According to towards-retina-web, A bitmap pixel is the smallest unit of data in a raster image (PNG, JPG, GIF, etc). Each pixel contains information on how it is to be displayed, including its position in the image’s coordinate system and its color. Beside its raster resolution, an image on the Web has an abstract size, defined in CSS pixels. The browser squeezes or stretches the image based on its CSS height or width during the rendering process. When a raster image is displayed at full size on a standard-density display, 1 bitmap pixel corresponds to 1 device pixel, resulting in a full-fidelity representation. Because a bitmap pixel can’t be further divided, it gets multiplied by four on Retina displays(assuming DPR is 2) to preserve the same physical size of the image, losing detail along the way. For example, we got iPhone6 whose DPR is 2. And img we have is: &lt;img src="example.png" width="2" height="2"&gt; Assume that size of example.png is 2*2 and the picture is like: With DPR of 2, the browser has to use 2 device pixels to draw a single css pixel. So img with 2*2 css pixels will be drew by 4*4 device pixel which means example.png with 2*2 bitmap pixels will be drew by 4*4 device pixel. So, 4 bitmap pixels of example.png will be drew by 16 device pixels which means 1 bitmap pixel will be drew by 4 device pixels. Let’s move on, normally what we want might be: However, actual result will be: The result happens because 1 bitmap pixel can’t be further divided into 4 device pixels. That’s what @smashingmagazine says: A bitmap pixel is the smallest unit of data in a raster image (PNG, JPG, GIF, etc). Because a bitmap pixel can’t be further divided, it gets multiplied by four on Retina displays(assuming DPR is 2) to preserve the same physical size of the image, losing detail along the way. You can also find another example in mdn-devicepixelratio. So, how can we fix this? Basically, choices we have are listed as below: Change the size of img, for example: &lt;img src="example.png" width="1" height="1"&gt; In this case, img with 1*1 css pixel will be drew by 2*2 device pixels which means example.png with 2*2 bitmap pixels will be divided by 2*2 device pixels. Hence, 1 bitmap pixel corresponds to 1 device pixel. We might not use this alone because the layout would be affected. Replace example.png with 4*4 and keep the original img with 2*2 css pixels, same explanation as above. In this case, we might do this by changing the src attribute in the img. For example, update the src search param ?v=2*2 with ?v=4*4 or change from example.png to &#101;&#120;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x40;&#50;&#120;&#46;&#x70;&#x6e;&#x67;. retinajs will help you do this job. Use icon-font instead of raster image. Use svg instead. Actually, what you need to care about is not only img but also background-image. So, option1 and option2 will be not convenient without any other help(e.g. retinajs). Also, with DPR smaller than 2 we need to switch size back. If not, image will become sharp which is the opposite process of blur. For instance: Compare with the process of blur: Option3 and option4 would be easier. And with the help of iconfont, things can be easier and easier when you choose svg. Personally, I would choose option4 in daily work. For more information about the options, click towards-retina-web. Problems about BorderAssume that we are using iPhone6 whose DPR is 2, border with 1 css pixel will be drew with 2 device pixels. Does that matter? Yeah, sometimes that make the border thicker in visual. When we set 1px on border, actually what we might want is to set the thinnest border that device support. Normally, on desktop browser 1px is the thinnest. So in this case, you might need to talk with designer if he wants the thinnest border(e.g. 0.5px) or still 1px. Anyway, there is lots of ways if we want to set the thinnest border. So, I wrote another blog to talk about that. Please check border on mobile. EndingI have written too much about the basic knowledge about layout on mobile. However, there are still lots of problems I haven’t mentioned. Anyway, I will write them in other blogs. Referencequirksmode-viewports quirksmode-viewports2 quirksmode-viewports-app a_pixel_is_not mdn-meta mdn-viewport_meta_tag mdn-devicepixelratio specs-mediaqueries-3 chrome-devtools what-exactly-is-device-pixel-ratio converting-between-physical-pixels-and-css-pixels towards-retina-web iconfont retinajs lib-flexible Chinese: 移动端适配方案(上) 移动端适配方案(下) 移动端高清、多屏适配方案 使用 flexible 实现手淘 h5 页面的终端适配 如何在 vue 项目中使用 vw 实现移动端适配 再聊移动端页面的适配]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>mobile</tag>
        <tag>layout</tag>
        <tag>rem</tag>
        <tag>viewport</tag>
        <tag>layout viewport</tag>
        <tag>visual viewport</tag>
        <tag>css pixel</tag>
        <tag>device pixel</tag>
        <tag>DPR</tag>
        <tag>retina</tag>
        <tag>meta</tag>
        <tag>device-width</tag>
        <tag>initial-scale</tag>
        <tag>user-scalable</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Label Can't Be Focused In Firefox With Element.focus()]]></title>
    <url>%2Fblog%2F2018%2F06%2Flabel-can-t-be-focused-in-firefox-with-element.focus()%2F</url>
    <content type="text"><![CDATA[PrefaceAs the title says, let’s see the demo below: Main&lt;label id="cont" contentEditable&gt; label should be focused&lt;/label&gt;&lt;button id="focus"&gt;make label focus&lt;/button&gt; #cont &#123; display: block; background: pink; width: 150px; height: 40px;&#125; $('#focus')[0].onclick = () =&gt; &#123; $('#cont')[0].focus()&#125;$('#cont')[0].onfocus = event =&gt; &#123; console.log(event.type)&#125;function $(selector) &#123; return Array.from(document.querySelectorAll(selector))&#125; Suppose that you are using chrome, after loaded please press F12 and open the console and then click the button. label#cont should be focused after clicking the button.So, there will be word focus at the console. However, firefox wouldn’t do that until you click the label. Anyway, I have posted a bug. Let’s see what will happen.]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>focus</tag>
        <tag>label</tag>
        <tag>firefox</tag>
        <tag>contentEditable</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[About Smooth Scroll]]></title>
    <url>%2Fblog%2F2018%2F06%2Fabout-smooth-scroll%2F</url>
    <content type="text"><![CDATA[PrefaceRecently, I need to make a smooth scroll. Of course, I think of setTimeout. However, I was thinking if there is a better way or API. So, here is the result of my research. Main scrollTo You can use it like: window.scrollTo(&#123; top: 1000, behavior: 'smooth'&#125;); It works in Chrome and Firefox. However, IE and Edge doesn’t support. Code above will run like window.scrollTo(0, 0); Similar API also exists like scrollIntoView or scrollBy. The compatibility is the key problem. requestAnimationFrame I would suggest this API instead of setTimeout. However, the process of implementation is not so easy like an existing API. Well, a little more complicated than setTimeout. However, compared with setTimeout, requestanimationframe has higher performance. Want to know more? Check the reference and SO. Also, here is the demo: let animationFrameId = 0;function smoothScoll(targetScrollTop) &#123; let speed = 0.1; let startTime = 0; let timeLimit = 2000; window.cancelAnimationFrame(animationFrameId); animationFrameId = window.requestAnimationFrame(step); function step(timestamp) &#123; startTime = startTime || timestamp; let interval = timestamp - startTime; let distance = targetScrollTop - getWinScrollTop(); let stepSize = speed * distance; switch (Math.ceil(stepSize)) &#123; case 0: stepSize = -1; break; case 1: stepSize = 1; break; &#125; if (distance !== 0 &amp;&amp; interval &lt; timeLimit) &#123; window.scrollTo(0, getWinScrollTop() + stepSize); animationFrameId = window.requestAnimationFrame(step); &#125; &#125; function getWinScrollTop() &#123; return window.scrollY || window.pageYOffset; &#125;&#125; The latest version can be found in my github smoothScroll. However, the compatibility is not good enough because of IE&lt;10 and Opera Mini. Other solution Code for setTimeout is similar with requestAnimationFrame but I won’t talk about it. Except that, jQuery has provided an API like: $("a[href='#top']").click(function() &#123; $('html, body').animate(&#123; scrollTop: 0 &#125;, 'slow'); return false;&#125;); EndingAnyway, use requestAnimationFrame if possible. And if not, use setTimeout as shim. ReferenceWhy is requestAnimationFrame better than setInterval or setTimeout]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>smooth-scroll</tag>
        <tag>scrollTo</tag>
        <tag>requestAnimationFrame</tag>
        <tag>setTimeout</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Use Text Align Last Except When I Have Only One Line Of Text]]></title>
    <url>%2Fblog%2F2018%2F06%2Fuse-text-align-last-except-when-i-have-only-one-line-of-text%2F</url>
    <content type="text"><![CDATA[PrefaceAs the title says, what I want is like image below: Is that Possible, ha? StepsAt the first, I thought that was impossible with css only. But I find an answer in SO. Here is the code: &lt;div class="par"&gt; &lt;span class="child child1"&gt;box box box box box &lt;/span&gt; &lt;span class="child child2"&gt;box box&lt;/span&gt; &lt;span class="child child3"&gt;box box box box&lt;/span&gt;&lt;/div&gt; * &#123; margin: 0; padding: 0;&#125;.par &#123; background: pink; width: 100px; text-align: left;&#125;.par .child &#123; display: inline-block; text-align: center;&#125;.par .child1 &#123; background: lightblue;&#125;.par .child2 &#123; background: yellowgreen;&#125;.par .child3 &#123; background: orange;&#125; That is magic! Because inline-blocks is an inline-level element. So, it will be in the left of the container .par built because of text-align:left. The width of inline-block is determined by the content which is only one line. So, text-align:center on the .child doesn’t work because the width of .child is equal to the width of one line content in the .child. Also, the inline-block is a block container. When there is more than one line, the width of inline-block will be equal to the width of .par. In this case, text-align:center will work on the last line because the width of last line is less than the width of the inline-block. EndingAnyway, this solution is awesome. Thanks to the reference. Referencehow-can-i-use-text-align-last-except-when-i-have-only-one-line-of-text]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>text-align</tag>
        <tag>text-align-last</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MS Bug In Flex]]></title>
    <url>%2Fblog%2F2018%2F06%2Fms-bug-in-flex%2F</url>
    <content type="text"><![CDATA[PrefaceI met some bug with MS’s flex box. Main min-heightSee code below: &lt;div class="par"&gt; &lt;div class="child child1"&gt;child1&lt;/div&gt; &lt;div class="child child2"&gt;child2&lt;/div&gt; &lt;div class="child child3"&gt;child3&lt;/div&gt;&lt;/div&gt; * &#123; margin: 0; padding: 0;&#125;.par &#123; background: #eee; width: 400px; min-height: 200px; display: flex; justify-content: center; flex-flow: column nowrap;&#125;/* _:-ms-lang(x),.par &#123; height: 200px;&#125; */.par .child &#123; flex: 1 1 auto;&#125;.child1 &#123; background: pink;&#125;.child2 &#123; background: lightblue;&#125;.child3 &#123; background: yellowgreen;&#125; I think the result is pretty clear. As the image below : However, what I got in IE10 and Edge is like : The problem is quite clear. Property flex doesn’t work in MS when there is only min-height. I think it is a bug so I just fix it by hack. And the hack is the comments in the code above. IE10 flex doesn’t work if flex item is inline element For example: * &#123; margin: 0; padding: 0;&#125;.box &#123; display: flex; width: 500px; margin: 60px auto 0; justify-content: space-between; background: pink;&#125; &lt;div class="box"&gt; &lt;a href="" class="box__link"&gt;box1&lt;/a&gt; &lt;a href="" class="box__link"&gt;box2&lt;/a&gt; &lt;a href="" class="box__link"&gt;box3&lt;/a&gt;&lt;/div&gt; Code above is quite clear. However, in IE10, you will see: justify-content:space-between doesn’t work. If you add .box__link &#123; display: block;&#125; It will work. See:]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>flex</tag>
        <tag>ms</tag>
        <tag>min-height</tag>
        <tag>display</tag>
        <tag>IE</tag>
        <tag>Edge</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[When and How to Use Frame?]]></title>
    <url>%2Fblog%2F2018%2F06%2Fwhen-and-how-to-use-frame%2F</url>
    <content type="text"><![CDATA[PrefaceThere has been a long time that I don’t know whether should I use frame like jQuery or still stick to pure js. So, I decided to summarize some principles for future reference. MainBefore using Figure out the problem that the frame solved? Figure out what kind of situation the frame would be useful, similar with above. Why would so many people use this not other similar frames? How many parts in the frame? What is the relationship between those parts? When should use Needed in work. Emancipate the productive forces based on the fact that you can solve this with ease by pure js. When shouldn’t use Don’t need in work and you don’t know how to implement it with pure js and use it just for laze. Need it in work and just use it without understanding the principle. Recommendation You can implement it with pure js easily so that you want to use it to emancipate the productive forces. In need of other situation, you have to implement it immediately so you use it and figure out the principle as soon as possible in case of bugs.]]></content>
      <categories>
        <category>frame</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Event Capturing Vs Event Bubbling]]></title>
    <url>%2Fblog%2F2018%2F05%2Fevent-capturing-vs-event-bubbling%2F</url>
    <content type="text"><![CDATA[PrefaceWhen I am trying to delegate the error event of img, I find that those events won’t bubble up to window. So,does that mean I have to bind so many events as many as images I have? MainAfter a while, I think of something about event capturing which maybe can solve this question. So, I tried code below: &lt;img id="img" src="error.png" alt="error.png"&gt; window.addEventListener('error', windowErrorCb, &#123; capture: true &#125;, true)function windowErrorCb(event) &#123; let target = event.target let isImg = target.tagName.toLowerCase() === 'img' if (isImg) &#123; imgErrorCb() return &#125; function imgErrorCb() &#123; let isImgErrorHandled = target.hasAttribute('data-src-error') if (!isImgErrorHandled) &#123; target.setAttribute('data-src-error', 'handled') target.src = 'backup.png' &#125; &#125;&#125; Code above works normally. If we change the capture and the last argument to false, it doesn’t work. In this case, we can find that event capturing seems have more applicable situations than event bubbling. Also it seems faster because I catch and handle the event earlier than event bubbling.So, I got these questions: Why would we use event bubbling not event capturing as default except for compatibility? Does event capturing really faster than event bubbling as I thought? Does event capturing really have more applicable situations? The answers can be listed below: Don’t know yet. Yes, you can see the demo here Yes. EndingAfter words above, I think we should use event capturing as default. ReferenceEvent Capturing vs Event Bubbling delegating-capture-vs-bubble]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>event capturing</tag>
        <tag>event bubbling</tag>
        <tag>event delegate</tag>
        <tag>image load error</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to Debug with a More Efficient Way]]></title>
    <url>%2Fblog%2F2018%2F05%2Fhow-to-debug-with-a-more-efficient-way%2F</url>
    <content type="text"><![CDATA[PrefaceThere is always sometimes when I ran into a problem and I was stuck in there. After problems solved, I watched back and thought maybe I can fix the problem alone or it shouldn’t take me so much time to work it out. So, I decided to write something about how to debug with a more efficient way. StepsCalm down firstAre you beginning to sweat now? Take a walk if you are and forget about the origin thought. Try to figure out what the question you are facingProblems which are in a big projectWell, I hate this but I still meet this in some cases. At present, I am trying to extract the problem from the big project and reproduce it in a demo which is as minimal as possible. Then, I will try to figure out what the problem I am actually facing with. After all, it’s easier to debug in a minimal demo than a big project. Then, fix the demo and fix the project. Sometimes the problems can’t be or are not easy to be extracted. In that case, I would try to disable other functions which might complicate the problems to make the problems easier to fix. Problems which are out of controlIf the error is out of your control, for example, you are working with something you basically have no idea, you had better pay attention to the error information. Then find the document and search for something about the error information. It is quite common to encounter a new problem when we are using a frame which we don’t know much about it. If that happens, the quickest way is to find the document and see if the way we use is not right. Problems seem familiarIf you know something about your error, for example, you are running a demo which doesn’t behave as you expected, maybe you should stop and ask yourself a few questions: What is my expected output? Why should the demo behave like that? In this way, you might say that it should behave like that because the specs said that it should ….. It doesn’t matter if you don’t remember the details of the specs. In this case, you should go to check the part of the specs and read the specs carefully again to see if it really defines the behavior you expected. And I still suggest you reading the specs again even that you remember the details. Don’t tell me you don’t know where the specs is because this shouldn’t happen. Or if it really happens, it is better for you to find the specs as soon as possible. Usually, you will find that you missed something in the specs or just misunderstand the specs or the specs just didn’t define the specific behavior. However, sometimes you are totally right after reading the specs. In this case, I think it’s time to ask in the community like Stackoverflow or just ask the specs working group. Before asking, you had better know something about how to ask. EndingAnyway, the last way is google and I will update when I figure out something new.]]></content>
      <categories>
        <category>debug</category>
      </categories>
      <tags>
        <tag>debug</tag>
        <tag>efficiency</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Build Blog by Github Pages and Hexo]]></title>
    <url>%2Fblog%2F2018%2F05%2Fbuild-blog-by-github-pages-and-hexo%2F</url>
    <content type="text"><![CDATA[PrefaceThere is a lot of tutorials teaching you build your own blog by github pages with url like https://username.github.io. Well, I am not going to do that. Why would I have to build blog on my main site rather than https://username.github.io/blog? That is what I’m going to do! Build a blog under main site so that it wouldn’t take over the main site. Suppose that you have already known something about npm and git or Github. Steps Install hexo and hexo-cli npm install -g hexo-clinpm install -g hexo Create your blog folder with no file, and get into the folder(for example, my blog folder is blog). cd blog Initialize hexo and install dependencies hexo initnpm install Normally, dependencies will be installed automatically Try to run it locally hexo s -g Normally, you will see: Open the browser with the url in the above screenshot: You can change the theme if you don’t like it. However that is not the point of this article. You can do it according to the docs in hexo. Also, if we want to deploy it on github, we have to install hexo-deployer-git according to docs. npm install hexo-deployer-git --save Suppose that you already have a repository on github. For example, the name is blog and url is https://github.com/username/blog. Then find the _config.yml file in the folder. Open it update the url and root as follows: url: https://github.com/username/blogroot: /blog/ Also, update deploy like this: deploy: type: git repo: https://github.com/username/blog branch: master Well, I have to warn you thatand the space before word type, repo and branchshould be blank space not tab. Otherwise, you will get error about your indentation. Now, try to deploy it on github: hexo d -g Open your repository url like https://github.com/username/blog and you will find there is a few files and folders. Remember to clear cash with ctrl+shift+delete if you just pushed. Suppose that you already make the repository become a github page. Then, you can open your page url like: https://username.github.io/blog/. You will see what you see locally last time. Default settingssome stuff should be done by default which hexo didn’t: Generate .deploy_git&#x2F;categories folder when deployed. This might be done by default. npm install hexo-generator-category --save Generate index.md under folder source&#x2F;categories and source&#x2F;tags hexo new page categorieshexo new page tags Also, need to add type: tags and type: categories in the above corresponding file index.md. It will help you generate index.html under folder .deploy_git&#x2F;categories and .deploy_git&#x2F;tags when deployed. Update I just found that default hexo-renderer-marked didn’t work with some markdown syntax like .deploy_git&#x2F;categories. So, I change my markdown parser; npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-markdown-it --save Before deploying, you had better remove the public and .deploy_git folder because they won’t be rewritten sometimes. Above operation works well if there is no image in the markdown. However, if there is an image, for example: The path for the image will be resolved incorrectly. In consistent with above case, the correct path should be https://username.github.io/blog/images/20180520102405.png while what we got is like https://username.github.io/blog/2018/05/20/images/20180520101721.png.So, we need to modify src to get a new url. window.addEventListener('error', windowErrorCb, &#123; capture: true &#125;, true)document.addEventListener( 'DOMContentLoaded', refreshImgUrl, &#123; capture: true &#125;, true)function windowErrorCb(event) &#123; let target = event.target imgErrorCb() function imgErrorCb() &#123; let isImgErrorHandled = target.hasAttribute('data-src-error') let isImgPathMatch = target.tagName.toLowerCase() === 'img' &amp;&amp; target.src.match(/\/images\/[^/]*?\d&#123;10,20&#125;[^/]*$/) if (isImgPathMatch &amp;&amp; !isImgErrorHandled) &#123; target.src = 'https://xianshenglu.github.io/blog' + isImgPathMatch[0] target.setAttribute('data-src-error', 'handled') &#125; &#125; return true&#125;function refreshImgUrl(event) &#123; let isImgPathMatchReg = /\/images\/[^/]*?\d&#123;10,20&#125;[^/]*$/ $('img') .toArray() .forEach(img =&gt; &#123; if (img.src.match(isImgPathMatchReg)) &#123; img.src = img.src &#125; &#125;)&#125; To solve question above, you can put the code above in the bottom of the file theme&#x2F;next&#x2F;source&#x2F;js&#x2F;src&#x2F;motion.js which should be changed according to your theme and image’s path. Actually, you can put the code in any js file as long as you are sure that it will be loaded. EndingWell, the main settings have already finished. And if you want to set the theme or other things, go check the docs.]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[What Is the background-color's Height of Inline Non-Replaced Element?]]></title>
    <url>%2Fblog%2F2018%2F05%2Fwhat-is-the-background-color-height-of-inline-non-replaced-element%2F</url>
    <content type="text"><![CDATA[PrefaceAs we all know, when we set background-color in block-level non-replaced elements, the height of background-color is equal to border-top+padding-top+height+padding-bottom+border-bottom according to box-model which is very clear. QuestionHowever, things get weird when we set background-color to inline non-replaced element because height doesn’t apply to the element. For example: &lt;div class="inline"&gt; inline non-replaced element&lt;/div&gt; * &#123; margin: 0; padding: 0;&#125;html &#123; font-family: Microsoft YaHei; font-size: 40px;&#125;.inline &#123; display: inline; background-color: pink; line-height: 2;&#125; So, here is the question, Assume there is no margin and padding,how much is the size of the background-color area which is also the content area ?any rules? And here is the answer I figured out: It depends. Then we are going to talk a lot about how it depends. If we measured the direction as the screenshot above ,we can get some data below, called Case A : font-size:40px background-color’s height : about 50px top&#x2F;bottom space : about 15px May be you thought that those data should be like these, called Case B : font-size:40px background-color’s height : about 40px top&#x2F;bottom space : about 20px, equals to half-leading It seems Case B is more reasonable. However, the fact is that Case A is applied until Chrome-66. Anyway, line-height is definitive, always 80px. After reading 10.6.1 Inline, non-replaced elements in CSS2.1 and SO, I think the point is below: The ‘height’ property does not apply. The height of the content area should be based on the font, but this specification does not specify how. A UA may, e.g., use the em-box or the maximum ascender and descender of the font. (The latter would ensure that glyphs with parts above or below the em-box still fall within the content area, but leads to differently sized boxes for different fonts; the former would ensure authors can control background styling relative to the ‘line-height’, but leads to glyphs painting outside their content area.) According to the specification above, I think that Case B means A UA use the em-box which would ensure authors can control background styling relative to the ‘line-height’, but leads to glyphs painting outside their content area. while Case A means A UA use the maximum ascender and descender of the font which would ensure that glyphs with parts above or below the em-box still fall within the content area, but leads to differently sized boxes for different fonts. Then, I try to prove it with different fonts which will lead differently sized boxes according to specification above. For example, change font-familyfrom Microsoft YaHeitoGeorgia: &lt;div class="inline"&gt;inline non-replaced element &lt;br /&gt;sss&lt;/div&gt; * &#123; margin: 0; padding: 0;&#125;html &#123; font-size: 40px; font-family: Georgia;&#125;.inline &#123; display: inline; background-color: pink; line-height: 2;&#125; As you can see ,these data becomes: font-size:40px background-color’s height : about 46px top space : about 15px bottom space: about 19px ConclusionSo, precisely, assuming that there is no margin and padding,we can say that background-color’s height of inline non-replaced element is determined by font-size and modified partially by font-family which depends on the rules UA takes. And also the area outside of the background-color area isn’t equal to half-leading. Reference: Inline elements and line-height Deep dive CSS: font metrics, line-height and vertical-align 这个 div 的 10px 是哪里来的能帮我看一下吗？]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>background-color</tag>
        <tag>inline non-replaced element</tag>
        <tag>content area</tag>
      </tags>
  </entry>
</search>
