{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/1542620382678.gif","path":"images/1542620382678.gif","modified":1,"renderable":0},{"_id":"source/images/20180517161430.png","path":"images/20180517161430.png","modified":1,"renderable":0},{"_id":"source/images/20180519163821.png","path":"images/20180519163821.png","modified":1,"renderable":0},{"_id":"source/images/20180519171218.png","path":"images/20180519171218.png","modified":1,"renderable":0},{"_id":"source/images/20180519171528.png","path":"images/20180519171528.png","modified":1,"renderable":0},{"_id":"source/images/20180520101721.png","path":"images/20180520101721.png","modified":1,"renderable":0},{"_id":"source/images/微信图片_20181125213110.jpg","path":"images/微信图片_20181125213110.jpg","modified":1,"renderable":0},{"_id":"source/images/微信图片_20190202173819.jpg","path":"images/微信图片_20190202173819.jpg","modified":1,"renderable":0},{"_id":"source/images/微信图片_20181125213118.jpg","path":"images/微信图片_20181125213118.jpg","modified":1,"renderable":0},{"_id":"source/images/微信图片_20190202173852.jpg","path":"images/微信图片_20190202173852.jpg","modified":1,"renderable":0},{"_id":"source/images/微信图片_20190202173857.jpg","path":"images/微信图片_20190202173857.jpg","modified":1,"renderable":0},{"_id":"source/images/微信图片_20190202173902.jpg","path":"images/微信图片_20190202173902.jpg","modified":1,"renderable":0},{"_id":"source/images/微信截图_20190126215103.png","path":"images/微信截图_20190126215103.png","modified":1,"renderable":0},{"_id":"source/images/微信截图_20190128134750.png","path":"images/微信截图_20190128134750.png","modified":1,"renderable":0},{"_id":"source/images/微信截图_20190201171930.png","path":"images/微信截图_20190201171930.png","modified":1,"renderable":0},{"_id":"source/images/截图20180519172009.png","path":"images/截图20180519172009.png","modified":1,"renderable":0},{"_id":"source/images/截图20180519172315.png","path":"images/截图20180519172315.png","modified":1,"renderable":0},{"_id":"source/images/截图20180609161841.png","path":"images/截图20180609161841.png","modified":1,"renderable":0},{"_id":"source/images/微信图片_20190202174136.jpg","path":"images/微信图片_20190202174136.jpg","modified":1,"renderable":0},{"_id":"source/images/截图20180609161934.png","path":"images/截图20180609161934.png","modified":1,"renderable":0},{"_id":"source/images/截图20180609163513.png","path":"images/截图20180609163513.png","modified":1,"renderable":0},{"_id":"source/images/截图20180614142256.png","path":"images/截图20180614142256.png","modified":1,"renderable":0},{"_id":"source/images/截图20180614143059.png","path":"images/截图20180614143059.png","modified":1,"renderable":0},{"_id":"source/images/截图20180614143061.png","path":"images/截图20180614143061.png","modified":1,"renderable":0},{"_id":"source/images/截图20180615090453.png","path":"images/截图20180615090453.png","modified":1,"renderable":0},{"_id":"source/images/截图20180614143060.gif","path":"images/截图20180614143060.gif","modified":1,"renderable":0},{"_id":"source/images/截图20180615093229.png","path":"images/截图20180615093229.png","modified":1,"renderable":0},{"_id":"source/images/截图20180615155759.png","path":"images/截图20180615155759.png","modified":1,"renderable":0},{"_id":"source/images/截图20180616161446.png","path":"images/截图20180616161446.png","modified":1,"renderable":0},{"_id":"source/images/截图20180617130210.png","path":"images/截图20180617130210.png","modified":1,"renderable":0},{"_id":"source/images/截图20180618184625.png","path":"images/截图20180618184625.png","modified":1,"renderable":0},{"_id":"source/images/截图20180618184736.png","path":"images/截图20180618184736.png","modified":1,"renderable":0},{"_id":"source/images/截图20180804182943.png","path":"images/截图20180804182943.png","modified":1,"renderable":0},{"_id":"source/images/截图20180616161355.png","path":"images/截图20180616161355.png","modified":1,"renderable":0},{"_id":"source/images/截图20180818144157.png","path":"images/截图20180818144157.png","modified":1,"renderable":0},{"_id":"source/images/截图20180818144338.png","path":"images/截图20180818144338.png","modified":1,"renderable":0},{"_id":"source/images/截图20181002175453.png","path":"images/截图20181002175453.png","modified":1,"renderable":0},{"_id":"source/images/截图20180804204452.png","path":"images/截图20180804204452.png","modified":1,"renderable":0},{"_id":"source/images/截图20180615090536.png","path":"images/截图20180615090536.png","modified":1,"renderable":0},{"_id":"source/images/截图20181003164515.png","path":"images/截图20181003164515.png","modified":1,"renderable":0},{"_id":"source/images/截图20181002175558.png","path":"images/截图20181002175558.png","modified":1,"renderable":0},{"_id":"source/images/截图20181003145142.png","path":"images/截图20181003145142.png","modified":1,"renderable":0},{"_id":"source/images/微信图片_20190202173826.jpg","path":"images/微信图片_20190202173826.jpg","modified":1,"renderable":0},{"_id":"source/images/截图20181003201618.png","path":"images/截图20181003201618.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006154426.png","path":"images/截图20181006154426.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006161411.png","path":"images/截图20181006161411.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006162815.png","path":"images/截图20181006162815.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006163246.png","path":"images/截图20181006163246.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006163413.png","path":"images/截图20181006163413.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006165344.png","path":"images/截图20181006165344.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006165741.png","path":"images/截图20181006165741.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006165945.png","path":"images/截图20181006165945.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006173913.png","path":"images/截图20181006173913.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006180430.png","path":"images/截图20181006180430.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006180631.png","path":"images/截图20181006180631.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006180828.png","path":"images/截图20181006180828.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006210753.png","path":"images/截图20181006210753.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006173812.png","path":"images/截图20181006173812.png","modified":1,"renderable":0},{"_id":"source/images/截图20181119171728.png","path":"images/截图20181119171728.png","modified":1,"renderable":0},{"_id":"source/images/截图20181125140044.png","path":"images/截图20181125140044.png","modified":1,"renderable":0},{"_id":"source/images/截图20181125140603.png","path":"images/截图20181125140603.png","modified":1,"renderable":0},{"_id":"source/images/截图20181006172654.png","path":"images/截图20181006172654.png","modified":1,"renderable":0},{"_id":"source/images/截图20181004204524.png","path":"images/截图20181004204524.png","modified":1,"renderable":0},{"_id":"source/images/截图20180804183017.png","path":"images/截图20180804183017.png","modified":1,"renderable":0},{"_id":"source/images/20180517162130.png","path":"images/20180517162130.png","modified":1,"renderable":0},{"_id":"source/images/截图20181004205221.png","path":"images/截图20181004205221.png","modified":1,"renderable":0},{"_id":"source/images/20180519153604.png","path":"images/20180519153604.png","modified":1,"renderable":0},{"_id":"source/images/20180520102405.png","path":"images/20180520102405.png","modified":1,"renderable":0},{"_id":"source/images/截图20190427171841.png","path":"images/截图20190427171841.png","modified":1,"renderable":0},{"_id":"source/images/截图20190427204954.png","path":"images/截图20190427204954.png","modified":1,"renderable":0},{"_id":"source/images/截图20190427210224.png","path":"images/截图20190427210224.png","modified":1,"renderable":0},{"_id":"source/images/截图20190428205446.png","path":"images/截图20190428205446.png","modified":1,"renderable":0},{"_id":"source/images/1542536446656.gif","path":"images/1542536446656.gif","modified":1,"renderable":0},{"_id":"source/images/1542536827531.gif","path":"images/1542536827531.gif","modified":1,"renderable":0},{"_id":"source/images/original/微信图片_20190202173819.jpg","path":"images/original/微信图片_20190202173819.jpg","modified":1,"renderable":0},{"_id":"source/images/微信截图_20190201171932.gif","path":"images/微信截图_20190201171932.gif","modified":1,"renderable":0},{"_id":"source/images/original/微信图片_20190202173857.jpg","path":"images/original/微信图片_20190202173857.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"source/images/original/微信图片_20190202173826.jpg","path":"images/original/微信图片_20190202173826.jpg","modified":1,"renderable":0},{"_id":"source/images/original/微信图片_20190202173902.jpg","path":"images/original/微信图片_20190202173902.jpg","modified":1,"renderable":0},{"_id":"source/images/original/微信图片_20190202174136.jpg","path":"images/original/微信图片_20190202174136.jpg","modified":1,"renderable":0},{"_id":"source/images/original/微信图片_20190202173852.jpg","path":"images/original/微信图片_20190202173852.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"source/images/1543630801931.gif","path":"images/1543630801931.gif","modified":1,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/1543654707987.gif","path":"images/1543654707987.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"1e6de90800c9c0ad7a74c3bd7c672854a2778f2d","modified":1529290340775},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1526785228701},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1526785228717},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1526785228717},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1526785228717},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1526785228717},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1526785228717},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1526785228717},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1526785228717},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1526785228717},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1526785228733},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1526785228733},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1526785228733},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1526785228733},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1526785228733},{"_id":"themes/next/_config.yml","hash":"9c6a10d63a4d9966518f3844d0c7a0446a723fdb","modified":1529286362251},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1526785228873},{"_id":"source/_drafts/resume.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1528361899605},{"_id":"source/_drafts/interview.md","hash":"8249a1121c991e15d96795f697dec146398627ec","modified":1529326084783},{"_id":"source/_drafts/is-event-handler-asynchronous.md","hash":"7fe5704863b6e208753202e5fc7ce40f81288b3b","modified":1528606575344},{"_id":"source/_drafts/skills-in-demand.md","hash":"2db3a4db8ecf3d8fca438ade728dcbd7b4f08a11","modified":1529585057929},{"_id":"source/_drafts/understand-vertical-align-according-to-specifications.md","hash":"807d8ae7324f99165dd5b59af27e92d50df7890a","modified":1526967502236},{"_id":"source/_posts/a-trap-when-using-letter-spacing-to-remove-the-extra-space-in-chrome66.0.3359.139.md","hash":"8aef0a54a705265e13d1e9e721fdfcafd146a3eb","modified":1529320959821},{"_id":"source/_posts/about-smooth-scroll.md","hash":"f1a01648bbb145db37bc3a7e7c281109261159db","modified":1534572593084},{"_id":"source/_posts/access-lan-in-virtualbox.md","hash":"07067c3eecdb7f3993a73c168ce70c6808c673ef","modified":1534580441582},{"_id":"source/_posts/auto-zoom-in-when-form-elements-are-focused-in-ios.md","hash":"2a41170eccd38c72258c3872146060266f922096","modified":1534576606277},{"_id":"source/_posts/better-way-to-use-orientationchange-event-on-mobile.md","hash":"ba48feedc35e0caa473119f1da4128bfc4717e02","modified":1538640147754},{"_id":"source/_posts/browsers-disabled-audio-autoplay.md","hash":"5aac30b8fc90c240c9d1e9c0702b4750efdd9338","modified":1544191756470},{"_id":"source/_posts/build-blog-by-github-pages-and-hexo.md","hash":"917069297aec7c083fc6ac7e92958462c1e09d9e","modified":1542540095463},{"_id":"source/_drafts/understand-format-context-in-css2-1.md","hash":"b6050e23f581c5189b1a77c4d6f3b04245a52ee3","modified":1526967505462},{"_id":"source/_posts/chrome-vh-is-always-calculated-as-if-the-url-bar-is-hidden.md","hash":"a9833fc1ca97182ca97edaafdc4f657d76f64691","modified":1544191459319},{"_id":"source/_posts/build-multiple-choice-cascader-with-third-party-ui.md","hash":"2f32316ba457202914e8953e434c073a12e7ef81","modified":1542550489755},{"_id":"source/_posts/find-what-font-the-browser-is-actually-using.md","hash":"ebe26fce47b3510cfdc735efe173969beaf69154","modified":1533381367889},{"_id":"source/_posts/first-exploration-on-mobile.md","hash":"5ec014d226bb8212d6c605e4967b6e38f3380fca","modified":1529288279352},{"_id":"source/_posts/event.preventdefault()-in-contextmenu-would-trigger-mouseup-event.md","hash":"39df14f365a61bea948fb8abf729313d1a33a21f","modified":1545916720140},{"_id":"source/_posts/how-to-debug-with-a-more-efficient-way.md","hash":"4b291bf7d5b182c580ff3b00165288381268b8f7","modified":1530441479904},{"_id":"source/_posts/image-load-error-handler.md","hash":"09c4afdb678338386f8c93e03651fe97a8407961","modified":1543656364840},{"_id":"source/_posts/label-can-t-be-focused-in-firefox-with-element.focus().md","hash":"36071eae608cc2f5f9882d9513925350dc1d8f75","modified":1529285490241},{"_id":"source/_posts/layout-on-mobile.md","hash":"12bd2b1a43e9de136fa589190c3e901c24db16f2","modified":1529399866951},{"_id":"source/_posts/ms-bug-in-flex.md","hash":"62dd2dd277c88480e6a9934b97695beaef9a79cc","modified":1534574643955},{"_id":"source/_posts/notes-for-developing-mobile-web-page.md","hash":"c830e32c4a79408d7f135085112a6608e0136d4c","modified":1550146575805},{"_id":"source/_posts/notes-for-developing-web-page.md","hash":"4189dabeb05a96a2a62fe096ec6a4ead03990447","modified":1549099121243},{"_id":"source/_posts/problems-met-when-using-canvas.md","hash":"2d1c480b7dd56e98761170075999a126e7302dca","modified":1538741679067},{"_id":"source/_posts/override-3rd-party-style.md","hash":"d8a2263e9ab7af424828a2ea693e1dd2b2f13d56","modified":1538730638423},{"_id":"source/_posts/problems-met-when-using-qrcodejs.md","hash":"76544abb3becde830f1f8e9c2ac71dde9bada725","modified":1548920067846},{"_id":"source/_posts/remnant-shadows-when-toggling-pictures-with-alpha-in-firefox-and-safari.md","hash":"b87b8ade9110331eabe54f245f168be85125f209","modified":1545469387857},{"_id":"source/_posts/serval-ways-to-re-render-in-vue.md","hash":"abf144102c9538c064e6fa76859f9cb65ae0f087","modified":1543655038180},{"_id":"source/_posts/set-custom-style-of-share-in-wechat.md","hash":"9993f93621e37daa2cb7747c91c6012dcbcce66b","modified":1538572256172},{"_id":"source/_posts/skills-on-mobile-development.md","hash":"bd569ce0207b3caf51a94717e2f0e969d01ae7fc","modified":1538702871852},{"_id":"source/_posts/settings-in-vscode.md","hash":"638135ee493da652cc356621d606b2f8ca07b2de","modified":1537668614953},{"_id":"source/_posts/split-file-and-upload-in-frontend.md","hash":"ccb6a687a7aa8b8a3571e84228bfc91197c6af34","modified":1534591088341},{"_id":"source/_posts/tcp-connection-reuse-in-http-1-1-and-2-0.md","hash":"08cfbb8b2cdc2b80385511628cfdf0d559d27093","modified":1556456161628},{"_id":"source/_posts/traps-of-computed-in-vue.md","hash":"c386ce98e58a43c71925f2461dec287e130a6ef0","modified":1544191608198},{"_id":"source/_posts/tricks-in-vue.md","hash":"7b6e1b1c561b96a1be905498615dfdbd53860099","modified":1548557521666},{"_id":"source/_posts/understand-sync-in-vue.md","hash":"86102885e11fbbd8e46da812c2e97164fd1f3565","modified":1542535720949},{"_id":"source/_posts/usage-of-eslint.md","hash":"a1a7260b5a1668fa4966bdad77e4705039f379aa","modified":1538832346656},{"_id":"source/_posts/use-custom-font-on-web.md","hash":"282c9edf9369277012d60ef3e7de5cee28cadb63","modified":1549021136795},{"_id":"source/_posts/use-text-align-last-except-when-i-have-only-one-line-of-text.md","hash":"6cf0372c1869db99ee0cd51e493fa9cf6e78518d","modified":1528547947579},{"_id":"source/_posts/vue-form-input-bindings-fail.md","hash":"2c25dc5c64fa4894ad7dcdbd5a7e51f08341cb00","modified":1544191737883},{"_id":"source/_posts/web-performance-optimization-summary-in-2019-3.md","hash":"11b43b354363bb2cf551a1119be077393aa801b1","modified":1553947409059},{"_id":"source/_posts/what-is-the-background-color-height-of-inline-non-replaced-element.md","hash":"04c72b1c33b7d2ce7fdea4a1d31fad8ff7a028d1","modified":1527042313243},{"_id":"source/_posts/easier-way-to-understand-apply-and-call-in-js.md","hash":"fd8bd6d3c90d849dafef6ac868456cee1daf4369","modified":1545138453698},{"_id":"source/_posts/event-capturing-vs-event-bubbling.md","hash":"3d67e7329e2d1699c84ff5111e533e4a8d95e5bf","modified":1538659608887},{"_id":"source/categories/index.md","hash":"276dead4708b0164f6efaada7287827410b6188e","modified":1526866940984},{"_id":"source/images/1542620382678.gif","hash":"5d19fc164824f7bb12e6ddd4607ad8af648e7deb","modified":1542620378056},{"_id":"source/_posts/wheelevent-compatibility-and-delta-handler.md","hash":"a5e5d3fc2b1740fb0df519a6b04531d306cc7ff2","modified":1548599949925},{"_id":"source/_posts/move-the-switch-of-console-to-urlsearchparams.md","hash":"c0c46f1b95c068e207cfe25b24f4fb3cc803b8e7","modified":1538704208502},{"_id":"source/images/20180517161430.png","hash":"fa2a595ae58c161af2008803029afe8daec6073a","modified":1526544875389},{"_id":"source/images/20180519163821.png","hash":"84a7b7a09128ddd2338c46ae63f702c8a85f4c28","modified":1526720516775},{"_id":"source/images/20180519171218.png","hash":"ee2e2b6da5601e238dc44b04dcfe535c8e3bc57f","modified":1526721142125},{"_id":"source/images/20180519171528.png","hash":"87bef7e2d3d42b5150be1ec79053e03e761006b3","modified":1526721332755},{"_id":"source/images/20180520101721.png","hash":"fe2ba7da6b919bc7d9cf60cda1f095eaa23c2df2","modified":1526782784921},{"_id":"source/images/微信图片_20181125213110.jpg","hash":"f4912845c985bb462f899d8a18ebb7f522bfb16c","modified":1543239708000},{"_id":"source/images/微信图片_20190202173819.jpg","hash":"fbfa54418f4d6850aea8111e9dd1180b6efc362f","modified":1549071776000},{"_id":"source/images/微信图片_20181125213118.jpg","hash":"5f9d61e9ee01608b16abc49e572f9c7ed8f18e38","modified":1543239708000},{"_id":"source/images/微信图片_20190202173852.jpg","hash":"b8be550009646adc1665a0cff3d906e0e5684025","modified":1549071776000},{"_id":"source/images/微信图片_20190202173857.jpg","hash":"e537e245ec76464f23042f44ebabed2c34a59e27","modified":1549071776000},{"_id":"source/images/微信图片_20190202173902.jpg","hash":"853fa37d70682a6e66324105809bb25557ff13cb","modified":1549071776000},{"_id":"source/images/微信截图_20190126215103.png","hash":"7618e3943067e782eb6d83fbc1f7add486bc5599","modified":1548510668179},{"_id":"source/images/微信截图_20190128134750.png","hash":"6ab6c557f591198ac28ee7fdae069e98329415c1","modified":1549019211078},{"_id":"source/images/微信截图_20190201171930.png","hash":"694b81111ea64646e2080e5d88d7ad011f6ecf11","modified":1549012774449},{"_id":"source/images/截图20180519172009.png","hash":"1c0a2aaebba807a5a630325253cc674c5efb0e38","modified":1526721612732},{"_id":"source/images/截图20180519172315.png","hash":"6b0eae17f93bdcedc799089b958c0de9cb0c0be0","modified":1526721926515},{"_id":"source/images/截图20180609161841.png","hash":"72e71f65c9b7d7ecfbfdc87b1d1ccfa7d835c065","modified":1528532326968},{"_id":"source/images/微信图片_20190202174136.jpg","hash":"d02e6147b3b6ddbbe1a7afeb99d5823a5be19bf1","modified":1549071776000},{"_id":"source/images/截图20180609161934.png","hash":"333d0cce6d054304f5a28c04ede16f8465c4af80","modified":1528532375764},{"_id":"source/images/截图20180609163513.png","hash":"655c6d9227367b6bbcc65a999d4e4f18881e14dd","modified":1528533315442},{"_id":"source/images/截图20180614142256.png","hash":"1279c63a0ab76cba66a651539a467a79da88668f","modified":1528957383802},{"_id":"source/images/截图20180614143059.png","hash":"198d7aa4304bccda9a7d2052c57c1c2142c2146c","modified":1528957862033},{"_id":"source/images/截图20180614143061.png","hash":"1608bea50c97eeccea678bdfbc02cf578b5a5f81","modified":1529024507307},{"_id":"source/images/截图20180615090453.png","hash":"5fa1fc51c19c115eba515fb0688a76950a4ae945","modified":1529024696341},{"_id":"source/_drafts/difference-between-mousemove-and-touchmove.md","hash":"ad5c95c2c25c829666ee991e329d5a579a69c05d","modified":1538722435900},{"_id":"source/images/截图20180614143060.gif","hash":"aa91e6da57e6f9c78c659c08bee7846d50f3ae47","modified":1528965819219},{"_id":"source/_posts/when-and-how-to-use-frame.md","hash":"979abe52d4044d029704300756b289d9764ff631","modified":1528443043907},{"_id":"source/_posts/x-ua-compatible-and-ie-edge.md","hash":"a1bbe8099866c8d6bd1fe474f0f7d2f1ee6df410","modified":1538569627222},{"_id":"source/images/截图20180615093229.png","hash":"6ac4d91cec5b50588ce949ca05ea0a10788a124a","modified":1529026351136},{"_id":"source/images/截图20180615155759.png","hash":"52c972a590e0555952d105bdae35ad1cefedd9cf","modified":1529049485479},{"_id":"source/images/截图20180616161446.png","hash":"b510ea066680bce622a96918d1ed2358be8db5ff","modified":1529136887905},{"_id":"source/images/截图20180617130210.png","hash":"0d6238e250a66c0e1429e7be4f232ab1c95f529f","modified":1529211732074},{"_id":"source/images/截图20180618184625.png","hash":"fe4ca132fb81a135c183373a2dafc2e81c099c29","modified":1529318786874},{"_id":"source/images/截图20180618184736.png","hash":"f4bc20417f8a7108764893ad1d9766c1f548dd2e","modified":1529318859605},{"_id":"source/images/截图20180804182943.png","hash":"e6ee8895fad4345afc7de0c9ad257b414da2a3b4","modified":1533378584857},{"_id":"source/images/截图20180616161355.png","hash":"828644cf2889de2cce94b6373a00e1a8db6e27b7","modified":1529136836719},{"_id":"source/images/截图20180818144157.png","hash":"d78796f00b7a0d73a1e120f6dfc9fc233dbe8acd","modified":1534574521303},{"_id":"source/images/截图20180818144338.png","hash":"6515ab1a1a32e028ad267434df3a2f46a48539b6","modified":1534574619653},{"_id":"source/images/截图20181002175453.png","hash":"b2d2052d71e7439d312217231576afedd242ad13","modified":1538474100095},{"_id":"source/images/截图20180804204452.png","hash":"3cf8d7339e3d0764b2a25badf0db8a74078e07a2","modified":1533386696056},{"_id":"source/images/截图20180615090536.png","hash":"7d6d984b5c26f604b3981370cea5e07bf6f1da08","modified":1529024739624},{"_id":"source/images/截图20181003164515.png","hash":"0f8749a67173f5d6681512b9aaa26ee3a72a83e1","modified":1538556317225},{"_id":"source/images/截图20181002175558.png","hash":"2ac676bd02a6351cd1df8a04d92e9b34ea96a2b3","modified":1538474160164},{"_id":"source/images/截图20181003145142.png","hash":"2ba2f8300878622503f9b7a1530c034a5680ebe7","modified":1538549504180},{"_id":"source/images/微信图片_20190202173826.jpg","hash":"4f85192c8de0a0a717868b1bd7ce1358115c24c7","modified":1549071776000},{"_id":"source/images/截图20181003201618.png","hash":"e6dfe2468e325af813837b377ae97bca4a2290bf","modified":1538568980520},{"_id":"source/images/截图20181006154426.png","hash":"0551c07872f0f0a6fa780a57ceb0be739e61cae3","modified":1538811867721},{"_id":"source/images/截图20181006161411.png","hash":"24b73ce50c614068674b874872b16d5eb45b1665","modified":1538813654185},{"_id":"source/images/截图20181006162815.png","hash":"cfa09f90f7366c95f90f955d07d9a1c664573512","modified":1538814496905},{"_id":"source/images/截图20181006163246.png","hash":"f43c91761f5dbda4e0416e521dc68796dc463e68","modified":1538814768372},{"_id":"source/images/截图20181006163413.png","hash":"9bdb40f20a7fea47f32bfa5fae6fda9a17c22c54","modified":1538814855691},{"_id":"source/images/截图20181006165344.png","hash":"52d954734d820dcdb8a8e3eaffb651fe3d0de8bb","modified":1538816026260},{"_id":"source/images/截图20181006165741.png","hash":"b8204fb2e01bf44a9c567c7ee1f48de7cd6c96e4","modified":1538816262901},{"_id":"source/images/截图20181006165945.png","hash":"e05480a1b8b40c197ec6c349360d3fc0affcd9da","modified":1538816387108},{"_id":"source/images/截图20181006173913.png","hash":"bfb7b1bfac83474ae4f1e964ea3cfaf67cb0c6f6","modified":1538818755549},{"_id":"source/images/截图20181006180430.png","hash":"1806520849cd517c9da19d259ebb259c3d269408","modified":1538820271888},{"_id":"source/images/截图20181006180631.png","hash":"c81569bc3e5e23232bc0bc9f2cdb6f18d7fefd58","modified":1538820392657},{"_id":"source/images/截图20181006180828.png","hash":"c6648e868dc2ecb4ed65cfbb1a4e0bfd876bbe8f","modified":1538820509752},{"_id":"source/images/截图20181006210753.png","hash":"4461c27669f11e4904e75ef6ce239177c6684df3","modified":1538831275631},{"_id":"source/images/截图20181006173812.png","hash":"6642a920bf004ac9c865445bd516ded3eb881ebf","modified":1538818693726},{"_id":"source/images/截图20181119171728.png","hash":"e64a8613bdd93884131cb646786184d8b989976c","modified":1542619050718},{"_id":"source/images/截图20181125140044.png","hash":"22e123384e5cbe93ad70eac59946013c02662597","modified":1543125648677},{"_id":"source/images/截图20181125140603.png","hash":"229e30cf89352afcac94b4627822bc709467223e","modified":1543125964693},{"_id":"source/tags/index.md","hash":"6d5d07699be502d639c02a18ccd8b3b7ccd9e65a","modified":1526866943056},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1526785228686},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1526785228670},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1526784823532},{"_id":"themes/next/.git/index","hash":"1d0b01f15af90a043afcf369c8c95da140a09ed7","modified":1550154412884},{"_id":"source/images/截图20181006172654.png","hash":"f323c8106260aec16ed7e91fd88387cbd871d589","modified":1538818016315},{"_id":"source/images/截图20181004204524.png","hash":"ad538d0afd05b846946f6fb6f3b004cfbad13c8a","modified":1538657129218},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1526785228655},{"_id":"source/images/截图20180804183017.png","hash":"0f2ff80e01571dfd1007a12eb16f7cffb3c4debd","modified":1533378618734},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1526785228717},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1526785228717},{"_id":"source/images/20180517162130.png","hash":"097b7b83e21905ef58514943c63fec8a7e297b7b","modified":1526545293439},{"_id":"source/images/截图20181004205221.png","hash":"9ff3c58f6deabe7f27945e36f07415b8b45cb5a8","modified":1538657543236},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1526785228717},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1526785228717},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1526785228733},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1526785228733},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1526785228733},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1526785228733},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1526785228748},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1526785228748},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1526785228748},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1526785228748},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1526785228748},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1526785228748},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1526785228748},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1526785228748},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1526785228748},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1526785228748},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1526785228748},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1526785228764},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1526785228857},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1526785228857},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1526785228873},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1526785228857},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1526785228873},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1526785228873},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1526785229310},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1526785228873},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1526785228857},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1526785228857},{"_id":"source/images/20180519153604.png","hash":"7bc804c650735f5b52835f6fb782a04f181f8094","modified":1526719743324},{"_id":"source/images/20180520102405.png","hash":"b8e7e67fe1ad6869f29da1343ff3c8d09fee5b3f","modified":1526783056805},{"_id":"source/images/截图20190427171841.png","hash":"f20eb8288485ff420827bd4e20931b45339e92f0","modified":1556356729129},{"_id":"source/images/截图20190427204954.png","hash":"0b9d94b1d74254c520e2edc6aad4670bc6b124f8","modified":1556369398353},{"_id":"source/images/截图20190427210224.png","hash":"0eeb0fb41334a835f6e4946c78bdc44cd8735a0c","modified":1556370147258},{"_id":"source/images/截图20190428205446.png","hash":"e6ebb547147a4e92611ec25583cf10ea224b403b","modified":1556456089830},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1526785228748},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1526785229310},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1526785229310},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526785229045},{"_id":"source/images/1542536446656.gif","hash":"cb0558cf8cc2a1d9f94c7f0577cca0a5ca8728b4","modified":1542536426287},{"_id":"source/images/1542536827531.gif","hash":"ee8a94cf64a27685c8a9fd9f171a7bd85b327d6d","modified":1542536828215},{"_id":"source/images/original/微信图片_20190202173819.jpg","hash":"4623f978b15202c039bae8970731509dbea8dc61","modified":1549100301968},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1526784823555},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1526784823535},{"_id":"source/images/微信截图_20190201171932.gif","hash":"be854fb85690b7dcccf9c66a8d80237d74d6f213","modified":1549012955712},{"_id":"themes/next/.git/logs/HEAD","hash":"181b24765c0114eb4ef42e105e03117c03cd6362","modified":1526785228670},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1526784823537},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1526784823542},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1526784823540},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1526784823545},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1526784823547},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1526784823548},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1526784823551},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1526784823544},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1526784823550},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1526785228764},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1526785228764},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1526784823552},{"_id":"source/images/original/微信图片_20190202173857.jpg","hash":"11141f906d68a79db66cb4f2118934ccde9273ad","modified":1549100339393},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1526785228779},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1526785228779},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1526785228779},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1526785228779},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1526785228764},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1526785228764},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1526785228764},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1526785228764},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1526785228764},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1526785228795},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1526785228795},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1526785228764},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1526785228811},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1526785228764},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1526785228779},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1526785228842},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1526785228779},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1526785228842},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1526785228842},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1526785228842},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1526785228842},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1526785228842},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1526785228842},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1526785228873},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1526785228873},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1526785228873},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1526785228873},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1526785228889},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1526785228889},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1526785228873},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1526785228889},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1526785228889},{"_id":"themes/next/source/css/main.styl","hash":"f36040205d51eeb3d259771e75c264fd1b39dc4f","modified":1526970292840},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1526785229045},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1526785229045},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1526785229045},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1526785229060},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1526785229045},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1526785229060},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1526785229060},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1526785229060},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526785229060},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1526785229060},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526785229060},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1526785229060},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1526785229060},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1526785229060},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1526785229060},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1526785229060},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1526785229045},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1526785229045},{"_id":"source/images/original/微信图片_20190202173826.jpg","hash":"b7acff51c94bc0c42daf0a29e183314422eaffb9","modified":1549100308414},{"_id":"source/images/original/微信图片_20190202173902.jpg","hash":"9b947937f4a41a711f51d0192b165ac377b60a82","modified":1549100343654},{"_id":"source/images/original/微信图片_20190202174136.jpg","hash":"a99b5f0f05d811ce5275548492e2f60f011b9984","modified":1549100497938},{"_id":"source/images/original/微信图片_20190202173852.jpg","hash":"7e9bd16a20e2c8554788d3e5a3733e2469bb2480","modified":1549100334079},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526785228795},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526785228795},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526785228998},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526785228998},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526785228998},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526785229029},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526785229045},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1526785228670},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1526785228779},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1526785228779},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1526785228779},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1526785228779},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1526785228795},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1526785228795},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1526785228795},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1526785228811},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1526785228779},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1526785228811},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1526785228811},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1526785228795},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1526785228811},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1526785228811},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1526785228811},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1526785228811},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1526785228811},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1526785228811},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1526785228826},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1526785228826},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1526785228826},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1526785228811},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1526785228826},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1526785228826},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1526785228826},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1526785228826},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1526785228826},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1526785228826},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1526785228826},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1526785228826},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1526785228842},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1526785228842},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1526785228857},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1526785228795},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1526785228857},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1526785228857},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1526785228857},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1526785228998},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1526785228998},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"6aa3e5f9e7d69d07c07e7f252b11b42323974f13","modified":1529288464158},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1526785228795},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1526785229029},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1526785228998},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1526785229076},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1526785229076},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1526785229076},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1526785229076},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1526785229076},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1526785229076},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1526785229045},{"_id":"themes/next/source/js/src/motion.js","hash":"3988604f46ada5ffd20536b9a9734342a064e5a9","modified":1542540030677},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1526785229076},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1526785229029},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1526785229091},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1526785229091},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1526785229091},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1526785229138},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1526785229169},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1526785229154},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1526785229154},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1526785229169},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1526785229201},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1526785229201},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1526785229029},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1526785229216},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1526785229216},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1526785229216},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1526785229216},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1526785229201},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1526785229201},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1526785229247},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1526785229216},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1526785229247},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1526785229247},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1526785229263},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1526785229263},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1526785229247},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1526785229263},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1526785229247},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1526785229263},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1526785229263},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1526785229263},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1526785229263},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1526785229263},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1526785229263},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1526785229279},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1526785229263},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1526785229279},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1526785229279},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1526785229279},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1526785229279},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1526785229279},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1526785229279},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1526785229279},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1526785229294},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1526785229279},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1526785229279},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1526785229294},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1526785229310},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1526785229294},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1526785229310},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1526785229310},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1526785229310},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1526785229247},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1526785228670},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"181b24765c0114eb4ef42e105e03117c03cd6362","modified":1526785228670},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1526785228842},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1526785228842},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1526785228998},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1526785228998},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1526785228998},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1526785229013},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1526785228998},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1526785229013},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1526785229029},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1526785229013},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1526785229029},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1526785229013},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1526785229029},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1526785229013},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1526785229013},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1526785229013},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1526785229013},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1526785229029},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1526785229029},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1526785229029},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1526785229029},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1526785228982},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1526785228889},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1526785228889},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1526785228889},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1526785228889},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1526785228889},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1526785228920},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1526785228951},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1526785228982},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1526785228982},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1526785228982},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1526785228982},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1526785228982},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1526785228998},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1526785229076},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526785229169},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526785229169},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526785229185},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526785229185},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526785229185},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526785229185},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1526785229201},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1526785229201},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1526785229201},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1526785229201},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1526785229216},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1526785229216},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1526785229216},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1526785229216},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1526785229294},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1526785229294},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1526785229123},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1526785229091},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"181b24765c0114eb4ef42e105e03117c03cd6362","modified":1526785228655},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1526785229247},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1526785229013},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1526785229013},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1526785229029},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1526785228889},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1526785228904},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1526785228904},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1526785228904},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1526785228904},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1526785228904},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1526785228904},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1526785228904},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1526785228920},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1526785228920},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1526785228904},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1526785228920},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1526785228904},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1526785228920},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1526785228920},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1526785228904},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1526785228920},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1526785228920},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1526785228920},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1526785228935},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1526785228935},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1526785228935},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1526785228935},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1526785228935},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1526785228935},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1526785228935},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1526785228935},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1526785228935},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1526785228951},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1526785228935},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1526785228951},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1526785228935},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1526785228951},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1526785228951},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1526785228951},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1526785228951},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1526785228951},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1526785228951},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1526785228951},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1526785228951},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1526785228967},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1526785228951},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1526785228967},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1526785228967},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1526785228967},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1526785228967},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1526785228967},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1526785228967},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1526785228967},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1526785228967},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1526785228967},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1526785228967},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1526785228982},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1526785228982},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1526785228982},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1526785228982},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1526785228920},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1526785228920},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1526785229091},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1526785229091},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1526785229123},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1526785229138},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1526785229091},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1526785229185},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1526785229185},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1526785229185},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1526785229185},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1526785229201},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1526785229201},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1526785229247},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1526785229232},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1526785229232},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1526785229247},{"_id":"source/images/1543630801931.gif","hash":"f31aff0e3bd52aa2128d84e1d3847d5055397524","modified":1543629106253},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1526785229091},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1526785229091},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1526785229310},{"_id":"themes/next/.git/objects/pack/pack-0df40285cfd6ba61cd77b9db468522fa4a3564d9.idx","hash":"9bd7aefeb87914ecfb289a7b609bfefc37dd28e3","modified":1526785228436},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1526785229154},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1526785229294},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1526785229232},{"_id":"source/images/1543654707987.gif","hash":"cd6f4aed45d7f6cae76ff216b0594e9fd8eb59ca","modified":1543654578801},{"_id":"themes/next/.git/objects/pack/pack-0df40285cfd6ba61cd77b9db468522fa4a3564d9.pack","hash":"b7b9af2417976ae7eab57dc0584d64df5654085a","modified":1526785228436},{"_id":"public/search.xml","hash":"45a888f1627c13410e700c6bb73575ac67cafab1","modified":1556457979724},{"_id":"public/404.html","hash":"6b4a52e91feed33f86896987cf3145be04652f23","modified":1556457979901},{"_id":"public/categories/index.html","hash":"9741709bb44147c7bbb88f7dd1d453968b453a89","modified":1556457979901},{"_id":"public/tags/index.html","hash":"08c1397d6ab61a6ce5022188e9b836a0fea3c280","modified":1556457979902},{"_id":"public/2019/04/tcp-connection-reuse-in-http-1-1-and-2-0/index.html","hash":"d87f24dcf7ea5f91e7c4a136a9b745f93d53a9a2","modified":1556457979903},{"_id":"public/2019/03/web-performance-optimization-summary-in-2019-3/index.html","hash":"fedbff8b1a1e10e6935dbfd9e8d7982cf5aa9db8","modified":1556457979904},{"_id":"public/2019/02/notes-for-developing-web-page/index.html","hash":"ee20e45d0b4a07672bd919f14513d0a0e285e78b","modified":1556457979904},{"_id":"public/2019/01/notes-for-developing-mobile-web-page/index.html","hash":"a30c4d468f20ec93daf423210089d5597570a195","modified":1556457979905},{"_id":"public/2019/01/wheelevent-compatibility-and-delta-handler/index.html","hash":"6718b28a32e97f0227266151c43a70bd90ab84bd","modified":1556457979905},{"_id":"public/2019/01/tricks-in-vue/index.html","hash":"ca5ced52ab68cf673f648e5acb3a821ffdb72464","modified":1556457979906},{"_id":"public/2018/12/event.preventdefault()-in-contextmenu-would-trigger-mouseup-event/index.html","hash":"24dd1c5831ebae0a54dbc35ad5866c2e6aaf989c","modified":1556457979907},{"_id":"public/2018/12/easier-way-to-understand-apply-and-call-in-js/index.html","hash":"77b983f501fdcc77a486bfabc19ff1019d94a5bf","modified":1556457979907},{"_id":"public/2018/12/serval-ways-to-re-render-in-vue/index.html","hash":"d0589016f8d7a60be7a3e2b8f2c5edd2497b0be2","modified":1556457979908},{"_id":"public/2018/12/remnant-shadows-when-toggling-pictures-with-alpha-in-firefox-and-safari/index.html","hash":"ee31ec119458b20107907047d687190a44f4af45","modified":1556457979908},{"_id":"public/2018/11/browsers-disabled-audio-autoplay/index.html","hash":"6bcc8951a3015ed68a502680fbad47e4f3726030","modified":1556457979909},{"_id":"public/2018/11/chrome-vh-is-always-calculated-as-if-the-url-bar-is-hidden/index.html","hash":"67c192f5c0c5d794e9f6a91d509371dee2ec901c","modified":1556457979909},{"_id":"public/2018/11/traps-of-computed-in-vue/index.html","hash":"c2871f038f2f585bbab0f7a46168f2478d79ef63","modified":1556457979910},{"_id":"public/2018/11/image-load-error-handler/index.html","hash":"c1945ee8236afd339366da0deb8199691f127c53","modified":1556457979910},{"_id":"public/2018/11/build-multiple-choice-cascader-with-third-party-ui/index.html","hash":"222e28dc2723096271416771a8103543193b665b","modified":1556457979911},{"_id":"public/2018/10/usage-of-eslint/index.html","hash":"7a9f422266691dadd469743d34584d39a5a95eec","modified":1556457979911},{"_id":"public/2018/10/problems-met-when-using-canvas/index.html","hash":"70f4e2662dd84983a8e0c57d3a6eee0f36cbd87e","modified":1556457979912},{"_id":"public/2018/10/override-3rd-party-style/index.html","hash":"401d4b35cb2390ed5c0edb3cb395dc5471a867ba","modified":1556457979912},{"_id":"public/2018/10/understand-sync-in-vue/index.html","hash":"5cbec193735450759f08ae9a47a378cf2edd21f8","modified":1556457979916},{"_id":"public/2018/10/move-the-switch-of-console-to-urlsearchparams/index.html","hash":"6598f648c82c7818729f4c00f4b666a57dd5330b","modified":1556457979916},{"_id":"public/2018/10/vue-form-input-bindings-fail/index.html","hash":"c3a12539821bf4e5fa8131e096be941fc48efe43","modified":1556457979917},{"_id":"public/2018/10/better-way-to-use-orientationchange-event-on-mobile/index.html","hash":"a3eb0822ad6f6a2677d506037cc254f37f025b53","modified":1556457979917},{"_id":"public/2018/10/x-ua-compatible-and-ie-edge/index.html","hash":"7d7dc4bd4b2dd808ccd8d476659319e65b4b3e66","modified":1556457979917},{"_id":"public/2018/10/problems-met-when-using-qrcodejs/index.html","hash":"b6fef250d42abff846b5ba4d8d2525cf04978ea7","modified":1556457979918},{"_id":"public/2018/10/set-custom-style-of-share-in-wechat/index.html","hash":"256308ce60eefcc6133496080fc1ce68cd5da9b2","modified":1556457979918},{"_id":"public/2018/09/settings-in-vscode/index.html","hash":"8a41b9947c50626be293cf626662c9a51c941474","modified":1556457979918},{"_id":"public/2018/08/access-lan-in-virtualbox/index.html","hash":"f2f1da302eb1d418ebef3784d6355e548de74e36","modified":1556457979925},{"_id":"public/2018/08/auto-zoom-in-when-form-elements-are-focused-in-ios/index.html","hash":"e1e546476fd77f483013452f11bd1d6eb4ddf409","modified":1556457979925},{"_id":"public/2018/08/split-file-and-upload-in-frontend/index.html","hash":"0582f53ebcbb450f523aae5a35af33117b62aa5e","modified":1556457979926},{"_id":"public/2018/08/use-custom-font-on-web/index.html","hash":"12253ca5ec9e7a744ce52da085e7e700f0013a43","modified":1556457979926},{"_id":"public/2018/08/find-what-font-the-browser-is-actually-using/index.html","hash":"b2cf8236045c5fa59d984a187ad39a3c81f8b225","modified":1556457979927},{"_id":"public/2018/07/skills-on-mobile-development/index.html","hash":"a8a6f608f80628552f62ce0afca4cc25c47eabda","modified":1556457979927},{"_id":"public/2018/06/a-trap-when-using-letter-spacing-to-remove-the-extra-space-in-chrome66.0.3359.139/index.html","hash":"07395f32bdd5a15482fd026e058efedf74efdb91","modified":1556457979928},{"_id":"public/2018/06/layout-on-mobile/index.html","hash":"b4b95638f01c9b96abb1140f0ad6400f8440382c","modified":1556457979929},{"_id":"public/2018/06/first-exploration-on-mobile/index.html","hash":"b1162b2fc0dfd0efb6459472d429e016f22baffa","modified":1556457979929},{"_id":"public/2018/06/label-can-t-be-focused-in-firefox-with-element.focus()/index.html","hash":"2c55e48809c2e8630711c1ccc17e09b3792f66ab","modified":1556457979930},{"_id":"public/2018/06/about-smooth-scroll/index.html","hash":"a07fdadf6f7fcc5167f11b72517743ec931161b6","modified":1556457979930},{"_id":"public/2018/06/use-text-align-last-except-when-i-have-only-one-line-of-text/index.html","hash":"286dc2f5037c1c6ed66fe38ddd5bd1af99ff0495","modified":1556457979931},{"_id":"public/2018/06/ms-bug-in-flex/index.html","hash":"2db91ef49775cbf14e6e56e3ef5c7f1c8d0cf97d","modified":1556457979932},{"_id":"public/2018/06/when-and-how-to-use-frame/index.html","hash":"230ae5afdfa2559650c6930569c488c07a6a2304","modified":1556457979932},{"_id":"public/2018/05/event-capturing-vs-event-bubbling/index.html","hash":"83ffe0de6c447f35ae586f8e06f527300cea696c","modified":1556457979933},{"_id":"public/2018/05/how-to-debug-with-a-more-efficient-way/index.html","hash":"f520eeb168c049366f433b4d1a5b66d32640a349","modified":1556457979933},{"_id":"public/2018/05/build-blog-by-github-pages-and-hexo/index.html","hash":"259f4eb02e4a685db040e158ef30350992d97489","modified":1556457979934},{"_id":"public/2018/05/what-is-the-background-color-height-of-inline-non-replaced-element/index.html","hash":"af9db1fe4ebeca5bba75c11a0418fec24e8499b7","modified":1556457979934},{"_id":"public/archives/index.html","hash":"cad437dbfa59bef11b4b8d3512f34219d002a726","modified":1556457979935},{"_id":"public/archives/page/2/index.html","hash":"38161bf15ecd25a14924bfa64e42a1e86c16e6b1","modified":1556457979935},{"_id":"public/archives/page/3/index.html","hash":"5d761a39fe54076e8394d6fb3e082f474e70a43b","modified":1556457979935},{"_id":"public/archives/page/4/index.html","hash":"8d90b1002409cc445b6b9d0699f3b314769db06e","modified":1556457979936},{"_id":"public/archives/page/5/index.html","hash":"0710571e6da6897b3819dcc66d1caf8e88df8eed","modified":1556457979936},{"_id":"public/archives/2018/index.html","hash":"0508f96f7351e9caa074ff136deb76d088d2f90d","modified":1556457979936},{"_id":"public/archives/2018/page/2/index.html","hash":"0b61a31b0a192962691eceffe192668efb8da2a8","modified":1556457979937},{"_id":"public/archives/2018/page/3/index.html","hash":"2cd8992b58a7497edcd26032facbcef02f884019","modified":1556457979937},{"_id":"public/archives/2018/page/4/index.html","hash":"81c630774f3bcfd0bcad2b34e2933c19ae155412","modified":1556457979938},{"_id":"public/archives/2018/05/index.html","hash":"21197fa94e866e5ee61809dee48828817b16ac8a","modified":1556457979938},{"_id":"public/archives/2018/06/index.html","hash":"b09b372ba8bf2e5e31c4a8718e3c6bb57129a112","modified":1556457979938},{"_id":"public/archives/2018/07/index.html","hash":"0f90140c14f1cd61e631c7f1ddcbe4ab0efec9fb","modified":1556457979939},{"_id":"public/archives/2018/08/index.html","hash":"300d0ec834e12574390b034b2c3e7f0ead6e3d55","modified":1556457979939},{"_id":"public/archives/2018/09/index.html","hash":"7ec1e5470f53164be5af0863675c6ad437e2082f","modified":1556457979939},{"_id":"public/archives/2018/10/index.html","hash":"73fd67d03bd318908c8a6afbf11b17fd83dcaa3e","modified":1556457979940},{"_id":"public/archives/2018/11/index.html","hash":"bff09de01906b6a13d25677176f7389f2a346fef","modified":1556457979940},{"_id":"public/archives/2018/12/index.html","hash":"e1f24c734b62b66aa79b34a60c237a0d985b9039","modified":1556457979940},{"_id":"public/archives/2019/index.html","hash":"68bac671993d538acaed8f93f521befc2332fc82","modified":1556457979941},{"_id":"public/archives/2019/01/index.html","hash":"3fd1180b10879d6f0ebffe9b9311d9c49e804b64","modified":1556457979941},{"_id":"public/archives/2019/02/index.html","hash":"4cbc41262a5738490d095fd1261bb8a62e566f54","modified":1556457979942},{"_id":"public/archives/2019/03/index.html","hash":"4bb2d43184783142f1bad8524d55dcf70bc99a42","modified":1556457979942},{"_id":"public/archives/2019/04/index.html","hash":"382e2c6fe14c2a8703cad76e6241ab88f62ffd71","modified":1556457979943},{"_id":"public/categories/css/index.html","hash":"99a0dc9d96c51990734a847f5cd668ecc600a4e7","modified":1556457979943},{"_id":"public/categories/javascript/index.html","hash":"1691c9b36da840aae4342bcaa293c38ff604c54f","modified":1556457979944},{"_id":"public/categories/javascript/page/2/index.html","hash":"b57e89677dac6f8a6f2d3998097411589b237da2","modified":1556457979945},{"_id":"public/categories/software/index.html","hash":"180cb106ea834be1aa0e088959b05c1ea5d4d332","modified":1556457979945},{"_id":"public/categories/html/index.html","hash":"135b8c73a0ce6ae273c0f3f5ae087bd4665c2cf6","modified":1556457979946},{"_id":"public/categories/frame/index.html","hash":"938b4df95d1a1abe79331a8b73a069656c24cc51","modified":1556457979947},{"_id":"public/categories/debug/index.html","hash":"699c2ef4492102013d14313636b8d7034b7f6729","modified":1556457979948},{"_id":"public/categories/summary/index.html","hash":"e81f1230c3ccf6cc03bafaa02c60af0ccf21bf97","modified":1556457979948},{"_id":"public/categories/http/index.html","hash":"ca602f1461bcc7ab79060f1e87c993b0debf37b9","modified":1556457979949},{"_id":"public/categories/web-performance-optimization/index.html","hash":"b41c41796d940c6d313ce08605fa8f4a40e7b4b7","modified":1556457979951},{"_id":"public/index.html","hash":"60e2f7428df5daed569f76a1e6eafe3ff0dc5308","modified":1556457979951},{"_id":"public/page/2/index.html","hash":"3f357a00f246dfb75b6c5c66b58780b8e1242ad1","modified":1556457979952},{"_id":"public/page/3/index.html","hash":"2c23b87d094d46f892c1dd7ab5f3e3f787feffaa","modified":1556457979952},{"_id":"public/page/4/index.html","hash":"964d848b3bf0063c9093b084cc3ac77ed7463713","modified":1556457979953},{"_id":"public/page/5/index.html","hash":"497d6f5321278eebcf859df1e5d5e1ba11baba5e","modified":1556457979953},{"_id":"public/page/6/index.html","hash":"245b4a08827273164994186f85386c5e8e2ce7bc","modified":1556457979954},{"_id":"public/page/7/index.html","hash":"298c08581a282835dc1c9c374a91f07533acc66a","modified":1556457979954},{"_id":"public/page/8/index.html","hash":"ef9cbf94734f62e146729f581cb386cf1cd6c16d","modified":1556457979955},{"_id":"public/page/9/index.html","hash":"8380bb59410f44e7fcb08222d43a20c624fa2b49","modified":1556457979955},{"_id":"public/page/10/index.html","hash":"c4f76daab7c618d17365224eaf1925f3269564fc","modified":1556457979956},{"_id":"public/page/11/index.html","hash":"e7108ac212fe73124e5c775c322b5afd4ebfc0a6","modified":1556457979956},{"_id":"public/page/12/index.html","hash":"2d1a057f2f5dcec4cbb6246f4e4c9860845683ca","modified":1556457979956},{"_id":"public/page/13/index.html","hash":"4240544c4a11ea028513e6773f9e8a4ee9d1046c","modified":1556457979957},{"_id":"public/page/14/index.html","hash":"f7d7ab1d73c519d0f7f6c3ecffc5b452a51230be","modified":1556457979958},{"_id":"public/page/15/index.html","hash":"930894f225965a89b277195a376cd35d89a2a438","modified":1556457979959},{"_id":"public/tags/smooth-scroll/index.html","hash":"e0b5fd3c299a538bb533e0b374d8be9b504aacbe","modified":1556457979959},{"_id":"public/tags/scrollto/index.html","hash":"a42a45249102f2d1fb0ca1200542decbc6222a0f","modified":1556457979960},{"_id":"public/tags/requestanimationframe/index.html","hash":"d9ddeada409418b848a182ff6ebead9a1b277e76","modified":1556457979960},{"_id":"public/tags/settimeout/index.html","hash":"b483e1342449a54ebb57b5e5ce24031923ebcc38","modified":1556457979961},{"_id":"public/tags/bug/index.html","hash":"93dd43c08040b11750ca6674dcc191a0df01bdc9","modified":1556457979961},{"_id":"public/tags/chrome/index.html","hash":"716dc0c969bdec915067b3c9d4c08fc3fddcdca0","modified":1556457979962},{"_id":"public/tags/inline-block/index.html","hash":"3ffd094ca097da0fb665a5dad9389d2a5f8b6017","modified":1556457979962},{"_id":"public/tags/letter-spacing/index.html","hash":"ac505ba194b5c27166fe4be07554e3e61c37f9b8","modified":1556457979962},{"_id":"public/tags/virtualbox/index.html","hash":"beb5a6406042e559be5a415da25941cfb6fb0a18","modified":1556457979963},{"_id":"public/tags/lan/index.html","hash":"a16580294f89a89a4cccb3b34b5fb472a7f05245","modified":1556457979963},{"_id":"public/tags/192-168-x-x/index.html","hash":"6842de1d8896fc593c7abea9101c93cd5cff6bda","modified":1556457979964},{"_id":"public/tags/chinese/index.html","hash":"372c2e7e4a27f397700a85507342204749e739a1","modified":1556457979965},{"_id":"public/tags/form/index.html","hash":"0f4d82533a9e32f935a1a334b673851492b6423d","modified":1556457979965},{"_id":"public/tags/ios/index.html","hash":"f4624f6ff0b6ebb943e3b868f5061be03b781e54","modified":1556457979966},{"_id":"public/tags/focus/index.html","hash":"6dc984e61aa93000517f7b8dfd84216afde9a943","modified":1556457979966},{"_id":"public/tags/orientationchange/index.html","hash":"fc25ccb9aec86f45939066be78818daebaf59739","modified":1556457979967},{"_id":"public/tags/mobile/index.html","hash":"421b7a2bd794658fcad240e3107e7e8b50bad8cd","modified":1556457979967},{"_id":"public/tags/audio/index.html","hash":"891f546d1655852f50572e98768abe77d3fb0133","modified":1556457979967},{"_id":"public/tags/autoplay/index.html","hash":"d0889bafd6382dd0ca006df686e13c19d73b0e79","modified":1556457979968},{"_id":"public/tags/blog/index.html","hash":"1abc243992bc52fb6bba58cee96c84947eea7fac","modified":1556457979968},{"_id":"public/tags/hexo/index.html","hash":"99cfd699bd09184a6be46debff3b49bdbab9d477","modified":1556457979968},{"_id":"public/tags/github/index.html","hash":"e9cb2d06ef472edad1b2858056c5f41e994f000f","modified":1556457979969},{"_id":"public/tags/vh/index.html","hash":"1fb0ab503985cc68901aa0e5945b8a5f0724c678","modified":1556457979969},{"_id":"public/tags/css-variables/index.html","hash":"245076a61474a15abea8ac4bb54739685b4246c5","modified":1556457979969},{"_id":"public/tags/ant-design-vue/index.html","hash":"54bf1701e412659cf2078827b3b66d756085378c","modified":1556457979970},{"_id":"public/tags/vue/index.html","hash":"d0c92bdc26076cf96700ed74724ecf30ad0bcf76","modified":1556457979970},{"_id":"public/tags/multiple-choice-cascader/index.html","hash":"ff105f139d57a207ab719a3ccf6ae1da7f0b6f0e","modified":1556457979970},{"_id":"public/tags/font-family/index.html","hash":"0928489064b719024b1cb417ebd8e2cd146399fb","modified":1556457979970},{"_id":"public/tags/mouseup/index.html","hash":"416842bb4b8992fdd586e5cbeb015de613c84673","modified":1556457979971},{"_id":"public/tags/contextmenu/index.html","hash":"48b2f8ca3a7ae0adac156aad0758115700407079","modified":1556457979971},{"_id":"public/tags/preventdefault/index.html","hash":"dc2c56b266fb0cc93bcdc084927e8fed04a6a8bb","modified":1556457979971},{"_id":"public/tags/img/index.html","hash":"13186389971a64a1ba340d6f26e81c7a21251a0a","modified":1556457979972},{"_id":"public/tags/debug/index.html","hash":"d903656c1bc2b95b252fff0b0b545ba27bd7ed1d","modified":1556457979972},{"_id":"public/tags/efficiency/index.html","hash":"51727588690c276df7aac2b37da0f8f6d15abe07","modified":1556457979972},{"_id":"public/tags/label/index.html","hash":"3213ff5f6905a6e01aac268ac39917ac3006f397","modified":1556457979973},{"_id":"public/tags/firefox/index.html","hash":"cadadca82a10de89e84b20e9d25a29c790aa1ba9","modified":1556457979974},{"_id":"public/tags/contenteditable/index.html","hash":"97fad2f759362f6126cb4a0b9defdcedc67e434a","modified":1556457979974},{"_id":"public/tags/ms/index.html","hash":"cc2478f3a6e2af58b6d92d7772620ea1d7acce0a","modified":1556457979975},{"_id":"public/tags/min-height/index.html","hash":"077a9959c588cb454c660f036528f850a380ff2b","modified":1556457979975},{"_id":"public/tags/display/index.html","hash":"096cdf7194de0a086bc12b5ba86aa49bee8ca9ae","modified":1556457979976},{"_id":"public/tags/flex/index.html","hash":"bae3e270392de4857efe12baa405c9da457fa6ca","modified":1556457979976},{"_id":"public/tags/ie/index.html","hash":"2345f2d19eb467a78fd8b0464d661fa848b415fc","modified":1556457979977},{"_id":"public/tags/edge/index.html","hash":"b4c9f00ae5d0fe36be8a6185018f466c6f326f80","modified":1556457979977},{"_id":"public/tags/override-css/index.html","hash":"976c03d577643219b379550ac50f05373259bc27","modified":1556457979978},{"_id":"public/tags/canvas/index.html","hash":"62bcc1be4197312e2b68b6239ef3f53a1b0ac3e7","modified":1556457979978},{"_id":"public/tags/performance/index.html","hash":"d372010b2513a1cc6ae655f2da028ca5449e2039","modified":1556457979979},{"_id":"public/tags/image/index.html","hash":"3f092be7c8165d9fd1445c90d4659fd88d225b88","modified":1556457979979},{"_id":"public/tags/wechat/index.html","hash":"93dc8c42f98aa9ff21d2db3164dbb4c7a6d0b6d8","modified":1556457979980},{"_id":"public/tags/share/index.html","hash":"6b8ef67aa3e5d4fc5208862e3d7db7a859bc6558","modified":1556457979980},{"_id":"public/tags/qq/index.html","hash":"213e5c26383051d774a18362c76bd662c202f028","modified":1556457979981},{"_id":"public/tags/webpack/index.html","hash":"f3d85a184b33024e10bfe79f9c97997adbce4d46","modified":1556457979981},{"_id":"public/tags/blob/index.html","hash":"439a47b74506a8325201da2954a3dd64741be087","modified":1556457979982},{"_id":"public/tags/vscode/index.html","hash":"6487f69b73d327ef12e83c2bab4265304a0f9b4e","modified":1556457979982},{"_id":"public/tags/tcp/index.html","hash":"0452a350344d6650b6631e2aba9811fe23250186","modified":1556457979983},{"_id":"public/tags/http-1-1/index.html","hash":"b82bb06e8a1f4fd423830455b0cf965cfa0ae030","modified":1556457979983},{"_id":"public/tags/http-2-0/index.html","hash":"754052e9895aabe7084b70e3c8f7a0e23e64e6dd","modified":1556457979984},{"_id":"public/tags/sync/index.html","hash":"27b68708607256ef431e2f7264dba6264a99e5c0","modified":1556457979984},{"_id":"public/tags/font/index.html","hash":"3c50fb68908441265d3db06b6db82e474884321d","modified":1556457979984},{"_id":"public/tags/fontmin/index.html","hash":"123d8f9daa21a7ea89dc851484a9ea910e391329","modified":1556457979985},{"_id":"public/tags/browser/index.html","hash":"0763a04db907c3bab5d2df7952b5194f42d64cc2","modified":1556457979985},{"_id":"public/tags/lighthouse/index.html","hash":"0942ded02702fb686f72b804b9cd3c23b04d60da","modified":1556457979986},{"_id":"public/tags/apply/index.html","hash":"0231336abc357bf6b8b20d06c4d4aed0ba0fa8f2","modified":1556457979986},{"_id":"public/tags/call/index.html","hash":"0eb4983999b2e148dc528790805323cf1215cb9b","modified":1556457979986},{"_id":"public/tags/background-color/index.html","hash":"b0dcbfd91c831fffbc8f04ea4228cd4983a76fb4","modified":1556457979987},{"_id":"public/tags/inline-non-replaced-element/index.html","hash":"47c06a8b19e7bacf58ef908010134a8aa26513f8","modified":1556457979987},{"_id":"public/tags/content-area/index.html","hash":"c16a9820112e47c9f6d3c4c48e0d488bc1adbb85","modified":1556457979988},{"_id":"public/tags/text-align/index.html","hash":"24fab098343a16aaa7f88d65bec2eca347cc2f34","modified":1556457979989},{"_id":"public/tags/text-align-last/index.html","hash":"087811e1019cd9376067479c5d27d4eb7cfb0e57","modified":1556457979989},{"_id":"public/tags/event-capturing/index.html","hash":"f8b98d5693315a8333928fba24363afab4d57147","modified":1556457979989},{"_id":"public/tags/event-bubbling/index.html","hash":"f2952581c909f2ebd06a2e978c12fa69f37b5007","modified":1556457979990},{"_id":"public/tags/event-delegate/index.html","hash":"6a857085eec923415af96052472847ebeb13e225","modified":1556457979990},{"_id":"public/tags/image-load-error/index.html","hash":"0747ced97d07bf0ad897a172d8c6fedbccb212bd","modified":1556457979991},{"_id":"public/tags/wheelevent/index.html","hash":"383845fa5bed02d2b02e70cc6f677f51030fdf17","modified":1556457979991},{"_id":"public/tags/delta/index.html","hash":"9bd9be934091dbafac629f9742ebaf9e3d747576","modified":1556457979992},{"_id":"public/tags/wheel/index.html","hash":"ba9f2b5d19fb8705f1d74cbf49ecca50b593685b","modified":1556457979992},{"_id":"public/tags/dommousescroll/index.html","hash":"d1c2564f08a290797a8a2f83c8a1f03b906f9ecc","modified":1556457979993},{"_id":"public/tags/mousewheel/index.html","hash":"c987503d74e6ff04bb8902003324acc5c3ffbe32","modified":1556457979993},{"_id":"public/tags/console-log/index.html","hash":"a7c8a919f33c70a170a23db329b3f72dc926f2b5","modified":1556457979994},{"_id":"public/tags/urlsearchparams/index.html","hash":"88637281dc5378eb89a941ad23f4af4a938a9209","modified":1556457979994},{"_id":"public/tags/meta/index.html","hash":"5e69679d31f427cb42d407eaa830d0a69edb0cf5","modified":1556457979995},{"_id":"public/tags/http-equiv/index.html","hash":"1a580758361e9506bb8924aa9e4153d53b35bac0","modified":1556457979995},{"_id":"public/tags/x-ua-compatible/index.html","hash":"6a1a6809ec37805e126300fefd8faf7867504bf1","modified":1556457979995},{"_id":"public/tags/content/index.html","hash":"964cb2b0b7afaef6603cc2c103380e432d1edd63","modified":1556457979996},{"_id":"public/tags/ie-edge/index.html","hash":"8fbfd6c5a6c5665be1fec7c2d9940909e34b7c36","modified":1556457979996},{"_id":"public/tags/rem/index.html","hash":"8a01e0707e994e916d3b9d57cbeb8289b8712e15","modified":1556457979997},{"_id":"public/tags/initial-scale/index.html","hash":"8c9cd3b33f3dbe76d1f6e3f5644a85b49826d53d","modified":1556457979997},{"_id":"public/tags/device-width/index.html","hash":"8e217d1a5460c0ad3e971065475b05cc393edf09","modified":1556457979998},{"_id":"public/tags/dpr/index.html","hash":"e9d043d7c88beeee7ce4cecf273f86ea0fe3cbe7","modified":1556457979999},{"_id":"public/tags/vw/index.html","hash":"5462fee49a89ad38a1083053d5f844945cc2150d","modified":1556457979999},{"_id":"public/tags/qrcodejs/index.html","hash":"0d4b7769a8b9139dd5a3ace22a7166d4cd5f869a","modified":1556457979999},{"_id":"public/tags/mutationobserver/index.html","hash":"ac3572f16fcb2e2e7ea60d834f1680760d228f20","modified":1556457980000},{"_id":"public/tags/computed/index.html","hash":"0082f79d98fe6b45e434d7c58557d538962d71f1","modified":1556457980000},{"_id":"public/tags/recomputed/index.html","hash":"0c0acad5055c566ec4fe797e6a06242477bb5299","modified":1556457980001},{"_id":"public/tags/eslint/index.html","hash":"c66fe8fd6bba8802b707895f2a7775f3029eeecd","modified":1556457980001},{"_id":"public/tags/layout/index.html","hash":"24f49285bafb91adfaca93a8279411a2b3f1711e","modified":1556457980001},{"_id":"public/tags/viewport/index.html","hash":"44e4cccd9e9c34e6c955e9a9c23be1fd98d17670","modified":1556457980002},{"_id":"public/tags/layout-viewport/index.html","hash":"52d4957999732558aa9b6e32b210e03346950d41","modified":1556457980002},{"_id":"public/tags/visual-viewport/index.html","hash":"9b17fc7003166889c7204f9cb80895948b0a688d","modified":1556457980002},{"_id":"public/tags/css-pixel/index.html","hash":"f77ec7c132755cc6352f674854ef4312c00cf1f5","modified":1556457980003},{"_id":"public/tags/device-pixel/index.html","hash":"e7b0b0e8fded2b945950334d77955734a58c525d","modified":1556457980003},{"_id":"public/tags/retina/index.html","hash":"a843f1e2ec05e218475c4171cad8b8bd087d1639","modified":1556457980004},{"_id":"public/tags/user-scalable/index.html","hash":"aefdd2cbd16ace2f419b03dbdf7ee36c158bc224","modified":1556457980004},{"_id":"public/images/20180519163821.png","hash":"84a7b7a09128ddd2338c46ae63f702c8a85f4c28","modified":1556457980484},{"_id":"public/images/20180519171218.png","hash":"ee2e2b6da5601e238dc44b04dcfe535c8e3bc57f","modified":1556457980484},{"_id":"public/images/20180519171528.png","hash":"87bef7e2d3d42b5150be1ec79053e03e761006b3","modified":1556457980485},{"_id":"public/images/20180520101721.png","hash":"fe2ba7da6b919bc7d9cf60cda1f095eaa23c2df2","modified":1556457980485},{"_id":"public/images/1542620382678.gif","hash":"5d19fc164824f7bb12e6ddd4607ad8af648e7deb","modified":1556457980486},{"_id":"public/images/20180517161430.png","hash":"fa2a595ae58c161af2008803029afe8daec6073a","modified":1556457980486},{"_id":"public/images/微信图片_20181125213110.jpg","hash":"f4912845c985bb462f899d8a18ebb7f522bfb16c","modified":1556457980487},{"_id":"public/images/微信图片_20190202173819.jpg","hash":"fbfa54418f4d6850aea8111e9dd1180b6efc362f","modified":1556457980487},{"_id":"public/images/微信图片_20181125213118.jpg","hash":"5f9d61e9ee01608b16abc49e572f9c7ed8f18e38","modified":1556457980488},{"_id":"public/images/微信图片_20190202173852.jpg","hash":"b8be550009646adc1665a0cff3d906e0e5684025","modified":1556457980488},{"_id":"public/images/微信图片_20190202173857.jpg","hash":"e537e245ec76464f23042f44ebabed2c34a59e27","modified":1556457980489},{"_id":"public/images/微信图片_20190202173902.jpg","hash":"853fa37d70682a6e66324105809bb25557ff13cb","modified":1556457980489},{"_id":"public/images/微信截图_20190128134750.png","hash":"6ab6c557f591198ac28ee7fdae069e98329415c1","modified":1556457980489},{"_id":"public/images/微信截图_20190126215103.png","hash":"7618e3943067e782eb6d83fbc1f7add486bc5599","modified":1556457980490},{"_id":"public/images/微信截图_20190201171930.png","hash":"694b81111ea64646e2080e5d88d7ad011f6ecf11","modified":1556457980490},{"_id":"public/images/截图20180519172009.png","hash":"1c0a2aaebba807a5a630325253cc674c5efb0e38","modified":1556457980491},{"_id":"public/images/截图20180609161841.png","hash":"72e71f65c9b7d7ecfbfdc87b1d1ccfa7d835c065","modified":1556457980491},{"_id":"public/images/截图20180519172315.png","hash":"6b0eae17f93bdcedc799089b958c0de9cb0c0be0","modified":1556457980491},{"_id":"public/images/截图20180609161934.png","hash":"333d0cce6d054304f5a28c04ede16f8465c4af80","modified":1556457980492},{"_id":"public/images/微信图片_20190202174136.jpg","hash":"d02e6147b3b6ddbbe1a7afeb99d5823a5be19bf1","modified":1556457980492},{"_id":"public/images/截图20180609163513.png","hash":"655c6d9227367b6bbcc65a999d4e4f18881e14dd","modified":1556457980492},{"_id":"public/images/截图20180614142256.png","hash":"1279c63a0ab76cba66a651539a467a79da88668f","modified":1556457980493},{"_id":"public/images/截图20180614143059.png","hash":"198d7aa4304bccda9a7d2052c57c1c2142c2146c","modified":1556457980493},{"_id":"public/images/截图20180614143061.png","hash":"1608bea50c97eeccea678bdfbc02cf578b5a5f81","modified":1556457980493},{"_id":"public/images/截图20180615090453.png","hash":"5fa1fc51c19c115eba515fb0688a76950a4ae945","modified":1556457980494},{"_id":"public/images/截图20180614143060.gif","hash":"aa91e6da57e6f9c78c659c08bee7846d50f3ae47","modified":1556457980494},{"_id":"public/images/截图20180615093229.png","hash":"6ac4d91cec5b50588ce949ca05ea0a10788a124a","modified":1556457980495},{"_id":"public/images/截图20180615155759.png","hash":"52c972a590e0555952d105bdae35ad1cefedd9cf","modified":1556457980495},{"_id":"public/images/截图20180616161446.png","hash":"b510ea066680bce622a96918d1ed2358be8db5ff","modified":1556457980496},{"_id":"public/images/截图20180617130210.png","hash":"0d6238e250a66c0e1429e7be4f232ab1c95f529f","modified":1556457980496},{"_id":"public/images/截图20180618184625.png","hash":"fe4ca132fb81a135c183373a2dafc2e81c099c29","modified":1556457980497},{"_id":"public/images/截图20180618184736.png","hash":"f4bc20417f8a7108764893ad1d9766c1f548dd2e","modified":1556457980498},{"_id":"public/images/截图20180804182943.png","hash":"e6ee8895fad4345afc7de0c9ad257b414da2a3b4","modified":1556457980498},{"_id":"public/images/截图20180616161355.png","hash":"828644cf2889de2cce94b6373a00e1a8db6e27b7","modified":1556457980499},{"_id":"public/images/截图20180818144157.png","hash":"d78796f00b7a0d73a1e120f6dfc9fc233dbe8acd","modified":1556457980499},{"_id":"public/images/截图20180818144338.png","hash":"6515ab1a1a32e028ad267434df3a2f46a48539b6","modified":1556457980500},{"_id":"public/images/截图20181002175453.png","hash":"b2d2052d71e7439d312217231576afedd242ad13","modified":1556457980500},{"_id":"public/images/截图20180615090536.png","hash":"7d6d984b5c26f604b3981370cea5e07bf6f1da08","modified":1556457980500},{"_id":"public/images/截图20180804204452.png","hash":"3cf8d7339e3d0764b2a25badf0db8a74078e07a2","modified":1556457980501},{"_id":"public/images/截图20181003164515.png","hash":"0f8749a67173f5d6681512b9aaa26ee3a72a83e1","modified":1556457980501},{"_id":"public/images/截图20181002175558.png","hash":"2ac676bd02a6351cd1df8a04d92e9b34ea96a2b3","modified":1556457980501},{"_id":"public/images/截图20181003145142.png","hash":"2ba2f8300878622503f9b7a1530c034a5680ebe7","modified":1556457980502},{"_id":"public/images/微信图片_20190202173826.jpg","hash":"4f85192c8de0a0a717868b1bd7ce1358115c24c7","modified":1556457980502},{"_id":"public/images/截图20181003201618.png","hash":"e6dfe2468e325af813837b377ae97bca4a2290bf","modified":1556457980502},{"_id":"public/images/截图20181006154426.png","hash":"0551c07872f0f0a6fa780a57ceb0be739e61cae3","modified":1556457980502},{"_id":"public/images/截图20181006161411.png","hash":"24b73ce50c614068674b874872b16d5eb45b1665","modified":1556457980503},{"_id":"public/images/截图20181006162815.png","hash":"cfa09f90f7366c95f90f955d07d9a1c664573512","modified":1556457980503},{"_id":"public/images/截图20181006163246.png","hash":"f43c91761f5dbda4e0416e521dc68796dc463e68","modified":1556457980503},{"_id":"public/images/截图20181006163413.png","hash":"9bdb40f20a7fea47f32bfa5fae6fda9a17c22c54","modified":1556457980504},{"_id":"public/images/截图20181006165344.png","hash":"52d954734d820dcdb8a8e3eaffb651fe3d0de8bb","modified":1556457980504},{"_id":"public/images/截图20181006165741.png","hash":"b8204fb2e01bf44a9c567c7ee1f48de7cd6c96e4","modified":1556457980504},{"_id":"public/images/截图20181006165945.png","hash":"e05480a1b8b40c197ec6c349360d3fc0affcd9da","modified":1556457980504},{"_id":"public/images/截图20181006173913.png","hash":"bfb7b1bfac83474ae4f1e964ea3cfaf67cb0c6f6","modified":1556457980505},{"_id":"public/images/截图20181006180430.png","hash":"1806520849cd517c9da19d259ebb259c3d269408","modified":1556457980505},{"_id":"public/images/截图20181006180631.png","hash":"c81569bc3e5e23232bc0bc9f2cdb6f18d7fefd58","modified":1556457980505},{"_id":"public/images/截图20181006180828.png","hash":"c6648e868dc2ecb4ed65cfbb1a4e0bfd876bbe8f","modified":1556457980506},{"_id":"public/images/截图20181006210753.png","hash":"4461c27669f11e4904e75ef6ce239177c6684df3","modified":1556457980506},{"_id":"public/images/截图20181006173812.png","hash":"6642a920bf004ac9c865445bd516ded3eb881ebf","modified":1556457980507},{"_id":"public/images/截图20181119171728.png","hash":"e64a8613bdd93884131cb646786184d8b989976c","modified":1556457980507},{"_id":"public/images/截图20181125140044.png","hash":"22e123384e5cbe93ad70eac59946013c02662597","modified":1556457980507},{"_id":"public/images/截图20181125140603.png","hash":"229e30cf89352afcac94b4627822bc709467223e","modified":1556457980508},{"_id":"public/images/截图20181006172654.png","hash":"f323c8106260aec16ed7e91fd88387cbd871d589","modified":1556457980508},{"_id":"public/images/截图20181004204524.png","hash":"ad538d0afd05b846946f6fb6f3b004cfbad13c8a","modified":1556457980508},{"_id":"public/images/截图20180804183017.png","hash":"0f2ff80e01571dfd1007a12eb16f7cffb3c4debd","modified":1556457980508},{"_id":"public/images/20180517162130.png","hash":"097b7b83e21905ef58514943c63fec8a7e297b7b","modified":1556457980509},{"_id":"public/images/截图20181004205221.png","hash":"9ff3c58f6deabe7f27945e36f07415b8b45cb5a8","modified":1556457980509},{"_id":"public/images/original/微信图片_20190202173819.jpg","hash":"4623f978b15202c039bae8970731509dbea8dc61","modified":1556457980509},{"_id":"public/images/original/微信图片_20190202173857.jpg","hash":"11141f906d68a79db66cb4f2118934ccde9273ad","modified":1556457980509},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1556457980510},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1556457980510},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1556457980510},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1556457980511},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1556457980511},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1556457980511},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1556457980511},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1556457980512},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556457980512},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1556457980512},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556457980513},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1556457980513},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1556457980514},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1556457980515},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1556457980515},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1556457980515},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1556457980516},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1556457980516},{"_id":"public/images/original/微信图片_20190202173826.jpg","hash":"b7acff51c94bc0c42daf0a29e183314422eaffb9","modified":1556457980517},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1556457980517},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1556457980518},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1556457980518},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1556457980519},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1556457980519},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1556457980520},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1556457980520},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1556457980521},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1556457980521},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1556457980522},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1556457980522},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1556457980522},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1556457980522},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1556457980523},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1556457980523},{"_id":"public/images/20180519153604.png","hash":"7bc804c650735f5b52835f6fb782a04f181f8094","modified":1556457985383},{"_id":"public/images/20180520102405.png","hash":"b8e7e67fe1ad6869f29da1343ff3c8d09fee5b3f","modified":1556457985385},{"_id":"public/images/截图20190427171841.png","hash":"f20eb8288485ff420827bd4e20931b45339e92f0","modified":1556457985396},{"_id":"public/images/截图20190427204954.png","hash":"0b9d94b1d74254c520e2edc6aad4670bc6b124f8","modified":1556457985398},{"_id":"public/images/截图20190427210224.png","hash":"0eeb0fb41334a835f6e4946c78bdc44cd8735a0c","modified":1556457985398},{"_id":"public/images/截图20190428205446.png","hash":"e6ebb547147a4e92611ec25583cf10ea224b403b","modified":1556457985399},{"_id":"public/images/original/微信图片_20190202173902.jpg","hash":"9b947937f4a41a711f51d0192b165ac377b60a82","modified":1556457985399},{"_id":"public/images/original/微信图片_20190202174136.jpg","hash":"a99b5f0f05d811ce5275548492e2f60f011b9984","modified":1556457985399},{"_id":"public/images/original/微信图片_20190202173852.jpg","hash":"7e9bd16a20e2c8554788d3e5a3733e2469bb2480","modified":1556457985400},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1556457985400},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1556457985400},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1556457985508},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1556457985509},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1556457985521},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1556457985521},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1556457985521},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1556457985522},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1556457985522},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1556457985522},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1556457985523},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1556457985523},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1556457985523},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1556457985523},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1556457985524},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1556457985524},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1556457985524},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"b4afe2b8944b676c011d87db55f1ca9b5e6f94e5","modified":1556457985524},{"_id":"public/lib/fastclick/README.html","hash":"291efd095dc112ef3806bf9ca25a30d49072090f","modified":1556457985525},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1556457985525},{"_id":"public/lib/jquery_lazyload/README.html","hash":"c90af9fd6587ed3dbd932e7bfd1d3a2b61660777","modified":1556457985525},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1556457985526},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1556457985526},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1556457985526},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1556457985526},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1556457985527},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1556457985527},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1556457985527},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1556457985528},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1556457985528},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1556457985528},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1556457985528},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1556457985529},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1556457985529},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1556457985530},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1556457985530},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1556457985530},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1556457985531},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1556457985531},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1556457985531},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1556457985532},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1556457985532},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1556457985532},{"_id":"public/css/main.css","hash":"cba2850abd8456f0de3cb31cab7577d146fc132d","modified":1556457985532},{"_id":"public/images/1542536446656.gif","hash":"cb0558cf8cc2a1d9f94c7f0577cca0a5ca8728b4","modified":1556457985533},{"_id":"public/images/1542536827531.gif","hash":"ee8a94cf64a27685c8a9fd9f171a7bd85b327d6d","modified":1556457985533},{"_id":"public/images/微信截图_20190201171932.gif","hash":"be854fb85690b7dcccf9c66a8d80237d74d6f213","modified":1556457985533},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1556457985534},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1556457985534},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1556457985535},{"_id":"public/js/src/motion.js","hash":"19fd9c3dfbd3474fc0570dd49becab71ac31087f","modified":1556457985756},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1556457985758},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1556457985769},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1556457985770},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1556457985770},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1556457985771},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1556457985771},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1556457985772},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1556457985970},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1556457985971},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1556457986083},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1556457986084},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1556457986418},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1556457986425},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1556457986430},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1556457986431},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1556457986431},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1556457986432},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1556457986432},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1556457987468},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1556457987469},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1556457987608},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1556457987608},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1556457987608},{"_id":"public/images/1543630801931.gif","hash":"f31aff0e3bd52aa2128d84e1d3847d5055397524","modified":1556457987902},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1556457988058},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1556457988058},{"_id":"public/images/1543654707987.gif","hash":"cd6f4aed45d7f6cae76ff216b0594e9fd8eb59ca","modified":1556457988288},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1556457988325},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1556457988370},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1556457988386}],"Category":[{"name":"javascript","_id":"cjv0yvimb0007borpsyiw7rcr"},{"name":"career","_id":"cjv0yvimt000cborpnvi6ua29"},{"name":"css","_id":"cjv0yvin6000hborpko6xjpsg"},{"name":"js","_id":"cjv0yvinj000oborpa6951yhf"},{"name":"software","_id":"cjv0yvio8000zborp8iixhxsq"},{"name":"html","_id":"cjv0yviol0017borp0kv1e1fl"},{"name":"frame","_id":"cjv0yvipq001xborp3kzs2wpb"},{"name":"debug","_id":"cjv0yviqh0024borpjeo3obwb"},{"name":"summary","_id":"cjv0yvirp002cborphck64c69"},{"name":"http","_id":"cjv0yvish002rborpug8xvsgq"},{"name":"Web Performance Optimization","_id":"cjv0yvisz0032borp3p80c3we"}],"Data":[],"Page":[{"title":"404 Not Found","_content":"\nSorry for that, please try the `Search` button above! Hope you find it!\n","source":"404.md","raw":"---\ntitle: 404 Not Found\n---\n\nSorry for that, please try the `Search` button above! Hope you find it!\n","date":"2019-02-14T14:15:54.128Z","updated":"2018-06-18T02:52:20.775Z","path":"404.html","comments":1,"layout":"page","_id":"cjv0yvi430000borp2bmup3ee","content":"<p>Sorry for that, please try the <code>Search</code> button above! Hope you find it!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Sorry for that, please try the <code>Search</code> button above! Hope you find it!</p>\n"},{"title":"categories","type":"categories","date":"2018-05-21T01:38:16.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: categories\ndate: 2018-05-21 09:38:16\n---\n","updated":"2018-05-21T01:42:20.984Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjv0yvilz0003borp8tt6ccph","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","date":"2018-05-21T01:37:35.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\ndate: 2018-05-21 09:37:35\n---\n","updated":"2018-05-21T01:42:23.056Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjv0yvim40005borpq6m3j2ju","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"_content":"","source":"_drafts/resume.md","raw":"","slug":"resume","published":0,"date":"2019-02-14T14:15:54.822Z","updated":"2018-06-07T08:58:19.605Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0yvi4z0001borpl160rucs","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"# Questions in interview\n\n1.  Usual compatible problem\n2.  Fit mobile font\n3.  Optimization in frontend\n\n4.  Core of browser\n    Chrome - Webkit-Blink - V8\n    Safari - Webkit\n    Firefox - Gecko\n    IE - Trident\n    Edge - EdgeHTML\n    Opera - Webkit-Blink\n","source":"_drafts/interview.md","raw":"# Questions in interview\n\n1.  Usual compatible problem\n2.  Fit mobile font\n3.  Optimization in frontend\n\n4.  Core of browser\n    Chrome - Webkit-Blink - V8\n    Safari - Webkit\n    Firefox - Gecko\n    IE - Trident\n    Edge - EdgeHTML\n    Opera - Webkit-Blink\n","slug":"interview","published":0,"date":"2019-02-14T14:15:54.631Z","updated":"2018-06-18T12:48:04.783Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0yvilw0002borp1h75li1o","content":"<h1>Questions in interview</h1>\n<ol>\n<li>\n<p>Usual compatible problem</p>\n</li>\n<li>\n<p>Fit mobile font</p>\n</li>\n<li>\n<p>Optimization in frontend</p>\n</li>\n<li>\n<p>Core of browser\nChrome - Webkit-Blink - V8\nSafari - Webkit\nFirefox - Gecko\nIE - Trident\nEdge - EdgeHTML\nOpera - Webkit-Blink</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1>Questions in interview</h1>\n<ol>\n<li>\n<p>Usual compatible problem</p>\n</li>\n<li>\n<p>Fit mobile font</p>\n</li>\n<li>\n<p>Optimization in frontend</p>\n</li>\n<li>\n<p>Core of browser\nChrome - Webkit-Blink - V8\nSafari - Webkit\nFirefox - Gecko\nIE - Trident\nEdge - EdgeHTML\nOpera - Webkit-Blink</p>\n</li>\n</ol>\n"},{"title":"Is-Event-Handler-Asynchronous","comments":1,"date":"2018-05-27T05:47:51.000Z","_content":"\n## Preface\n\nThere is a long time when I think event handler is a asynchronous operation. I don't know\n\n## Steps\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8aGhZQkoFbQ\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n## Ending\n\n## Reference\n\n[Philip Roberts: What Is Event Loop in JavaScript](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n\n[Tasks, microtasks, queues and schedules](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n\n[Asynchronous or Synchronous calling of event handlers in javascript](https://stackoverflow.com/questions/15924014/asynchronous-or-synchronous-calling-of-event-handlers-in-javascript)\n\n[Synchronous and asynchronous events](https://w3c.github.io/uievents/#sync-async)\n","source":"_drafts/is-event-handler-asynchronous.md","raw":"---\ntitle: Is-Event-Handler-Asynchronous\ntags:\n- event-handler\n- asynchronous\ncategories: javascript\ncomments: true\ndate: 2018-05-27 13:47:51\n---\n\n## Preface\n\nThere is a long time when I think event handler is a asynchronous operation. I don't know\n\n## Steps\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8aGhZQkoFbQ\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n## Ending\n\n## Reference\n\n[Philip Roberts: What Is Event Loop in JavaScript](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n\n[Tasks, microtasks, queues and schedules](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n\n[Asynchronous or Synchronous calling of event handlers in javascript](https://stackoverflow.com/questions/15924014/asynchronous-or-synchronous-calling-of-event-handlers-in-javascript)\n\n[Synchronous and asynchronous events](https://w3c.github.io/uievents/#sync-async)\n","slug":"is-event-handler-asynchronous","published":0,"updated":"2018-06-10T04:56:15.344Z","layout":"post","photos":[],"link":"","_id":"cjv0yvim20004borpwfrc32sp","content":"<h2>Preface</h2>\n<p>There is a long time when I think event handler is a asynchronous operation. I don't know</p>\n<h2>Steps</h2>\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/8aGhZQkoFbQ&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<p><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\" target=\"_blank\" rel=\"noopener\">Philip Roberts: What Is Event Loop in JavaScript</a></p>\n<p><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">Tasks, microtasks, queues and schedules</a></p>\n<p><a href=\"https://stackoverflow.com/questions/15924014/asynchronous-or-synchronous-calling-of-event-handlers-in-javascript\" target=\"_blank\" rel=\"noopener\">Asynchronous or Synchronous calling of event handlers in javascript</a></p>\n<p><a href=\"https://w3c.github.io/uievents/#sync-async\" target=\"_blank\" rel=\"noopener\">Synchronous and asynchronous events</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>There is a long time when I think event handler is a asynchronous operation. I don't know</p>\n<h2>Steps</h2>\n<p>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/8aGhZQkoFbQ&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<p><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\" target=\"_blank\" rel=\"noopener\">Philip Roberts: What Is Event Loop in JavaScript</a></p>\n<p><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">Tasks, microtasks, queues and schedules</a></p>\n<p><a href=\"https://stackoverflow.com/questions/15924014/asynchronous-or-synchronous-calling-of-event-handlers-in-javascript\" target=\"_blank\" rel=\"noopener\">Asynchronous or Synchronous calling of event handlers in javascript</a></p>\n<p><a href=\"https://w3c.github.io/uievents/#sync-async\" target=\"_blank\" rel=\"noopener\">Synchronous and asynchronous events</a></p>\n"},{"title":"Skills in Demand?","comments":1,"date":"2018-06-08T07:14:02.000Z","_content":"\n## Preface\n\n# FrontEnd Skill\n\n- last update time: 2018/6/20 10:20 5-10K lagou.com\n  <!-- Array.from($('.item_con_list')[1].children).map(ele => {\n   return Array.from(ele.getElementsByTagName('*')).filter(child => {\n     return child.tagName.toLowerCase() === 'a'&&child.classList.contains('position_link')\n    })[0]\n  }).forEach(e=>e.click()) -->\n- last update time: 2018/6/21 10:10 5-10K zhipin.com\n  <!-- $('.job-primary')\n    .toArray()\n    .forEach((ele, index) => {\n      setTimeout(function() {\n        console.log(ele)\n        ele.click()\n      }, 1000 * index)\n    }) -->\n\n## HTML\n\n- HTML5\n- SEO\n\n## CSS\n\n- CSS3\n- Less/Sass\n- Bootstrap\n\n## Javascript\n\n- ES6\n- Typescript\n\n## Platform\n\n- PC/Mobile\n- Wechat\n\n## Frame\n\n- jQuery\n- Vue/React/Angular\n- easyui\n- Restful\n- Echart/D3/EasyUI\n- Backbone\n- apicloud\n- swiper\n- Seajs\n- Hbuild\n- ExtJS\n- Element-UI\n- jQuery Mobile\n\n## Tool\n\n- git\n- Webpack/Gulp/Grunt\n- Require.js\n\n## Backend\n\n- at least know one\n- Node\n- Java\n- Php\n\n## Background\n\n- data Structure\n\n## Design\n\n- Ant-Design\n\n## Database\n\n- mysql\n- oracle\n","source":"_drafts/skills-in-demand.md","raw":"---\ntitle: Skills in Demand?\ntags:\n- skill\n- job\ncategories: career\ncomments: true\ndate: 2018-06-08 15:14:02\n---\n\n## Preface\n\n# FrontEnd Skill\n\n- last update time: 2018/6/20 10:20 5-10K lagou.com\n  <!-- Array.from($('.item_con_list')[1].children).map(ele => {\n   return Array.from(ele.getElementsByTagName('*')).filter(child => {\n     return child.tagName.toLowerCase() === 'a'&&child.classList.contains('position_link')\n    })[0]\n  }).forEach(e=>e.click()) -->\n- last update time: 2018/6/21 10:10 5-10K zhipin.com\n  <!-- $('.job-primary')\n    .toArray()\n    .forEach((ele, index) => {\n      setTimeout(function() {\n        console.log(ele)\n        ele.click()\n      }, 1000 * index)\n    }) -->\n\n## HTML\n\n- HTML5\n- SEO\n\n## CSS\n\n- CSS3\n- Less/Sass\n- Bootstrap\n\n## Javascript\n\n- ES6\n- Typescript\n\n## Platform\n\n- PC/Mobile\n- Wechat\n\n## Frame\n\n- jQuery\n- Vue/React/Angular\n- easyui\n- Restful\n- Echart/D3/EasyUI\n- Backbone\n- apicloud\n- swiper\n- Seajs\n- Hbuild\n- ExtJS\n- Element-UI\n- jQuery Mobile\n\n## Tool\n\n- git\n- Webpack/Gulp/Grunt\n- Require.js\n\n## Backend\n\n- at least know one\n- Node\n- Java\n- Php\n\n## Background\n\n- data Structure\n\n## Design\n\n- Ant-Design\n\n## Database\n\n- mysql\n- oracle\n","slug":"skills-in-demand","published":0,"updated":"2018-06-21T12:44:17.929Z","layout":"post","photos":[],"link":"","_id":"cjv0yvim70006borpt7k6wxve","content":"<h2>Preface</h2>\n<h1>FrontEnd Skill</h1>\n<ul>\n<li>last update time: 2018/6/20 10:20 5-10K lagou.com\n&lt;!-- Array.from($('.item_con_list')[1].children).map(ele =&gt; {\nreturn Array.from(ele.getElementsByTagName('*')).filter(child =&gt; {\nreturn child.tagName.toLowerCase() === 'a'&amp;&amp;child.classList.contains('position_link')\n})[0]\n}).forEach(e=&gt;e.click()) --&gt;</li>\n<li>last update time: 2018/6/21 10:10 5-10K zhipin.com\n&lt;!-- $('.job-primary')\n.toArray()\n.forEach((ele, index) =&gt; {\nsetTimeout(function() {\nconsole.log(ele)\nele.click()\n}, 1000 * index)\n}) --&gt;</li>\n</ul>\n<h2>HTML</h2>\n<ul>\n<li>HTML5</li>\n<li>SEO</li>\n</ul>\n<h2>CSS</h2>\n<ul>\n<li>CSS3</li>\n<li>Less/Sass</li>\n<li>Bootstrap</li>\n</ul>\n<h2>Javascript</h2>\n<ul>\n<li>ES6</li>\n<li>Typescript</li>\n</ul>\n<h2>Platform</h2>\n<ul>\n<li>PC/Mobile</li>\n<li>Wechat</li>\n</ul>\n<h2>Frame</h2>\n<ul>\n<li>jQuery</li>\n<li>Vue/React/Angular</li>\n<li>easyui</li>\n<li>Restful</li>\n<li>Echart/D3/EasyUI</li>\n<li>Backbone</li>\n<li>apicloud</li>\n<li>swiper</li>\n<li>Seajs</li>\n<li>Hbuild</li>\n<li>ExtJS</li>\n<li>Element-UI</li>\n<li>jQuery Mobile</li>\n</ul>\n<h2>Tool</h2>\n<ul>\n<li>git</li>\n<li>Webpack/Gulp/Grunt</li>\n<li>Require.js</li>\n</ul>\n<h2>Backend</h2>\n<ul>\n<li>at least know one</li>\n<li>Node</li>\n<li>Java</li>\n<li>Php</li>\n</ul>\n<h2>Background</h2>\n<ul>\n<li>data Structure</li>\n</ul>\n<h2>Design</h2>\n<ul>\n<li>Ant-Design</li>\n</ul>\n<h2>Database</h2>\n<ul>\n<li>mysql</li>\n<li>oracle</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<h1>FrontEnd Skill</h1>\n<ul>\n<li>last update time: 2018/6/20 10:20 5-10K lagou.com\n&lt;!-- Array.from($('.item_con_list')[1].children).map(ele =&gt; {\nreturn Array.from(ele.getElementsByTagName('*')).filter(child =&gt; {\nreturn child.tagName.toLowerCase() === 'a'&amp;&amp;child.classList.contains('position_link')\n})[0]\n}).forEach(e=&gt;e.click()) --&gt;</li>\n<li>last update time: 2018/6/21 10:10 5-10K zhipin.com\n&lt;!-- $('.job-primary')\n.toArray()\n.forEach((ele, index) =&gt; {\nsetTimeout(function() {\nconsole.log(ele)\nele.click()\n}, 1000 * index)\n}) --&gt;</li>\n</ul>\n<h2>HTML</h2>\n<ul>\n<li>HTML5</li>\n<li>SEO</li>\n</ul>\n<h2>CSS</h2>\n<ul>\n<li>CSS3</li>\n<li>Less/Sass</li>\n<li>Bootstrap</li>\n</ul>\n<h2>Javascript</h2>\n<ul>\n<li>ES6</li>\n<li>Typescript</li>\n</ul>\n<h2>Platform</h2>\n<ul>\n<li>PC/Mobile</li>\n<li>Wechat</li>\n</ul>\n<h2>Frame</h2>\n<ul>\n<li>jQuery</li>\n<li>Vue/React/Angular</li>\n<li>easyui</li>\n<li>Restful</li>\n<li>Echart/D3/EasyUI</li>\n<li>Backbone</li>\n<li>apicloud</li>\n<li>swiper</li>\n<li>Seajs</li>\n<li>Hbuild</li>\n<li>ExtJS</li>\n<li>Element-UI</li>\n<li>jQuery Mobile</li>\n</ul>\n<h2>Tool</h2>\n<ul>\n<li>git</li>\n<li>Webpack/Gulp/Grunt</li>\n<li>Require.js</li>\n</ul>\n<h2>Backend</h2>\n<ul>\n<li>at least know one</li>\n<li>Node</li>\n<li>Java</li>\n<li>Php</li>\n</ul>\n<h2>Background</h2>\n<ul>\n<li>data Structure</li>\n</ul>\n<h2>Design</h2>\n<ul>\n<li>Ant-Design</li>\n</ul>\n<h2>Database</h2>\n<ul>\n<li>mysql</li>\n<li>oracle</li>\n</ul>\n"},{"title":"Understand vertical-align According to Specifications","date":"2018-05-19T16:00:00.000Z","comments":1,"_content":"\n## Preface\n\nI have been confused about `vertical-align` for a long time. At last,I decided to learn it radically according to specifications and demos.\n\n## Preparations\n\nBefore getting into demos,you have to do some preparations listed below:\n\n1.  Put [specifications][specifications] and [errata][errata] on your hand.\n2.  Code below lists the **main code** of the demos\n\n```html\n<div class=\"body\">\n  <span class=\"wrapper\">\n    first demo begins:\n    <span class=\"inline text-wrapper\">\n      text node of span with inline\n    </span>\n    second demo begins:\n    <span class=\"inline-block text-wrapper\">\n      text node of span with inline-block\n    </span>\n    third demo begins with inline image:\n    <img class=\"inline img\" src=\"https://avatars3.githubusercontent.com/u/23273077\" >\n    forth demo begins with inline-block image:\n    <img class=\"inline-block img\" src=\"https://avatars3.githubusercontent.com/u/23273077\" >\n    fifth demo begins: <br>\n    <span class=\"inline img-wrapper\">\n      <img src=\"https://avatars3.githubusercontent.com/u/23273077\" >\n      text node and img child of span with inline\n    </span>\n    sixth demo begins:\n    <span class=\"inline-block img-wrapper\">\n      <img src=\"https://avatars3.githubusercontent.com/u/23273077\" >\n      text node and img child of span with inline-block\n    </span>\n  </span>\n</div>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\n.body {\n  font-family: Microsoft Yahei;\n  font-size: 25px;\n  background-color: lightblue;\n  height: 400px;\n  width: 750px;\n  line-height: 2;\n  vertical-align: baseline;\n}\n.body span {\n  background-color: pink;\n}\n.body img {\n  width: 50px;\n  height: 50px;\n}\n.body .inline,\n.body .inline-block {\n  background-color: orange;\n}\n.body .inline {\n  display: inline;\n}\n.body .inline-block {\n  display: inline-block;\n  height: 50px;\n}\n```\n\nSo,the demo starts like this:\n\n![20180519153604](../images/20180519153604.png)\n\n**Attention:** the **main code** is always used and never change through the whole demo. However ,it may change between demos.\n\nFor example,in **Demo1** or **Demo2**,it always keeps the same while **main code** in **Demo1** may be different from **main code** in **Demo2**.If any change happens,changes will be listed just under the subtitle with **Attention:**.\n\n3.  When we were testing,what we do is just adding some **test code** to the **main code**.Usually,the **test code** is like code below:\n\n```css\n.inline-block.img-wrapper > img {\n  vertical-align: baseline;\n}\n```\n\nAnd we just modify the value of `vertical-align`,and try to explain what happened and why it happened like that.\n\nAfter we have tested all the values of `vertical-align` for an element,then we delete the **test code** and try next demo.\n\nFor example,we have finished the test of element `.inline-block.img-wrapper > img`,then we prepare to test element `.inline-block.img-wrapper`.So,all of the **test code** would be:\n\n```css\n.inline-block.img-wrapper {\n  vertical-align: baseline;\n}\n```\n\nAnd the **main code** still the same,never change!Doing this just for the accuracy of the test.\n\nIs it clear now?If not,read it again or give me issues.\n\nNow,let's start:\n\n## Demo1\n\n1.  `.inline.text-wrapper`,`vertical-align`\n\nBefore we test all the values,we have to figure something out.\n\nAccording to specifications,for element `.inline.text-wrapper` ,:\n\n> The following values only have meaning with respect to a parent inline element, or to the strut of a parent block container element.\n\n* the following values only have meaning with respect to`.wrapper`.\n\n> In the following definitions, for inline non-replaced elements, the box used for alignment is the box whose height is the 'line-height' (containing the box's glyphs and the half-leading on each side, see above). For all other elements, the box used for alignment is the margin box.\n\n* the box used for alignment is the box whose height is the 'line-height' (32px)\n\n* As you see,\n\n![20180519163821](../images/20180519163821.png)\n\n1.  `baseline` of `.wrapper` is the red line\n2.  `sub` of `.wrapper` is a little lower than `baseline`,can barely think that it is the bottom of the `content area`.\n3.  `super` of `.wrapper`is a little higher than `baseline`,can barely think that it is the yellow line.\n4.  `middle` of `.wrapper` is the green line.\n5.  `content area` of `.wrapper` is the blue box,`text-top` and `text-bottom` is the top and bottom of `content area`.\n6.  `box used for alignment` is the brown box.\n\nAfter point these out,the result of `vertical-align` can be more clear:\n\n```css\n.inline.text-wrapper {\n  vertical-align: sub;\n}\n```\n\n![20180519171218](./images/20180519171218.png)\n\n```css\n.inline.text-wrapper {\n  vertical-align: super;\n}\n```\n\n![20180519171528](./images/20180519171528.png)\n\n```css\n.inline.text-wrapper {\n  vertical-align: middle;\n}\n```\n\n![截图20180519172009](./images/截图20180519172009.png)\n\n```css\n.inline.text-wrapper {\n  vertical-align: text-top;\n}\n```\n\n![截图20180519172315](./images/截图20180519172315.png)\n\n[specifications]: https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html\n[errata]: http://www.w3.org/Style/css2-updates/REC-CSS2-20110607-errata.html\n","source":"_drafts/understand-vertical-align-according-to-specifications.md","raw":"---\ntitle: Understand vertical-align According to Specifications\ndate: 2018-05-20\ncomments: true\ntags: \n- specifications\n- vertical-align\ncategories: css\n---\n\n## Preface\n\nI have been confused about `vertical-align` for a long time. At last,I decided to learn it radically according to specifications and demos.\n\n## Preparations\n\nBefore getting into demos,you have to do some preparations listed below:\n\n1.  Put [specifications][specifications] and [errata][errata] on your hand.\n2.  Code below lists the **main code** of the demos\n\n```html\n<div class=\"body\">\n  <span class=\"wrapper\">\n    first demo begins:\n    <span class=\"inline text-wrapper\">\n      text node of span with inline\n    </span>\n    second demo begins:\n    <span class=\"inline-block text-wrapper\">\n      text node of span with inline-block\n    </span>\n    third demo begins with inline image:\n    <img class=\"inline img\" src=\"https://avatars3.githubusercontent.com/u/23273077\" >\n    forth demo begins with inline-block image:\n    <img class=\"inline-block img\" src=\"https://avatars3.githubusercontent.com/u/23273077\" >\n    fifth demo begins: <br>\n    <span class=\"inline img-wrapper\">\n      <img src=\"https://avatars3.githubusercontent.com/u/23273077\" >\n      text node and img child of span with inline\n    </span>\n    sixth demo begins:\n    <span class=\"inline-block img-wrapper\">\n      <img src=\"https://avatars3.githubusercontent.com/u/23273077\" >\n      text node and img child of span with inline-block\n    </span>\n  </span>\n</div>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\n.body {\n  font-family: Microsoft Yahei;\n  font-size: 25px;\n  background-color: lightblue;\n  height: 400px;\n  width: 750px;\n  line-height: 2;\n  vertical-align: baseline;\n}\n.body span {\n  background-color: pink;\n}\n.body img {\n  width: 50px;\n  height: 50px;\n}\n.body .inline,\n.body .inline-block {\n  background-color: orange;\n}\n.body .inline {\n  display: inline;\n}\n.body .inline-block {\n  display: inline-block;\n  height: 50px;\n}\n```\n\nSo,the demo starts like this:\n\n![20180519153604](../images/20180519153604.png)\n\n**Attention:** the **main code** is always used and never change through the whole demo. However ,it may change between demos.\n\nFor example,in **Demo1** or **Demo2**,it always keeps the same while **main code** in **Demo1** may be different from **main code** in **Demo2**.If any change happens,changes will be listed just under the subtitle with **Attention:**.\n\n3.  When we were testing,what we do is just adding some **test code** to the **main code**.Usually,the **test code** is like code below:\n\n```css\n.inline-block.img-wrapper > img {\n  vertical-align: baseline;\n}\n```\n\nAnd we just modify the value of `vertical-align`,and try to explain what happened and why it happened like that.\n\nAfter we have tested all the values of `vertical-align` for an element,then we delete the **test code** and try next demo.\n\nFor example,we have finished the test of element `.inline-block.img-wrapper > img`,then we prepare to test element `.inline-block.img-wrapper`.So,all of the **test code** would be:\n\n```css\n.inline-block.img-wrapper {\n  vertical-align: baseline;\n}\n```\n\nAnd the **main code** still the same,never change!Doing this just for the accuracy of the test.\n\nIs it clear now?If not,read it again or give me issues.\n\nNow,let's start:\n\n## Demo1\n\n1.  `.inline.text-wrapper`,`vertical-align`\n\nBefore we test all the values,we have to figure something out.\n\nAccording to specifications,for element `.inline.text-wrapper` ,:\n\n> The following values only have meaning with respect to a parent inline element, or to the strut of a parent block container element.\n\n* the following values only have meaning with respect to`.wrapper`.\n\n> In the following definitions, for inline non-replaced elements, the box used for alignment is the box whose height is the 'line-height' (containing the box's glyphs and the half-leading on each side, see above). For all other elements, the box used for alignment is the margin box.\n\n* the box used for alignment is the box whose height is the 'line-height' (32px)\n\n* As you see,\n\n![20180519163821](../images/20180519163821.png)\n\n1.  `baseline` of `.wrapper` is the red line\n2.  `sub` of `.wrapper` is a little lower than `baseline`,can barely think that it is the bottom of the `content area`.\n3.  `super` of `.wrapper`is a little higher than `baseline`,can barely think that it is the yellow line.\n4.  `middle` of `.wrapper` is the green line.\n5.  `content area` of `.wrapper` is the blue box,`text-top` and `text-bottom` is the top and bottom of `content area`.\n6.  `box used for alignment` is the brown box.\n\nAfter point these out,the result of `vertical-align` can be more clear:\n\n```css\n.inline.text-wrapper {\n  vertical-align: sub;\n}\n```\n\n![20180519171218](./images/20180519171218.png)\n\n```css\n.inline.text-wrapper {\n  vertical-align: super;\n}\n```\n\n![20180519171528](./images/20180519171528.png)\n\n```css\n.inline.text-wrapper {\n  vertical-align: middle;\n}\n```\n\n![截图20180519172009](./images/截图20180519172009.png)\n\n```css\n.inline.text-wrapper {\n  vertical-align: text-top;\n}\n```\n\n![截图20180519172315](./images/截图20180519172315.png)\n\n[specifications]: https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html\n[errata]: http://www.w3.org/Style/css2-updates/REC-CSS2-20110607-errata.html\n","slug":"understand-vertical-align-according-to-specifications","published":0,"updated":"2018-05-22T05:38:22.236Z","layout":"post","photos":[],"link":"","_id":"cjv0yvime0009borpmygfm547","content":"<h2>Preface</h2>\n<p>I have been confused about <code>vertical-align</code> for a long time. At last,I decided to learn it radically according to specifications and demos.</p>\n<h2>Preparations</h2>\n<p>Before getting into demos,you have to do some preparations listed below:</p>\n<ol>\n<li>Put <a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html\" target=\"_blank\" rel=\"noopener\">specifications</a> and <a href=\"http://www.w3.org/Style/css2-updates/REC-CSS2-20110607-errata.html\" target=\"_blank\" rel=\"noopener\">errata</a> on your hand.</li>\n<li>Code below lists the <strong>main code</strong> of the demos</li>\n</ol>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"body\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">    first demo begins:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline text-wrapper\"</span>&gt;</span></span><br><span class=\"line\">      text node of span with inline</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    second demo begins:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline-block text-wrapper\"</span>&gt;</span></span><br><span class=\"line\">      text node of span with inline-block</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    third demo begins with inline image:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline img\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://avatars3.githubusercontent.com/u/23273077\"</span> &gt;</span></span><br><span class=\"line\">    forth demo begins with inline-block image:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline-block img\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://avatars3.githubusercontent.com/u/23273077\"</span> &gt;</span></span><br><span class=\"line\">    fifth demo begins: <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline img-wrapper\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://avatars3.githubusercontent.com/u/23273077\"</span> &gt;</span></span><br><span class=\"line\">      text node and img child of span with inline</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    sixth demo begins:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline-block img-wrapper\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://avatars3.githubusercontent.com/u/23273077\"</span> &gt;</span></span><br><span class=\"line\">      text node and img child of span with inline-block</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: Microsoft Yahei;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: baseline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> <span class=\"selector-class\">.inline</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> <span class=\"selector-class\">.inline-block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: orange;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> <span class=\"selector-class\">.inline</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> <span class=\"selector-class\">.inline-block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>So,the demo starts like this:</p>\n<p><img src=\"../images/20180519153604.png\" alt=\"20180519153604\"></p>\n<p><strong>Attention:</strong> the <strong>main code</strong> is always used and never change through the whole demo. However ,it may change between demos.</p>\n<p>For example,in <strong>Demo1</strong> or <strong>Demo2</strong>,it always keeps the same while <strong>main code</strong> in <strong>Demo1</strong> may be different from <strong>main code</strong> in <strong>Demo2</strong>.If any change happens,changes will be listed just under the subtitle with <strong>Attention:</strong>.</p>\n<ol start=\"3\">\n<li>When we were testing,what we do is just adding some <strong>test code</strong> to the <strong>main code</strong>.Usually,the <strong>test code</strong> is like code below:</li>\n</ol>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inline-block</span><span class=\"selector-class\">.img-wrapper</span> &gt; <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: baseline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>And we just modify the value of <code>vertical-align</code>,and try to explain what happened and why it happened like that.</p>\n<p>After we have tested all the values of <code>vertical-align</code> for an element,then we delete the <strong>test code</strong> and try next demo.</p>\n<p>For example,we have finished the test of element <code>.inline-block.img-wrapper &gt; img</code>,then we prepare to test element <code>.inline-block.img-wrapper</code>.So,all of the <strong>test code</strong> would be:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inline-block</span><span class=\"selector-class\">.img-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: baseline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>And the <strong>main code</strong> still the same,never change!Doing this just for the accuracy of the test.</p>\n<p>Is it clear now?If not,read it again or give me issues.</p>\n<p>Now,let's start:</p>\n<h2>Demo1</h2>\n<ol>\n<li><code>.inline.text-wrapper</code>,<code>vertical-align</code></li>\n</ol>\n<p>Before we test all the values,we have to figure something out.</p>\n<p>According to specifications,for element <code>.inline.text-wrapper</code> ,:</p>\n<blockquote>\n<p>The following values only have meaning with respect to a parent inline element, or to the strut of a parent block container element.</p>\n</blockquote>\n<ul>\n<li>the following values only have meaning with respect to<code>.wrapper</code>.</li>\n</ul>\n<blockquote>\n<p>In the following definitions, for inline non-replaced elements, the box used for alignment is the box whose height is the 'line-height' (containing the box's glyphs and the half-leading on each side, see above). For all other elements, the box used for alignment is the margin box.</p>\n</blockquote>\n<ul>\n<li>\n<p>the box used for alignment is the box whose height is the 'line-height' (32px)</p>\n</li>\n<li>\n<p>As you see,</p>\n</li>\n</ul>\n<p><img src=\"../images/20180519163821.png\" alt=\"20180519163821\"></p>\n<ol>\n<li><code>baseline</code> of <code>.wrapper</code> is the red line</li>\n<li><code>sub</code> of <code>.wrapper</code> is a little lower than <code>baseline</code>,can barely think that it is the bottom of the <code>content area</code>.</li>\n<li><code>super</code> of <code>.wrapper</code>is a little higher than <code>baseline</code>,can barely think that it is the yellow line.</li>\n<li><code>middle</code> of <code>.wrapper</code> is the green line.</li>\n<li><code>content area</code> of <code>.wrapper</code> is the blue box,<code>text-top</code> and <code>text-bottom</code> is the top and bottom of <code>content area</code>.</li>\n<li><code>box used for alignment</code> is the brown box.</li>\n</ol>\n<p>After point these out,the result of <code>vertical-align</code> can be more clear:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inline</span><span class=\"selector-class\">.text-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: sub;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./images/20180519171218.png\" alt=\"20180519171218\"></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inline</span><span class=\"selector-class\">.text-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: super;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./images/20180519171528.png\" alt=\"20180519171528\"></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inline</span><span class=\"selector-class\">.text-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./images/%E6%88%AA%E5%9B%BE20180519172009.png\" alt=\"截图20180519172009\"></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inline</span><span class=\"selector-class\">.text-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: text-top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./images/%E6%88%AA%E5%9B%BE20180519172315.png\" alt=\"截图20180519172315\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>I have been confused about <code>vertical-align</code> for a long time. At last,I decided to learn it radically according to specifications and demos.</p>\n<h2>Preparations</h2>\n<p>Before getting into demos,you have to do some preparations listed below:</p>\n<ol>\n<li>Put <a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html\" target=\"_blank\" rel=\"noopener\">specifications</a> and <a href=\"http://www.w3.org/Style/css2-updates/REC-CSS2-20110607-errata.html\" target=\"_blank\" rel=\"noopener\">errata</a> on your hand.</li>\n<li>Code below lists the <strong>main code</strong> of the demos</li>\n</ol>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"body\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">    first demo begins:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline text-wrapper\"</span>&gt;</span></span><br><span class=\"line\">      text node of span with inline</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    second demo begins:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline-block text-wrapper\"</span>&gt;</span></span><br><span class=\"line\">      text node of span with inline-block</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    third demo begins with inline image:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline img\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://avatars3.githubusercontent.com/u/23273077\"</span> &gt;</span></span><br><span class=\"line\">    forth demo begins with inline-block image:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline-block img\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://avatars3.githubusercontent.com/u/23273077\"</span> &gt;</span></span><br><span class=\"line\">    fifth demo begins: <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline img-wrapper\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://avatars3.githubusercontent.com/u/23273077\"</span> &gt;</span></span><br><span class=\"line\">      text node and img child of span with inline</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    sixth demo begins:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline-block img-wrapper\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://avatars3.githubusercontent.com/u/23273077\"</span> &gt;</span></span><br><span class=\"line\">      text node and img child of span with inline-block</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: Microsoft Yahei;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: baseline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> <span class=\"selector-class\">.inline</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> <span class=\"selector-class\">.inline-block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: orange;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> <span class=\"selector-class\">.inline</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> <span class=\"selector-class\">.inline-block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>So,the demo starts like this:</p>\n<p><img src=\"../images/20180519153604.png\" alt=\"20180519153604\"></p>\n<p><strong>Attention:</strong> the <strong>main code</strong> is always used and never change through the whole demo. However ,it may change between demos.</p>\n<p>For example,in <strong>Demo1</strong> or <strong>Demo2</strong>,it always keeps the same while <strong>main code</strong> in <strong>Demo1</strong> may be different from <strong>main code</strong> in <strong>Demo2</strong>.If any change happens,changes will be listed just under the subtitle with <strong>Attention:</strong>.</p>\n<ol start=\"3\">\n<li>When we were testing,what we do is just adding some <strong>test code</strong> to the <strong>main code</strong>.Usually,the <strong>test code</strong> is like code below:</li>\n</ol>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inline-block</span><span class=\"selector-class\">.img-wrapper</span> &gt; <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: baseline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>And we just modify the value of <code>vertical-align</code>,and try to explain what happened and why it happened like that.</p>\n<p>After we have tested all the values of <code>vertical-align</code> for an element,then we delete the <strong>test code</strong> and try next demo.</p>\n<p>For example,we have finished the test of element <code>.inline-block.img-wrapper &gt; img</code>,then we prepare to test element <code>.inline-block.img-wrapper</code>.So,all of the <strong>test code</strong> would be:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inline-block</span><span class=\"selector-class\">.img-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: baseline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>And the <strong>main code</strong> still the same,never change!Doing this just for the accuracy of the test.</p>\n<p>Is it clear now?If not,read it again or give me issues.</p>\n<p>Now,let's start:</p>\n<h2>Demo1</h2>\n<ol>\n<li><code>.inline.text-wrapper</code>,<code>vertical-align</code></li>\n</ol>\n<p>Before we test all the values,we have to figure something out.</p>\n<p>According to specifications,for element <code>.inline.text-wrapper</code> ,:</p>\n<blockquote>\n<p>The following values only have meaning with respect to a parent inline element, or to the strut of a parent block container element.</p>\n</blockquote>\n<ul>\n<li>the following values only have meaning with respect to<code>.wrapper</code>.</li>\n</ul>\n<blockquote>\n<p>In the following definitions, for inline non-replaced elements, the box used for alignment is the box whose height is the 'line-height' (containing the box's glyphs and the half-leading on each side, see above). For all other elements, the box used for alignment is the margin box.</p>\n</blockquote>\n<ul>\n<li>\n<p>the box used for alignment is the box whose height is the 'line-height' (32px)</p>\n</li>\n<li>\n<p>As you see,</p>\n</li>\n</ul>\n<p><img src=\"../images/20180519163821.png\" alt=\"20180519163821\"></p>\n<ol>\n<li><code>baseline</code> of <code>.wrapper</code> is the red line</li>\n<li><code>sub</code> of <code>.wrapper</code> is a little lower than <code>baseline</code>,can barely think that it is the bottom of the <code>content area</code>.</li>\n<li><code>super</code> of <code>.wrapper</code>is a little higher than <code>baseline</code>,can barely think that it is the yellow line.</li>\n<li><code>middle</code> of <code>.wrapper</code> is the green line.</li>\n<li><code>content area</code> of <code>.wrapper</code> is the blue box,<code>text-top</code> and <code>text-bottom</code> is the top and bottom of <code>content area</code>.</li>\n<li><code>box used for alignment</code> is the brown box.</li>\n</ol>\n<p>After point these out,the result of <code>vertical-align</code> can be more clear:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inline</span><span class=\"selector-class\">.text-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: sub;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./images/20180519171218.png\" alt=\"20180519171218\"></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inline</span><span class=\"selector-class\">.text-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: super;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./images/20180519171528.png\" alt=\"20180519171528\"></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inline</span><span class=\"selector-class\">.text-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./images/%E6%88%AA%E5%9B%BE20180519172009.png\" alt=\"截图20180519172009\"></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inline</span><span class=\"selector-class\">.text-wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: text-top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"./images/%E6%88%AA%E5%9B%BE20180519172315.png\" alt=\"截图20180519172315\"></p>\n"},{"title":"About Smooth Scroll","comments":1,"date":"2018-06-09T09:47:41.000Z","_content":"\n## Preface\n\nRecently, I need to make a smooth scroll. Of course, I think of `setTimeout`. However, I was thinking if there is a better way or API. So, here is the result of my research.\n\n## Main\n\n- [scrollTo][scrollto]\n\nYou can use it like:\n\n```javascript\nwindow.scrollTo({\n  top: 1000,\n  behavior: 'smooth'\n});\n```\n\nIt works in Chrome and Firefox. However, `IE` and `Edge` doesn't support. Code above will run like\n\n```js\nwindow.scrollTo(0, 0);\n```\n\nSimilar API also exists like `scrollIntoView` or `scrollBy`. The compatibility is the key problem.\n\n- [requestAnimationFrame][requestanimationframe]\n\nI would suggest this API instead of `setTimeout`. However, the process of implementation is not so easy like an existing API. Well, a little more complicated than `setTimeout`. However, compared with `setTimeout`, `requestanimationframe` has higher performance. Want to know more? Check the reference and SO. Also, here is the demo:\n\n```js\nlet animationFrameId = 0;\nfunction smoothScoll(targetScrollTop) {\n  let speed = 0.1;\n  let startTime = 0;\n  let timeLimit = 2000;\n  window.cancelAnimationFrame(animationFrameId);\n  animationFrameId = window.requestAnimationFrame(step);\n  function step(timestamp) {\n    startTime = startTime || timestamp;\n    let interval = timestamp - startTime;\n    let distance = targetScrollTop - getWinScrollTop();\n    let stepSize = speed * distance;\n    switch (Math.ceil(stepSize)) {\n      case 0:\n        stepSize = -1;\n        break;\n      case 1:\n        stepSize = 1;\n        break;\n    }\n    if (distance !== 0 && interval < timeLimit) {\n      window.scrollTo(0, getWinScrollTop() + stepSize);\n      animationFrameId = window.requestAnimationFrame(step);\n    }\n  }\n  function getWinScrollTop() {\n    return window.scrollY || window.pageYOffset;\n  }\n}\n```\n\nThe latest version can be found in my github [smoothScroll][smoothscroll].\n\nHowever, the compatibility is not good enough because of `IE<10` and `Opera Mini`.\n\n- Other solution\n\nCode for `setTimeout` is similar with `requestAnimationFrame` but I won't talk about it. Except that, jQuery has provided an API like:\n\n```js\n$(\"a[href='#top']\").click(function() {\n  $('html, body').animate({ scrollTop: 0 }, 'slow');\n  return false;\n});\n```\n\n## Ending\n\nAnyway, use `requestAnimationFrame` if possible. And if not, use `setTimeout` as shim.\n\n## Reference\n\n[Why is requestAnimationFrame better than setInterval or setTimeout](https://stackoverflow.com/questions/38709923/why-is-requestanimationframe-better-than-setinterval-or-settimeout)\n\n[scrollto]: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo\n[requestanimationframe]: https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n[smoothscroll]: https://github.com/xianshenglu/smoothScroll\n","source":"_posts/about-smooth-scroll.md","raw":"---\ntitle: About Smooth Scroll\ntags:\n  - smooth-scroll\n  - scrollTo\n  - requestAnimationFrame\n  - setTimeout\ncategories: js\ncomments: true\ndate: 2018-06-09 17:47:41\n---\n\n## Preface\n\nRecently, I need to make a smooth scroll. Of course, I think of `setTimeout`. However, I was thinking if there is a better way or API. So, here is the result of my research.\n\n## Main\n\n- [scrollTo][scrollto]\n\nYou can use it like:\n\n```javascript\nwindow.scrollTo({\n  top: 1000,\n  behavior: 'smooth'\n});\n```\n\nIt works in Chrome and Firefox. However, `IE` and `Edge` doesn't support. Code above will run like\n\n```js\nwindow.scrollTo(0, 0);\n```\n\nSimilar API also exists like `scrollIntoView` or `scrollBy`. The compatibility is the key problem.\n\n- [requestAnimationFrame][requestanimationframe]\n\nI would suggest this API instead of `setTimeout`. However, the process of implementation is not so easy like an existing API. Well, a little more complicated than `setTimeout`. However, compared with `setTimeout`, `requestanimationframe` has higher performance. Want to know more? Check the reference and SO. Also, here is the demo:\n\n```js\nlet animationFrameId = 0;\nfunction smoothScoll(targetScrollTop) {\n  let speed = 0.1;\n  let startTime = 0;\n  let timeLimit = 2000;\n  window.cancelAnimationFrame(animationFrameId);\n  animationFrameId = window.requestAnimationFrame(step);\n  function step(timestamp) {\n    startTime = startTime || timestamp;\n    let interval = timestamp - startTime;\n    let distance = targetScrollTop - getWinScrollTop();\n    let stepSize = speed * distance;\n    switch (Math.ceil(stepSize)) {\n      case 0:\n        stepSize = -1;\n        break;\n      case 1:\n        stepSize = 1;\n        break;\n    }\n    if (distance !== 0 && interval < timeLimit) {\n      window.scrollTo(0, getWinScrollTop() + stepSize);\n      animationFrameId = window.requestAnimationFrame(step);\n    }\n  }\n  function getWinScrollTop() {\n    return window.scrollY || window.pageYOffset;\n  }\n}\n```\n\nThe latest version can be found in my github [smoothScroll][smoothscroll].\n\nHowever, the compatibility is not good enough because of `IE<10` and `Opera Mini`.\n\n- Other solution\n\nCode for `setTimeout` is similar with `requestAnimationFrame` but I won't talk about it. Except that, jQuery has provided an API like:\n\n```js\n$(\"a[href='#top']\").click(function() {\n  $('html, body').animate({ scrollTop: 0 }, 'slow');\n  return false;\n});\n```\n\n## Ending\n\nAnyway, use `requestAnimationFrame` if possible. And if not, use `setTimeout` as shim.\n\n## Reference\n\n[Why is requestAnimationFrame better than setInterval or setTimeout](https://stackoverflow.com/questions/38709923/why-is-requestanimationframe-better-than-setinterval-or-settimeout)\n\n[scrollto]: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo\n[requestanimationframe]: https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n[smoothscroll]: https://github.com/xianshenglu/smoothScroll\n","slug":"about-smooth-scroll","published":1,"updated":"2018-08-18T06:09:53.084Z","layout":"post","photos":[],"link":"","_id":"cjv0yvimk000aborp198lc7jb","content":"<h2>Preface</h2>\n<p>Recently, I need to make a smooth scroll. Of course, I think of <code>setTimeout</code>. However, I was thinking if there is a better way or API. So, here is the result of my research.</p>\n<h2>Main</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo\" target=\"_blank\" rel=\"noopener\">scrollTo</a></li>\n</ul>\n<p>You can use it like:</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.scrollTo(&#123;</span><br><span class=\"line\">  top: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  behavior: <span class=\"string\">'smooth'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>It works in Chrome and Firefox. However, <code>IE</code> and <code>Edge</code> doesn't support. Code above will run like</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p>Similar API also exists like <code>scrollIntoView</code> or <code>scrollBy</code>. The compatibility is the key problem.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener\">requestAnimationFrame</a></li>\n</ul>\n<p>I would suggest this API instead of <code>setTimeout</code>. However, the process of implementation is not so easy like an existing API. Well, a little more complicated than <code>setTimeout</code>. However, compared with <code>setTimeout</code>, <code>requestanimationframe</code> has higher performance. Want to know more? Check the reference and SO. Also, here is the demo:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> animationFrameId = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">smoothScoll</span>(<span class=\"params\">targetScrollTop</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> speed = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> startTime = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeLimit = <span class=\"number\">2000</span>;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.cancelAnimationFrame(animationFrameId);</span><br><span class=\"line\">  animationFrameId = <span class=\"built_in\">window</span>.requestAnimationFrame(step);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\">timestamp</span>) </span>&#123;</span><br><span class=\"line\">    startTime = startTime || timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> interval = timestamp - startTime;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> distance = targetScrollTop - getWinScrollTop();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stepSize = speed * distance;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"built_in\">Math</span>.ceil(stepSize)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">        stepSize = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        stepSize = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (distance !== <span class=\"number\">0</span> &amp;&amp; interval &lt; timeLimit) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, getWinScrollTop() + stepSize);</span><br><span class=\"line\">      animationFrameId = <span class=\"built_in\">window</span>.requestAnimationFrame(step);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWinScrollTop</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The latest version can be found in my github <a href=\"https://github.com/xianshenglu/smoothScroll\">smoothScroll</a>.</p>\n<p>However, the compatibility is not good enough because of <code>IE&lt;10</code> and <code>Opera Mini</code>.</p>\n<ul>\n<li>Other solution</li>\n</ul>\n<p>Code for <code>setTimeout</code> is similar with <code>requestAnimationFrame</code> but I won't talk about it. Except that, jQuery has provided an API like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"a[href='#top']\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'html, body'</span>).animate(&#123; <span class=\"attr\">scrollTop</span>: <span class=\"number\">0</span> &#125;, <span class=\"string\">'slow'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2>Ending</h2>\n<p>Anyway, use <code>requestAnimationFrame</code> if possible. And if not, use <code>setTimeout</code> as shim.</p>\n<h2>Reference</h2>\n<p><a href=\"https://stackoverflow.com/questions/38709923/why-is-requestanimationframe-better-than-setinterval-or-settimeout\" target=\"_blank\" rel=\"noopener\">Why is requestAnimationFrame better than setInterval or setTimeout</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>Recently, I need to make a smooth scroll. Of course, I think of <code>setTimeout</code>. However, I was thinking if there is a better way or API. So, here is the result of my research.</p>\n<h2>Main</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo\" target=\"_blank\" rel=\"noopener\">scrollTo</a></li>\n</ul>\n<p>You can use it like:</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.scrollTo(&#123;</span><br><span class=\"line\">  top: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  behavior: <span class=\"string\">'smooth'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>It works in Chrome and Firefox. However, <code>IE</code> and <code>Edge</code> doesn't support. Code above will run like</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p>Similar API also exists like <code>scrollIntoView</code> or <code>scrollBy</code>. The compatibility is the key problem.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener\">requestAnimationFrame</a></li>\n</ul>\n<p>I would suggest this API instead of <code>setTimeout</code>. However, the process of implementation is not so easy like an existing API. Well, a little more complicated than <code>setTimeout</code>. However, compared with <code>setTimeout</code>, <code>requestanimationframe</code> has higher performance. Want to know more? Check the reference and SO. Also, here is the demo:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> animationFrameId = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">smoothScoll</span>(<span class=\"params\">targetScrollTop</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> speed = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> startTime = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeLimit = <span class=\"number\">2000</span>;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.cancelAnimationFrame(animationFrameId);</span><br><span class=\"line\">  animationFrameId = <span class=\"built_in\">window</span>.requestAnimationFrame(step);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\">timestamp</span>) </span>&#123;</span><br><span class=\"line\">    startTime = startTime || timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> interval = timestamp - startTime;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> distance = targetScrollTop - getWinScrollTop();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stepSize = speed * distance;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"built_in\">Math</span>.ceil(stepSize)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">        stepSize = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        stepSize = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (distance !== <span class=\"number\">0</span> &amp;&amp; interval &lt; timeLimit) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>, getWinScrollTop() + stepSize);</span><br><span class=\"line\">      animationFrameId = <span class=\"built_in\">window</span>.requestAnimationFrame(step);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWinScrollTop</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.scrollY || <span class=\"built_in\">window</span>.pageYOffset;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The latest version can be found in my github <a href=\"https://github.com/xianshenglu/smoothScroll\">smoothScroll</a>.</p>\n<p>However, the compatibility is not good enough because of <code>IE&lt;10</code> and <code>Opera Mini</code>.</p>\n<ul>\n<li>Other solution</li>\n</ul>\n<p>Code for <code>setTimeout</code> is similar with <code>requestAnimationFrame</code> but I won't talk about it. Except that, jQuery has provided an API like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"a[href='#top']\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'html, body'</span>).animate(&#123; <span class=\"attr\">scrollTop</span>: <span class=\"number\">0</span> &#125;, <span class=\"string\">'slow'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2>Ending</h2>\n<p>Anyway, use <code>requestAnimationFrame</code> if possible. And if not, use <code>setTimeout</code> as shim.</p>\n<h2>Reference</h2>\n<p><a href=\"https://stackoverflow.com/questions/38709923/why-is-requestanimationframe-better-than-setinterval-or-settimeout\" target=\"_blank\" rel=\"noopener\">Why is requestAnimationFrame better than setInterval or setTimeout</a></p>\n"},{"title":"A Trap When Using letter-spacing to Remove the Extra Space in chrome66.0.3359.139","date":"2018-06-18T07:47:27.000Z","comments":1,"_content":"\n## Preface\n\nAs we all know there would be extra space between inline-blocks when using inline-block layout. There are lots of solutions like `font-size:0`,`word-spacing`,`margin-left`,`letter-spacing` and so on.\n\n## Choice I Made\n\nNormally I prefer using `letter-spacing` because\n\n1.  it seems ok when we assign a value which is bigger than the width of extra space(e.g. `-1em`).\n2.  However, it won't be okay with `word-spacing` and `margin-left` when we set bigger value like `-1em`.\n3.  Using `font-size` is not convenient when we try to using `em` as `font-size` unit.\n\nSo, `letter-spacing` seems to be the best choice.\n\nWell, I agree with that though I found a bug in chrome66.0.3359.139 today.\n\n## Bug I Found\n\nPlease run the code below:\n\n```html\n<nav class=\"nav\">\n    <span class=\"nav__text\">nav1</span>\n    <span class=\"nav__text\">nav2</span>\n    <span class=\"nav__text\">nav3</span>\n</nav>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\na {\n  text-decoration: none;\n  color: inherit;\n  cursor: auto;\n}\n.nav {\n  width: 260px;\n  height: 100px;\n  background-color: pink;\n  color: white;\n  font-size: 20px;\n  letter-spacing: -1em;\n}\n.nav__text {\n  width: 90px;\n  height: 40px;\n  box-sizing: border-box;\n  border: 1px solid black;\n  line-height: 40px;\n  background-color: yellowgreen;\n  text-align: center;\n  display: inline-block;\n  letter-spacing: normal;\n}\n```\n\nIf you are using Chrome(test version 66.0.3359.139) or Opera(test version 53.0.2907.99), what you see might be:\n\n![](../images/截图20180618184625.png)\n\nIf you are using Firefox(60.0.2),IE10 or Edge, what you see might be:\n\n![](../images/截图20180618184736.png)\n\nThat's interesting. So, I checked the [mdn-letter-spacing][mdn-letter-spacing] and found this:\n\n> <length>\n> Specifies extra inter-character space in addition to the default space between characters. Values may be negative, but there may be implementation-specific limits. **User agents may not further increase or decrease the inter-character space in order to justify text.**\n\nIt seems that this is the reason.\n\nSo, I tested and try to find the best value for `letter-spacing` and **it turns out that `0.3em` or `0.31em` is the best value.**\n\n## Ending\n\nAnyway, `letter-spacing` is still the best solution though we have to be more careful.\n\n## Reference\n\n[mdn-letter-spacing][mdn-letter-spacing]\n\n[mdn-letter-spacing]: https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing\n","source":"_posts/a-trap-when-using-letter-spacing-to-remove-the-extra-space-in-chrome66.0.3359.139.md","raw":"---\ntitle: A Trap When Using letter-spacing to Remove the Extra Space in chrome66.0.3359.139\ndate: 2018-06-18 15:47:27\ntags:\n- bug\n- chrome\n- inline-block\n- letter-spacing\ncategories: css\ncomments: true\n---\n\n## Preface\n\nAs we all know there would be extra space between inline-blocks when using inline-block layout. There are lots of solutions like `font-size:0`,`word-spacing`,`margin-left`,`letter-spacing` and so on.\n\n## Choice I Made\n\nNormally I prefer using `letter-spacing` because\n\n1.  it seems ok when we assign a value which is bigger than the width of extra space(e.g. `-1em`).\n2.  However, it won't be okay with `word-spacing` and `margin-left` when we set bigger value like `-1em`.\n3.  Using `font-size` is not convenient when we try to using `em` as `font-size` unit.\n\nSo, `letter-spacing` seems to be the best choice.\n\nWell, I agree with that though I found a bug in chrome66.0.3359.139 today.\n\n## Bug I Found\n\nPlease run the code below:\n\n```html\n<nav class=\"nav\">\n    <span class=\"nav__text\">nav1</span>\n    <span class=\"nav__text\">nav2</span>\n    <span class=\"nav__text\">nav3</span>\n</nav>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\na {\n  text-decoration: none;\n  color: inherit;\n  cursor: auto;\n}\n.nav {\n  width: 260px;\n  height: 100px;\n  background-color: pink;\n  color: white;\n  font-size: 20px;\n  letter-spacing: -1em;\n}\n.nav__text {\n  width: 90px;\n  height: 40px;\n  box-sizing: border-box;\n  border: 1px solid black;\n  line-height: 40px;\n  background-color: yellowgreen;\n  text-align: center;\n  display: inline-block;\n  letter-spacing: normal;\n}\n```\n\nIf you are using Chrome(test version 66.0.3359.139) or Opera(test version 53.0.2907.99), what you see might be:\n\n![](../images/截图20180618184625.png)\n\nIf you are using Firefox(60.0.2),IE10 or Edge, what you see might be:\n\n![](../images/截图20180618184736.png)\n\nThat's interesting. So, I checked the [mdn-letter-spacing][mdn-letter-spacing] and found this:\n\n> <length>\n> Specifies extra inter-character space in addition to the default space between characters. Values may be negative, but there may be implementation-specific limits. **User agents may not further increase or decrease the inter-character space in order to justify text.**\n\nIt seems that this is the reason.\n\nSo, I tested and try to find the best value for `letter-spacing` and **it turns out that `0.3em` or `0.31em` is the best value.**\n\n## Ending\n\nAnyway, `letter-spacing` is still the best solution though we have to be more careful.\n\n## Reference\n\n[mdn-letter-spacing][mdn-letter-spacing]\n\n[mdn-letter-spacing]: https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing\n","slug":"a-trap-when-using-letter-spacing-to-remove-the-extra-space-in-chrome66.0.3359.139","published":1,"updated":"2018-06-18T11:22:39.821Z","layout":"post","photos":[],"link":"","_id":"cjv0yvimq000bborpvhfzp8r6","content":"<h2>Preface</h2>\n<p>As we all know there would be extra space between inline-blocks when using inline-block layout. There are lots of solutions like <code>font-size:0</code>,<code>word-spacing</code>,<code>margin-left</code>,<code>letter-spacing</code> and so on.</p>\n<h2>Choice I Made</h2>\n<p>Normally I prefer using <code>letter-spacing</code> because</p>\n<ol>\n<li>it seems ok when we assign a value which is bigger than the width of extra space(e.g. <code>-1em</code>).</li>\n<li>However, it won't be okay with <code>word-spacing</code> and <code>margin-left</code> when we set bigger value like <code>-1em</code>.</li>\n<li>Using <code>font-size</code> is not convenient when we try to using <code>em</code> as <code>font-size</code> unit.</li>\n</ol>\n<p>So, <code>letter-spacing</code> seems to be the best choice.</p>\n<p>Well, I agree with that though I found a bug in chrome66.0.3359.139 today.</p>\n<h2>Bug I Found</h2>\n<p>Please run the code below:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__text\"</span>&gt;</span>nav1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__text\"</span>&gt;</span>nav2<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__text\"</span>&gt;</span>nav3<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: inherit;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">260px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">letter-spacing</span>: -<span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav__text</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">letter-spacing</span>: normal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If you are using Chrome(test version 66.0.3359.139) or Opera(test version 53.0.2907.99), what you see might be:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180618184625.png\" alt=\"\"></p>\n<p>If you are using Firefox(60.0.2),IE10 or Edge, what you see might be:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180618184736.png\" alt=\"\"></p>\n<p>That's interesting. So, I checked the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing\" target=\"_blank\" rel=\"noopener\">mdn-letter-spacing</a> and found this:</p>\n<blockquote>\n<p>&lt;length&gt;\nSpecifies extra inter-character space in addition to the default space between characters. Values may be negative, but there may be implementation-specific limits. <strong>User agents may not further increase or decrease the inter-character space in order to justify text.</strong></p>\n</blockquote>\n<p>It seems that this is the reason.</p>\n<p>So, I tested and try to find the best value for <code>letter-spacing</code> and <strong>it turns out that <code>0.3em</code> or <code>0.31em</code> is the best value.</strong></p>\n<h2>Ending</h2>\n<p>Anyway, <code>letter-spacing</code> is still the best solution though we have to be more careful.</p>\n<h2>Reference</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing\" target=\"_blank\" rel=\"noopener\">mdn-letter-spacing</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>As we all know there would be extra space between inline-blocks when using inline-block layout. There are lots of solutions like <code>font-size:0</code>,<code>word-spacing</code>,<code>margin-left</code>,<code>letter-spacing</code> and so on.</p>\n<h2>Choice I Made</h2>\n<p>Normally I prefer using <code>letter-spacing</code> because</p>\n<ol>\n<li>it seems ok when we assign a value which is bigger than the width of extra space(e.g. <code>-1em</code>).</li>\n<li>However, it won't be okay with <code>word-spacing</code> and <code>margin-left</code> when we set bigger value like <code>-1em</code>.</li>\n<li>Using <code>font-size</code> is not convenient when we try to using <code>em</code> as <code>font-size</code> unit.</li>\n</ol>\n<p>So, <code>letter-spacing</code> seems to be the best choice.</p>\n<p>Well, I agree with that though I found a bug in chrome66.0.3359.139 today.</p>\n<h2>Bug I Found</h2>\n<p>Please run the code below:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__text\"</span>&gt;</span>nav1<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__text\"</span>&gt;</span>nav2<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__text\"</span>&gt;</span>nav3<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: inherit;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">260px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">letter-spacing</span>: -<span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav__text</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">letter-spacing</span>: normal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If you are using Chrome(test version 66.0.3359.139) or Opera(test version 53.0.2907.99), what you see might be:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180618184625.png\" alt=\"\"></p>\n<p>If you are using Firefox(60.0.2),IE10 or Edge, what you see might be:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180618184736.png\" alt=\"\"></p>\n<p>That's interesting. So, I checked the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing\" target=\"_blank\" rel=\"noopener\">mdn-letter-spacing</a> and found this:</p>\n<blockquote>\n<p>&lt;length&gt;\nSpecifies extra inter-character space in addition to the default space between characters. Values may be negative, but there may be implementation-specific limits. <strong>User agents may not further increase or decrease the inter-character space in order to justify text.</strong></p>\n</blockquote>\n<p>It seems that this is the reason.</p>\n<p>So, I tested and try to find the best value for <code>letter-spacing</code> and <strong>it turns out that <code>0.3em</code> or <code>0.31em</code> is the best value.</strong></p>\n<h2>Ending</h2>\n<p>Anyway, <code>letter-spacing</code> is still the best solution though we have to be more careful.</p>\n<h2>Reference</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing\" target=\"_blank\" rel=\"noopener\">mdn-letter-spacing</a></p>\n"},{"title":"在 VirtualBox 中访问局域网","comments":1,"date":"2018-08-18T08:18:15.000Z","_content":"\n## Preface\n\n工作需要，在 MAC 中开发，调试的时候，就装了 virtualBox 虚拟机来调试 IE，但是开发中经常调试的是局域网的网址，比如 `localhost:8080`，我可以用 `192.168.x.x:8080` 在局域网中另一台设备上访问，但是放到虚拟机中就不行了。\n\n## Main\n\n经搜索，方案如下：\n\n在虚拟系统未打开的情况下,在设置》网络属性中设置两个网络连接：\n\n- 网络连接 1 设置成 NAT，\n- 网络连接 2 设置成 Bridged Adapter,名称是 eth0（这个我没找到，但是选的另一个）\n\n这样的话就可以联上互联网同时可以连上局域网。\n\n但是在这种情况下，在虚拟机中输入网址时，遇到 老版的 IE ，需要输入在局域网网址前加 http:// 否则，直接输 192.168.x.x 可能会变成自动搜索。\n\n## Reference\n\n[设置 VirtualBox 虚拟机访问局域网](https://blog.csdn.net/ppby2002/article/details/6455892)\n","source":"_posts/access-lan-in-virtualbox.md","raw":"---\ntitle: 在 VirtualBox 中访问局域网\ntags:\n  - VirtualBox\n  - LAN\n  - 192.168.x.x\n  - chinese\ncategories: software\ncomments: true\ndate: 2018-08-18 16:18:15\n---\n\n## Preface\n\n工作需要，在 MAC 中开发，调试的时候，就装了 virtualBox 虚拟机来调试 IE，但是开发中经常调试的是局域网的网址，比如 `localhost:8080`，我可以用 `192.168.x.x:8080` 在局域网中另一台设备上访问，但是放到虚拟机中就不行了。\n\n## Main\n\n经搜索，方案如下：\n\n在虚拟系统未打开的情况下,在设置》网络属性中设置两个网络连接：\n\n- 网络连接 1 设置成 NAT，\n- 网络连接 2 设置成 Bridged Adapter,名称是 eth0（这个我没找到，但是选的另一个）\n\n这样的话就可以联上互联网同时可以连上局域网。\n\n但是在这种情况下，在虚拟机中输入网址时，遇到 老版的 IE ，需要输入在局域网网址前加 http:// 否则，直接输 192.168.x.x 可能会变成自动搜索。\n\n## Reference\n\n[设置 VirtualBox 虚拟机访问局域网](https://blog.csdn.net/ppby2002/article/details/6455892)\n","slug":"access-lan-in-virtualbox","published":1,"updated":"2018-08-18T08:20:41.582Z","layout":"post","photos":[],"link":"","_id":"cjv0yvimw000eborpxje9u4hs","content":"<h2>Preface</h2>\n<p>工作需要，在 MAC 中开发，调试的时候，就装了 virtualBox 虚拟机来调试 IE，但是开发中经常调试的是局域网的网址，比如 <code>localhost:8080</code>，我可以用 <code>192.168.x.x:8080</code> 在局域网中另一台设备上访问，但是放到虚拟机中就不行了。</p>\n<h2>Main</h2>\n<p>经搜索，方案如下：</p>\n<p>在虚拟系统未打开的情况下,在设置》网络属性中设置两个网络连接：</p>\n<ul>\n<li>网络连接 1 设置成 NAT，</li>\n<li>网络连接 2 设置成 Bridged Adapter,名称是 eth0（这个我没找到，但是选的另一个）</li>\n</ul>\n<p>这样的话就可以联上互联网同时可以连上局域网。</p>\n<p>但是在这种情况下，在虚拟机中输入网址时，遇到 老版的 IE ，需要输入在局域网网址前加 http:// 否则，直接输 192.168.x.x 可能会变成自动搜索。</p>\n<h2>Reference</h2>\n<p><a href=\"https://blog.csdn.net/ppby2002/article/details/6455892\" target=\"_blank\" rel=\"noopener\">设置 VirtualBox 虚拟机访问局域网</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>工作需要，在 MAC 中开发，调试的时候，就装了 virtualBox 虚拟机来调试 IE，但是开发中经常调试的是局域网的网址，比如 <code>localhost:8080</code>，我可以用 <code>192.168.x.x:8080</code> 在局域网中另一台设备上访问，但是放到虚拟机中就不行了。</p>\n<h2>Main</h2>\n<p>经搜索，方案如下：</p>\n<p>在虚拟系统未打开的情况下,在设置》网络属性中设置两个网络连接：</p>\n<ul>\n<li>网络连接 1 设置成 NAT，</li>\n<li>网络连接 2 设置成 Bridged Adapter,名称是 eth0（这个我没找到，但是选的另一个）</li>\n</ul>\n<p>这样的话就可以联上互联网同时可以连上局域网。</p>\n<p>但是在这种情况下，在虚拟机中输入网址时，遇到 老版的 IE ，需要输入在局域网网址前加 http:// 否则，直接输 192.168.x.x 可能会变成自动搜索。</p>\n<h2>Reference</h2>\n<p><a href=\"https://blog.csdn.net/ppby2002/article/details/6455892\" target=\"_blank\" rel=\"noopener\">设置 VirtualBox 虚拟机访问局域网</a></p>\n"},{"title":"Auto Zoom in When Form Element Gains Focus in IOS","comments":1,"date":"2018-08-18T06:49:09.000Z","_content":"\n## Preface\n\nWhen I was testing my webpage on IOS, I find that the page would be zoomed out automatically if there is some form elements and some element gains focus. Sometimes it will be really weird.\n\n## Main\n\nAfter searching I found this [How do you disable viewport zooming on Mobile Safari?](https://stackoverflow.com/questions/4389932/how-do-you-disable-viewport-zooming-on-mobile-safari) and I add `user-scalable=0` in my `meta[name=viewport]`. It works.\n\nHowever, user can still zoom the webpage though it won't zoom out automatically when form element gains focused.\n\n## Reference\n\n[How do you disable viewport zooming on Mobile Safari?](https://stackoverflow.com/questions/4389932/how-do-you-disable-viewport-zooming-on-mobile-safari)\n","source":"_posts/auto-zoom-in-when-form-elements-are-focused-in-ios.md","raw":"---\ntitle: Auto Zoom in When Form Element Gains Focus in IOS\ntags:\n  - form\n  - IOS\n  - focus\ncategories: html\ncomments: true\ndate: 2018-08-18 14:49:09\n---\n\n## Preface\n\nWhen I was testing my webpage on IOS, I find that the page would be zoomed out automatically if there is some form elements and some element gains focus. Sometimes it will be really weird.\n\n## Main\n\nAfter searching I found this [How do you disable viewport zooming on Mobile Safari?](https://stackoverflow.com/questions/4389932/how-do-you-disable-viewport-zooming-on-mobile-safari) and I add `user-scalable=0` in my `meta[name=viewport]`. It works.\n\nHowever, user can still zoom the webpage though it won't zoom out automatically when form element gains focused.\n\n## Reference\n\n[How do you disable viewport zooming on Mobile Safari?](https://stackoverflow.com/questions/4389932/how-do-you-disable-viewport-zooming-on-mobile-safari)\n","slug":"auto-zoom-in-when-form-elements-are-focused-in-ios","published":1,"updated":"2018-08-18T07:16:46.277Z","layout":"post","photos":[],"link":"","_id":"cjv0yvin2000fborpvssjqxnf","content":"<h2>Preface</h2>\n<p>When I was testing my webpage on IOS, I find that the page would be zoomed out automatically if there is some form elements and some element gains focus. Sometimes it will be really weird.</p>\n<h2>Main</h2>\n<p>After searching I found this <a href=\"https://stackoverflow.com/questions/4389932/how-do-you-disable-viewport-zooming-on-mobile-safari\" target=\"_blank\" rel=\"noopener\">How do you disable viewport zooming on Mobile Safari?</a> and I add <code>user-scalable=0</code> in my <code>meta[name=viewport]</code>. It works.</p>\n<p>However, user can still zoom the webpage though it won't zoom out automatically when form element gains focused.</p>\n<h2>Reference</h2>\n<p><a href=\"https://stackoverflow.com/questions/4389932/how-do-you-disable-viewport-zooming-on-mobile-safari\" target=\"_blank\" rel=\"noopener\">How do you disable viewport zooming on Mobile Safari?</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>When I was testing my webpage on IOS, I find that the page would be zoomed out automatically if there is some form elements and some element gains focus. Sometimes it will be really weird.</p>\n<h2>Main</h2>\n<p>After searching I found this <a href=\"https://stackoverflow.com/questions/4389932/how-do-you-disable-viewport-zooming-on-mobile-safari\" target=\"_blank\" rel=\"noopener\">How do you disable viewport zooming on Mobile Safari?</a> and I add <code>user-scalable=0</code> in my <code>meta[name=viewport]</code>. It works.</p>\n<p>However, user can still zoom the webpage though it won't zoom out automatically when form element gains focused.</p>\n<h2>Reference</h2>\n<p><a href=\"https://stackoverflow.com/questions/4389932/how-do-you-disable-viewport-zooming-on-mobile-safari\" target=\"_blank\" rel=\"noopener\">How do you disable viewport zooming on Mobile Safari?</a></p>\n"},{"title":"Better Way to Use orientationchange Event on Mobile","comments":1,"date":"2018-10-04T04:39:53.000Z","_content":"\n## Preface\n\nWhen I was using `orientationchange` event, I met a few bugs. So, I take it down.\n\n## Main\n\n#### compatibility problem\n\nWhen I was testing my code on my android, it was ok. However, it doesn't work on my boss's iPhone6. So, i have to change the code.\n\nThe origin code was like:\n\n```html\n  <div class=\"box\" id=\"box\">\n```\n\n```css\nhtml,\nbody {\n  width: 100%;\n  height: 100%;\n}\n\n.box {\n  width: 100%;\n  height: 100%;\n  background: pink;\n}\n\n.box.landscape {\n  background: lightblue;\n}\n```\n\n```js\nlet box = document.getElementById('box')\nwindow.addEventListener('orientationchange', orientationChangeCb)\nfunction orientationChangeCb(event) {\n  let isLand = isLandscape()\n  if (isLand) {\n    box.classList.add('landscape')\n  } else {\n    box.classList.remove('landscape')\n  }\n}\nfunction isLandscape() {\n  if ('orientation' in window) {\n    return Math.abs(window.orientation) === 90\n  } else {\n    return window.innerWidth > window.innerHeight\n  }\n}\n```\n\nTo be compatible with iPhone6, I use `resize` event instead.\n\nHowever, the better way I think is :\n\n```js\nlet eventForOrientationChange =\n  'onorientationchange' in window ? 'orientationchange' : 'resize'\nif (isMobile()) {\n  window.addEventListener(eventForOrientationChange, orientationChangeCb)\n}\n```\n\n#### isMobile ?\n\nBecause `onorientationchange` is a mobile event, so if you try to run code below on your computer with chrome, you will get:\n\n```js\nwindow.onorientationchange //undefined\n'onorientationchange' in window //false\n```\n\nIt seems a little weird but it's true until chrome 69. That's why I add `isMobile()` before I use `window.addEventListener`. In that case, we don't have to listen for the `resize` event on desktop.\n\n#### window.orientation or screen.orientation\n\nAccording to mdn, [window.orientation][window.orientation] has been **Deprecated**. However, similar API [screen.orientation][screen.orientation] has a big problem for compatibility. Safari and QQ doesn't support. As of 2018.10.4, global support in [caniuse][caniuse] is only 72.5%.\n\n#### css only\n\nIf you just want to update style, you don't have to use code above. CSS media queries\nsupport code like:\n\n```css\n@media (min-height: 680px), screen and (orientation: portrait) {\n  /* ...; */\n}\n@media (min-height: 680px), screen and (orientation: landscape) {\n  /* ...; */\n}\n```\n\n## Ending\n\n## Reference\n\n- [detect viewport orientation, if orientation is portrait display alert message advising user of instructions](https://stackoverflow.com/questions/4917664/detect-viewport-orientation-if-orientation-is-portrait-display-alert-message-ad)\n\n[window.orientation]: https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation#Specifications\n[screen.orientation]: https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation#Browser_compatibility\n[caniuse]: https://caniuse.com/#search=orientation\n","source":"_posts/better-way-to-use-orientationchange-event-on-mobile.md","raw":"---\ntitle: Better Way to Use orientationchange Event on Mobile\ncategories: js\ntags:\n  - orientationchange\n  - mobile\ncomments: true\ndate: 2018-10-04 12:39:53\n---\n\n## Preface\n\nWhen I was using `orientationchange` event, I met a few bugs. So, I take it down.\n\n## Main\n\n#### compatibility problem\n\nWhen I was testing my code on my android, it was ok. However, it doesn't work on my boss's iPhone6. So, i have to change the code.\n\nThe origin code was like:\n\n```html\n  <div class=\"box\" id=\"box\">\n```\n\n```css\nhtml,\nbody {\n  width: 100%;\n  height: 100%;\n}\n\n.box {\n  width: 100%;\n  height: 100%;\n  background: pink;\n}\n\n.box.landscape {\n  background: lightblue;\n}\n```\n\n```js\nlet box = document.getElementById('box')\nwindow.addEventListener('orientationchange', orientationChangeCb)\nfunction orientationChangeCb(event) {\n  let isLand = isLandscape()\n  if (isLand) {\n    box.classList.add('landscape')\n  } else {\n    box.classList.remove('landscape')\n  }\n}\nfunction isLandscape() {\n  if ('orientation' in window) {\n    return Math.abs(window.orientation) === 90\n  } else {\n    return window.innerWidth > window.innerHeight\n  }\n}\n```\n\nTo be compatible with iPhone6, I use `resize` event instead.\n\nHowever, the better way I think is :\n\n```js\nlet eventForOrientationChange =\n  'onorientationchange' in window ? 'orientationchange' : 'resize'\nif (isMobile()) {\n  window.addEventListener(eventForOrientationChange, orientationChangeCb)\n}\n```\n\n#### isMobile ?\n\nBecause `onorientationchange` is a mobile event, so if you try to run code below on your computer with chrome, you will get:\n\n```js\nwindow.onorientationchange //undefined\n'onorientationchange' in window //false\n```\n\nIt seems a little weird but it's true until chrome 69. That's why I add `isMobile()` before I use `window.addEventListener`. In that case, we don't have to listen for the `resize` event on desktop.\n\n#### window.orientation or screen.orientation\n\nAccording to mdn, [window.orientation][window.orientation] has been **Deprecated**. However, similar API [screen.orientation][screen.orientation] has a big problem for compatibility. Safari and QQ doesn't support. As of 2018.10.4, global support in [caniuse][caniuse] is only 72.5%.\n\n#### css only\n\nIf you just want to update style, you don't have to use code above. CSS media queries\nsupport code like:\n\n```css\n@media (min-height: 680px), screen and (orientation: portrait) {\n  /* ...; */\n}\n@media (min-height: 680px), screen and (orientation: landscape) {\n  /* ...; */\n}\n```\n\n## Ending\n\n## Reference\n\n- [detect viewport orientation, if orientation is portrait display alert message advising user of instructions](https://stackoverflow.com/questions/4917664/detect-viewport-orientation-if-orientation-is-portrait-display-alert-message-ad)\n\n[window.orientation]: https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation#Specifications\n[screen.orientation]: https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation#Browser_compatibility\n[caniuse]: https://caniuse.com/#search=orientation\n","slug":"better-way-to-use-orientationchange-event-on-mobile","published":1,"updated":"2018-10-04T08:02:27.754Z","layout":"post","photos":[],"link":"","_id":"cjv0yvin9000jborp4qnapp9w","content":"<h2>Preface</h2>\n<p>When I was using <code>orientationchange</code> event, I met a few bugs. So, I take it down.</p>\n<h2>Main</h2>\n<h4>compatibility problem</h4>\n<p>When I was testing my code on my android, it was ok. However, it doesn't work on my boss's iPhone6. So, i have to change the code.</p>\n<p>The origin code was like:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span><span class=\"selector-class\">.landscape</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'orientationchange'</span>, orientationChangeCb)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">orientationChangeCb</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isLand = isLandscape()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isLand) &#123;</span><br><span class=\"line\">    box.classList.add(<span class=\"string\">'landscape'</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    box.classList.remove(<span class=\"string\">'landscape'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLandscape</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">'orientation'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.abs(<span class=\"built_in\">window</span>.orientation) === <span class=\"number\">90</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.innerWidth &gt; <span class=\"built_in\">window</span>.innerHeight</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>To be compatible with iPhone6, I use <code>resize</code> event instead.</p>\n<p>However, the better way I think is :</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> eventForOrientationChange =</span><br><span class=\"line\">  <span class=\"string\">'onorientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> ? <span class=\"string\">'orientationchange'</span> : <span class=\"string\">'resize'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isMobile()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(eventForOrientationChange, orientationChangeCb)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4>isMobile ?</h4>\n<p>Because <code>onorientationchange</code> is a mobile event, so if you try to run code below on your computer with chrome, you will get:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onorientationchange <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"string\">'onorientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure></p>\n<p>It seems a little weird but it's true until chrome 69. That's why I add <code>isMobile()</code> before I use <code>window.addEventListener</code>. In that case, we don't have to listen for the <code>resize</code> event on desktop.</p>\n<h4>window.orientation or screen.orientation</h4>\n<p>According to mdn, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation#Specifications\" target=\"_blank\" rel=\"noopener\">window.orientation</a> has been <strong>Deprecated</strong>. However, similar API <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation#Browser_compatibility\" target=\"_blank\" rel=\"noopener\">screen.orientation</a> has a big problem for compatibility. Safari and QQ doesn't support. As of 2018.10.4, global support in <a href=\"https://caniuse.com/#search=orientation\" target=\"_blank\" rel=\"noopener\">caniuse</a> is only 72.5%.</p>\n<h4>css only</h4>\n<p>If you just want to update style, you don't have to use code above. CSS media queries\nsupport code like:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (min-height: <span class=\"number\">680px</span>), screen and (orientation: portrait) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ...; */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> (min-height: <span class=\"number\">680px</span>), screen and (orientation: landscape) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ...; */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/4917664/detect-viewport-orientation-if-orientation-is-portrait-display-alert-message-ad\" target=\"_blank\" rel=\"noopener\">detect viewport orientation, if orientation is portrait display alert message advising user of instructions</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>When I was using <code>orientationchange</code> event, I met a few bugs. So, I take it down.</p>\n<h2>Main</h2>\n<h4>compatibility problem</h4>\n<p>When I was testing my code on my android, it was ok. However, it doesn't work on my boss's iPhone6. So, i have to change the code.</p>\n<p>The origin code was like:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span><span class=\"selector-class\">.landscape</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'box'</span>)</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'orientationchange'</span>, orientationChangeCb)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">orientationChangeCb</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isLand = isLandscape()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isLand) &#123;</span><br><span class=\"line\">    box.classList.add(<span class=\"string\">'landscape'</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    box.classList.remove(<span class=\"string\">'landscape'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLandscape</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">'orientation'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.abs(<span class=\"built_in\">window</span>.orientation) === <span class=\"number\">90</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.innerWidth &gt; <span class=\"built_in\">window</span>.innerHeight</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>To be compatible with iPhone6, I use <code>resize</code> event instead.</p>\n<p>However, the better way I think is :</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> eventForOrientationChange =</span><br><span class=\"line\">  <span class=\"string\">'onorientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> ? <span class=\"string\">'orientationchange'</span> : <span class=\"string\">'resize'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isMobile()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(eventForOrientationChange, orientationChangeCb)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4>isMobile ?</h4>\n<p>Because <code>onorientationchange</code> is a mobile event, so if you try to run code below on your computer with chrome, you will get:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onorientationchange <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"string\">'onorientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure></p>\n<p>It seems a little weird but it's true until chrome 69. That's why I add <code>isMobile()</code> before I use <code>window.addEventListener</code>. In that case, we don't have to listen for the <code>resize</code> event on desktop.</p>\n<h4>window.orientation or screen.orientation</h4>\n<p>According to mdn, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation#Specifications\" target=\"_blank\" rel=\"noopener\">window.orientation</a> has been <strong>Deprecated</strong>. However, similar API <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation#Browser_compatibility\" target=\"_blank\" rel=\"noopener\">screen.orientation</a> has a big problem for compatibility. Safari and QQ doesn't support. As of 2018.10.4, global support in <a href=\"https://caniuse.com/#search=orientation\" target=\"_blank\" rel=\"noopener\">caniuse</a> is only 72.5%.</p>\n<h4>css only</h4>\n<p>If you just want to update style, you don't have to use code above. CSS media queries\nsupport code like:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (min-height: <span class=\"number\">680px</span>), screen and (orientation: portrait) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ...; */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> (min-height: <span class=\"number\">680px</span>), screen and (orientation: landscape) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ...; */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/4917664/detect-viewport-orientation-if-orientation-is-portrait-display-alert-message-ad\" target=\"_blank\" rel=\"noopener\">detect viewport orientation, if orientation is portrait display alert message advising user of instructions</a></li>\n</ul>\n"},{"title":"Browsers Disabled Audio AutoPlay","comments":1,"date":"2018-11-26T13:40:32.000Z","_content":"\nIf you have used `audio` or `video`, I guess you probably know `autoplay` attribute. Sometimes, PM wants to use that. However, the browsers doesn't want that.\n\nWhen I was using `autoplay` on 2018.10, I find that safari and chrome disabled `autoplay` when user haven't interacted with the page, especially on safari mobile. It's annoying.\n\nSo, if you want to use `autoplay` it may fail. So, some guys choose to play the audio when user click or touch the page. But I think the better way is to detect whether the user's browser support `autoplay`. And the way is:\n\n```js\naudioEl\n  .play()\n  .then(res => {\n    //not disabled\n  })\n  .catch(er => {\n    //disabled\n  })\n```\n\nHowever, [ie11 and edge before 2018.1 returns `undefined` when `audio.play()`](https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11998448/). So, if you care about that, you may try:\n\n```js\nlet audioState = audioEl.play()\nif (typeof audioState !== 'undefined') {\n  audioState\n    .then(res => {\n      //not disabled\n    })\n    .catch(er => {\n      //disabled\n    })\n}\n//other logic? what are you gonna do?\n```\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/18)\n\n## Reference\n\n- [Autoplay Best Practices with Video.js](https://blog.videojs.com/autoplay-best-practices-with-video-js/)\n","source":"_posts/browsers-disabled-audio-autoplay.md","raw":"---\ntitle: Browsers Disabled Audio AutoPlay\ncategories: js\ntags:\n  - audio\n  - autoplay\ncomments: true\ndate: 2018-11-26 21:40:32\n---\n\nIf you have used `audio` or `video`, I guess you probably know `autoplay` attribute. Sometimes, PM wants to use that. However, the browsers doesn't want that.\n\nWhen I was using `autoplay` on 2018.10, I find that safari and chrome disabled `autoplay` when user haven't interacted with the page, especially on safari mobile. It's annoying.\n\nSo, if you want to use `autoplay` it may fail. So, some guys choose to play the audio when user click or touch the page. But I think the better way is to detect whether the user's browser support `autoplay`. And the way is:\n\n```js\naudioEl\n  .play()\n  .then(res => {\n    //not disabled\n  })\n  .catch(er => {\n    //disabled\n  })\n```\n\nHowever, [ie11 and edge before 2018.1 returns `undefined` when `audio.play()`](https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11998448/). So, if you care about that, you may try:\n\n```js\nlet audioState = audioEl.play()\nif (typeof audioState !== 'undefined') {\n  audioState\n    .then(res => {\n      //not disabled\n    })\n    .catch(er => {\n      //disabled\n    })\n}\n//other logic? what are you gonna do?\n```\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/18)\n\n## Reference\n\n- [Autoplay Best Practices with Video.js](https://blog.videojs.com/autoplay-best-practices-with-video-js/)\n","slug":"browsers-disabled-audio-autoplay","published":1,"updated":"2018-12-07T14:09:16.470Z","layout":"post","photos":[],"link":"","_id":"cjv0yvinf000lborpzx5v3t6w","content":"<p>If you have used <code>audio</code> or <code>video</code>, I guess you probably know <code>autoplay</code> attribute. Sometimes, PM wants to use that. However, the browsers doesn't want that.</p>\n<p>When I was using <code>autoplay</code> on 2018.10, I find that safari and chrome disabled <code>autoplay</code> when user haven't interacted with the page, especially on safari mobile. It's annoying.</p>\n<p>So, if you want to use <code>autoplay</code> it may fail. So, some guys choose to play the audio when user click or touch the page. But I think the better way is to detect whether the user's browser support <code>autoplay</code>. And the way is:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">audioEl</span><br><span class=\"line\">  .play()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//not disabled</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">er</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//disabled</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>However, <a href=\"https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11998448/\" target=\"_blank\" rel=\"noopener\">ie11 and edge before 2018.1 returns <code>undefined</code> when <code>audio.play()</code></a>. So, if you care about that, you may try:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> audioState = audioEl.play()</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> audioState !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">  audioState</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//not disabled</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">er</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//disabled</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//other logic? what are you gonna do?</span></span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/18\"><strong>Original Post</strong></a></p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://blog.videojs.com/autoplay-best-practices-with-video-js/\" target=\"_blank\" rel=\"noopener\">Autoplay Best Practices with Video.js</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>If you have used <code>audio</code> or <code>video</code>, I guess you probably know <code>autoplay</code> attribute. Sometimes, PM wants to use that. However, the browsers doesn't want that.</p>\n<p>When I was using <code>autoplay</code> on 2018.10, I find that safari and chrome disabled <code>autoplay</code> when user haven't interacted with the page, especially on safari mobile. It's annoying.</p>\n<p>So, if you want to use <code>autoplay</code> it may fail. So, some guys choose to play the audio when user click or touch the page. But I think the better way is to detect whether the user's browser support <code>autoplay</code>. And the way is:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">audioEl</span><br><span class=\"line\">  .play()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//not disabled</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">er</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//disabled</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>However, <a href=\"https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11998448/\" target=\"_blank\" rel=\"noopener\">ie11 and edge before 2018.1 returns <code>undefined</code> when <code>audio.play()</code></a>. So, if you care about that, you may try:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> audioState = audioEl.play()</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> audioState !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">  audioState</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//not disabled</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">er</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//disabled</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//other logic? what are you gonna do?</span></span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/18\"><strong>Original Post</strong></a></p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://blog.videojs.com/autoplay-best-practices-with-video-js/\" target=\"_blank\" rel=\"noopener\">Autoplay Best Practices with Video.js</a></li>\n</ul>\n"},{"title":"Build Blog by Github Pages and Hexo","date":"2018-05-19T16:00:00.000Z","comments":1,"_content":"\n## Preface\n\nThere is a lot of tutorials teaching you build your own blog by github pages with url like `https://username.github.io`.\n\nWell, I am not going to do that. Why would I have to build blog on my main site rather than `https://username.github.io/blog`?\n\nThat is what I'm going to do! Build a blog under main site so that it wouldn't take over the main site. Suppose that you have already known something about `npm` and `git` or `Github`.\n\n## Steps\n\n- Install `hexo` and `hexo-cli`\n\n```bash\nnpm install -g hexo-cli\nnpm install -g hexo\n```\n\n- Create your blog folder with no file, and get into the folder(for example, my blog folder is _blog_).\n\n```bash\ncd blog\n```\n\n- Initialize hexo and install dependencies\n\n```bash\nhexo init\nnpm install\n```\n\nNormally, dependencies will be installed automatically\n\n- Try to run it locally\n\n```bash\nhexo s -g\n```\n\nNormally, you will see:\n\n![20180520101721.png](../images/20180520101721.png)\n\n- Open the browser with the url in the above screenshot:\n\n![20180520102405.png](../images/20180520102405.png)\n\nYou can change the theme if you don't like it. However that is not the point of this article. You can do it according to the docs in [hexo][hexo].\n\n- Also, if we want to deploy it on github, we have to install `hexo-deployer-git` according to [docs][hexo].\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n- Suppose that you already have a repository on github. For example, the name is `blog` and url is `https://github.com/username/blog`. Then find the _\\_config.yml_ file in the folder. Open it update the `url` and `root` as follows:\n\n```bash\nurl: https://github.com/username/blog\nroot: /blog/\n```\n\nAlso, update `deploy` like this:\n\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/username/blog\n  branch: master\n```\n\nWell, I have to warn you that\nand the space before word `type`, `repo` and `branch`should be _blank space_ not _tab_. Otherwise, you will get error about your `indentation`.\n\n- Now, try to deploy it on github:\n\n```bash\nhexo d -g\n```\n\nOpen your repository url like `https://github.com/username/blog` and you will find there is a few files and folders. Remember to clear cash with `ctrl+shift+delete` if you just pushed.\n\n- Suppose that you already make the repository become a github page. Then, you can open your page url like: `https://username.github.io/blog/`. You will see what you see locally last time.\n\n## Default settings\n\nsome stuff should be done by default which hexo didn't:\n\n- Generate _.deploy_git/categories_ folder when deployed. This might be done by default.\n\n```bash\nnpm install hexo-generator-category --save\n```\n\n- Generate _index.md_ under folder _source/categories_ and _source/tags_\n\n```bash\nhexo new page categories\nhexo new page tags\n```\n\nAlso, need to add `type: tags` and `type: categories` in the above corresponding file _index.md_. It will help you generate _index.html_ under folder _.deploy_git/categories_ and _.deploy_git/tags_ when deployed.\n\n## Update\n\n- I just found that default `hexo-renderer-marked` didn't work with some markdown syntax like _.deploy_git/categories_. So, I change my markdown parser;\n\n```bash\nnpm uninstall hexo-renderer-marked  --save\nnpm install hexo-renderer-markdown-it  --save\n```\n\n- Before deploying, you had better remove the _public_ and _.deploy_git_ folder because they won't be rewritten sometimes.\n\n- Above operation works well if there is no image in the markdown. However, if there is an image, for example:\n\n```md\n![20180520102405.png](../images/20180520102405.png)\n```\n\nThe path for the image will be resolved incorrectly. In consistent with above case, the correct path should be `https://username.github.io/blog/images/20180520102405.png` while what we got is like `https://username.github.io/blog/2018/05/20/images/20180520101721.png`.So, we need to modify `src` to get a new url.\n\n```javascript\nwindow.addEventListener('error', windowErrorCb, { capture: true }, true)\ndocument.addEventListener(\n  'DOMContentLoaded',\n  refreshImgUrl,\n  { capture: true },\n  true\n)\nfunction windowErrorCb(event) {\n  let target = event.target\n  imgErrorCb()\n  function imgErrorCb() {\n    let isImgErrorHandled = target.hasAttribute('data-src-error')\n    let isImgPathMatch =\n      target.tagName.toLowerCase() === 'img' &&\n      target.src.match(/\\/images\\/[^/]*?\\d{10,20}[^/]*$/)\n\n    if (isImgPathMatch && !isImgErrorHandled) {\n      target.src = 'https://xianshenglu.github.io/blog' + isImgPathMatch[0]\n      target.setAttribute('data-src-error', 'handled')\n    }\n  }\n  return true\n}\n\nfunction refreshImgUrl(event) {\n  let isImgPathMatchReg = /\\/images\\/[^/]*?\\d{10,20}[^/]*$/\n  $('img')\n    .toArray()\n    .forEach(img => {\n      if (img.src.match(isImgPathMatchReg)) {\n        img.src = img.src\n      }\n    })\n}\n```\n\nTo solve question above, you can put the code above in the bottom of the file _theme/next/source/js/src/motion.js_ which should be changed according to your theme and image's path. Actually, you can put the code in any js file as long as you are sure that it will be loaded.\n\n## Ending\n\nWell, the main settings have already finished. And if you want to set the theme or other things, go check the [docs][hexo].\n\n[hexo]: https://hexo.io/docs/\n","source":"_posts/build-blog-by-github-pages-and-hexo.md","raw":"---\ntitle: Build Blog by Github Pages and Hexo\ndate: 2018-05-20\ncomments: true\ntags:\n  - blog\n  - hexo\n  - github\ncategories: software\n---\n\n## Preface\n\nThere is a lot of tutorials teaching you build your own blog by github pages with url like `https://username.github.io`.\n\nWell, I am not going to do that. Why would I have to build blog on my main site rather than `https://username.github.io/blog`?\n\nThat is what I'm going to do! Build a blog under main site so that it wouldn't take over the main site. Suppose that you have already known something about `npm` and `git` or `Github`.\n\n## Steps\n\n- Install `hexo` and `hexo-cli`\n\n```bash\nnpm install -g hexo-cli\nnpm install -g hexo\n```\n\n- Create your blog folder with no file, and get into the folder(for example, my blog folder is _blog_).\n\n```bash\ncd blog\n```\n\n- Initialize hexo and install dependencies\n\n```bash\nhexo init\nnpm install\n```\n\nNormally, dependencies will be installed automatically\n\n- Try to run it locally\n\n```bash\nhexo s -g\n```\n\nNormally, you will see:\n\n![20180520101721.png](../images/20180520101721.png)\n\n- Open the browser with the url in the above screenshot:\n\n![20180520102405.png](../images/20180520102405.png)\n\nYou can change the theme if you don't like it. However that is not the point of this article. You can do it according to the docs in [hexo][hexo].\n\n- Also, if we want to deploy it on github, we have to install `hexo-deployer-git` according to [docs][hexo].\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n- Suppose that you already have a repository on github. For example, the name is `blog` and url is `https://github.com/username/blog`. Then find the _\\_config.yml_ file in the folder. Open it update the `url` and `root` as follows:\n\n```bash\nurl: https://github.com/username/blog\nroot: /blog/\n```\n\nAlso, update `deploy` like this:\n\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/username/blog\n  branch: master\n```\n\nWell, I have to warn you that\nand the space before word `type`, `repo` and `branch`should be _blank space_ not _tab_. Otherwise, you will get error about your `indentation`.\n\n- Now, try to deploy it on github:\n\n```bash\nhexo d -g\n```\n\nOpen your repository url like `https://github.com/username/blog` and you will find there is a few files and folders. Remember to clear cash with `ctrl+shift+delete` if you just pushed.\n\n- Suppose that you already make the repository become a github page. Then, you can open your page url like: `https://username.github.io/blog/`. You will see what you see locally last time.\n\n## Default settings\n\nsome stuff should be done by default which hexo didn't:\n\n- Generate _.deploy_git/categories_ folder when deployed. This might be done by default.\n\n```bash\nnpm install hexo-generator-category --save\n```\n\n- Generate _index.md_ under folder _source/categories_ and _source/tags_\n\n```bash\nhexo new page categories\nhexo new page tags\n```\n\nAlso, need to add `type: tags` and `type: categories` in the above corresponding file _index.md_. It will help you generate _index.html_ under folder _.deploy_git/categories_ and _.deploy_git/tags_ when deployed.\n\n## Update\n\n- I just found that default `hexo-renderer-marked` didn't work with some markdown syntax like _.deploy_git/categories_. So, I change my markdown parser;\n\n```bash\nnpm uninstall hexo-renderer-marked  --save\nnpm install hexo-renderer-markdown-it  --save\n```\n\n- Before deploying, you had better remove the _public_ and _.deploy_git_ folder because they won't be rewritten sometimes.\n\n- Above operation works well if there is no image in the markdown. However, if there is an image, for example:\n\n```md\n![20180520102405.png](../images/20180520102405.png)\n```\n\nThe path for the image will be resolved incorrectly. In consistent with above case, the correct path should be `https://username.github.io/blog/images/20180520102405.png` while what we got is like `https://username.github.io/blog/2018/05/20/images/20180520101721.png`.So, we need to modify `src` to get a new url.\n\n```javascript\nwindow.addEventListener('error', windowErrorCb, { capture: true }, true)\ndocument.addEventListener(\n  'DOMContentLoaded',\n  refreshImgUrl,\n  { capture: true },\n  true\n)\nfunction windowErrorCb(event) {\n  let target = event.target\n  imgErrorCb()\n  function imgErrorCb() {\n    let isImgErrorHandled = target.hasAttribute('data-src-error')\n    let isImgPathMatch =\n      target.tagName.toLowerCase() === 'img' &&\n      target.src.match(/\\/images\\/[^/]*?\\d{10,20}[^/]*$/)\n\n    if (isImgPathMatch && !isImgErrorHandled) {\n      target.src = 'https://xianshenglu.github.io/blog' + isImgPathMatch[0]\n      target.setAttribute('data-src-error', 'handled')\n    }\n  }\n  return true\n}\n\nfunction refreshImgUrl(event) {\n  let isImgPathMatchReg = /\\/images\\/[^/]*?\\d{10,20}[^/]*$/\n  $('img')\n    .toArray()\n    .forEach(img => {\n      if (img.src.match(isImgPathMatchReg)) {\n        img.src = img.src\n      }\n    })\n}\n```\n\nTo solve question above, you can put the code above in the bottom of the file _theme/next/source/js/src/motion.js_ which should be changed according to your theme and image's path. Actually, you can put the code in any js file as long as you are sure that it will be loaded.\n\n## Ending\n\nWell, the main settings have already finished. And if you want to set the theme or other things, go check the [docs][hexo].\n\n[hexo]: https://hexo.io/docs/\n","slug":"build-blog-by-github-pages-and-hexo","published":1,"updated":"2018-11-18T11:21:35.463Z","layout":"post","photos":[],"link":"","_id":"cjv0yvinl000qborp0myuyjj1","content":"<h2>Preface</h2>\n<p>There is a lot of tutorials teaching you build your own blog by github pages with url like <code>https://username.github.io</code>.</p>\n<p>Well, I am not going to do that. Why would I have to build blog on my main site rather than <code>https://username.github.io/blog</code>?</p>\n<p>That is what I'm going to do! Build a blog under main site so that it wouldn't take over the main site. Suppose that you have already known something about <code>npm</code> and <code>git</code> or <code>Github</code>.</p>\n<h2>Steps</h2>\n<ul>\n<li>Install <code>hexo</code> and <code>hexo-cli</code></li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Create your blog folder with no file, and get into the folder(for example, my blog folder is <em>blog</em>).</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Initialize hexo and install dependencies</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>Normally, dependencies will be installed automatically</p>\n<ul>\n<li>Try to run it locally</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s -g</span><br></pre></td></tr></table></figure></p>\n<p>Normally, you will see:</p>\n<p><img src=\"../images/20180520101721.png\" alt=\"20180520101721.png\"></p>\n<ul>\n<li>Open the browser with the url in the above screenshot:</li>\n</ul>\n<p><img src=\"../images/20180520102405.png\" alt=\"20180520102405.png\"></p>\n<p>You can change the theme if you don't like it. However that is not the point of this article. You can do it according to the docs in <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">hexo</a>.</p>\n<ul>\n<li>Also, if we want to deploy it on github, we have to install <code>hexo-deployer-git</code> according to <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">docs</a>.</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Suppose that you already have a repository on github. For example, the name is <code>blog</code> and url is <code>https://github.com/username/blog</code>. Then find the <em>_config.yml</em> file in the folder. Open it update the <code>url</code> and <code>root</code> as follows:</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">url: https://github.com/username/blog</span><br><span class=\"line\">root: /blog/</span><br></pre></td></tr></table></figure></p>\n<p>Also, update <code>deploy</code> like this:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/username/blog</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p>Well, I have to warn you that\nand the space before word <code>type</code>, <code>repo</code> and <code>branch</code>should be <em>blank space</em> not <em>tab</em>. Otherwise, you will get error about your <code>indentation</code>.</p>\n<ul>\n<li>Now, try to deploy it on github:</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>Open your repository url like <code>https://github.com/username/blog</code> and you will find there is a few files and folders. Remember to clear cash with <code>ctrl+shift+delete</code> if you just pushed.</p>\n<ul>\n<li>Suppose that you already make the repository become a github page. Then, you can open your page url like: <code>https://username.github.io/blog/</code>. You will see what you see locally last time.</li>\n</ul>\n<h2>Default settings</h2>\n<p>some stuff should be done by default which hexo didn't:</p>\n<ul>\n<li>Generate <em>.deploy_git/categories</em> folder when deployed. This might be done by default.</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-category --save</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Generate <em>index.md</em> under folder <em>source/categories</em> and <em>source/tags</em></li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure></p>\n<p>Also, need to add <code>type: tags</code> and <code>type: categories</code> in the above corresponding file <em>index.md</em>. It will help you generate <em>index.html</em> under folder <em>.deploy_git/categories</em> and <em>.deploy_git/tags</em> when deployed.</p>\n<h2>Update</h2>\n<ul>\n<li>I just found that default <code>hexo-renderer-marked</code> didn't work with some markdown syntax like <em>.deploy_git/categories</em>. So, I change my markdown parser;</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked  --save</span><br><span class=\"line\">npm install hexo-renderer-markdown-it  --save</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>\n<p>Before deploying, you had better remove the <em>public</em> and <em>.deploy_git</em> folder because they won't be rewritten sometimes.</p>\n</li>\n<li>\n<p>Above operation works well if there is no image in the markdown. However, if there is an image, for example:</p>\n</li>\n</ul>\n<p><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">20180520102405.png</span>](<span class=\"link\">../images/20180520102405.png</span>)</span><br></pre></td></tr></table></figure></p>\n<p>The path for the image will be resolved incorrectly. In consistent with above case, the correct path should be <code>https://username.github.io/blog/images/20180520102405.png</code> while what we got is like <code>https://username.github.io/blog/2018/05/20/images/20180520101721.png</code>.So, we need to modify <code>src</code> to get a new url.</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'error'</span>, windowErrorCb, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;, <span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'DOMContentLoaded'</span>,</span><br><span class=\"line\">  refreshImgUrl,</span><br><span class=\"line\">  &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">windowErrorCb</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = event.target</span><br><span class=\"line\">  imgErrorCb()</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imgErrorCb</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isImgErrorHandled = target.hasAttribute(<span class=\"string\">'data-src-error'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isImgPathMatch =</span><br><span class=\"line\">      target.tagName.toLowerCase() === <span class=\"string\">'img'</span> &amp;&amp;</span><br><span class=\"line\">      target.src.match(<span class=\"regexp\">/\\/images\\/[^/]*?\\d&#123;10,20&#125;[^/]*$/</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isImgPathMatch &amp;&amp; !isImgErrorHandled) &#123;</span><br><span class=\"line\">      target.src = <span class=\"string\">'https://xianshenglu.github.io/blog'</span> + isImgPathMatch[<span class=\"number\">0</span>]</span><br><span class=\"line\">      target.setAttribute(<span class=\"string\">'data-src-error'</span>, <span class=\"string\">'handled'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refreshImgUrl</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isImgPathMatchReg = <span class=\"regexp\">/\\/images\\/[^/]*?\\d&#123;10,20&#125;[^/]*$/</span></span><br><span class=\"line\">  $(<span class=\"string\">'img'</span>)</span><br><span class=\"line\">    .toArray()</span><br><span class=\"line\">    .forEach(<span class=\"function\"><span class=\"params\">img</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (img.src.match(isImgPathMatchReg)) &#123;</span><br><span class=\"line\">        img.src = img.src</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>To solve question above, you can put the code above in the bottom of the file <em>theme/next/source/js/src/motion.js</em> which should be changed according to your theme and image's path. Actually, you can put the code in any js file as long as you are sure that it will be loaded.</p>\n<h2>Ending</h2>\n<p>Well, the main settings have already finished. And if you want to set the theme or other things, go check the <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">docs</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>There is a lot of tutorials teaching you build your own blog by github pages with url like <code>https://username.github.io</code>.</p>\n<p>Well, I am not going to do that. Why would I have to build blog on my main site rather than <code>https://username.github.io/blog</code>?</p>\n<p>That is what I'm going to do! Build a blog under main site so that it wouldn't take over the main site. Suppose that you have already known something about <code>npm</code> and <code>git</code> or <code>Github</code>.</p>\n<h2>Steps</h2>\n<ul>\n<li>Install <code>hexo</code> and <code>hexo-cli</code></li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Create your blog folder with no file, and get into the folder(for example, my blog folder is <em>blog</em>).</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Initialize hexo and install dependencies</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>Normally, dependencies will be installed automatically</p>\n<ul>\n<li>Try to run it locally</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s -g</span><br></pre></td></tr></table></figure></p>\n<p>Normally, you will see:</p>\n<p><img src=\"../images/20180520101721.png\" alt=\"20180520101721.png\"></p>\n<ul>\n<li>Open the browser with the url in the above screenshot:</li>\n</ul>\n<p><img src=\"../images/20180520102405.png\" alt=\"20180520102405.png\"></p>\n<p>You can change the theme if you don't like it. However that is not the point of this article. You can do it according to the docs in <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">hexo</a>.</p>\n<ul>\n<li>Also, if we want to deploy it on github, we have to install <code>hexo-deployer-git</code> according to <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">docs</a>.</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Suppose that you already have a repository on github. For example, the name is <code>blog</code> and url is <code>https://github.com/username/blog</code>. Then find the <em>_config.yml</em> file in the folder. Open it update the <code>url</code> and <code>root</code> as follows:</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">url: https://github.com/username/blog</span><br><span class=\"line\">root: /blog/</span><br></pre></td></tr></table></figure></p>\n<p>Also, update <code>deploy</code> like this:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/username/blog</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p>Well, I have to warn you that\nand the space before word <code>type</code>, <code>repo</code> and <code>branch</code>should be <em>blank space</em> not <em>tab</em>. Otherwise, you will get error about your <code>indentation</code>.</p>\n<ul>\n<li>Now, try to deploy it on github:</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>Open your repository url like <code>https://github.com/username/blog</code> and you will find there is a few files and folders. Remember to clear cash with <code>ctrl+shift+delete</code> if you just pushed.</p>\n<ul>\n<li>Suppose that you already make the repository become a github page. Then, you can open your page url like: <code>https://username.github.io/blog/</code>. You will see what you see locally last time.</li>\n</ul>\n<h2>Default settings</h2>\n<p>some stuff should be done by default which hexo didn't:</p>\n<ul>\n<li>Generate <em>.deploy_git/categories</em> folder when deployed. This might be done by default.</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-category --save</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Generate <em>index.md</em> under folder <em>source/categories</em> and <em>source/tags</em></li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure></p>\n<p>Also, need to add <code>type: tags</code> and <code>type: categories</code> in the above corresponding file <em>index.md</em>. It will help you generate <em>index.html</em> under folder <em>.deploy_git/categories</em> and <em>.deploy_git/tags</em> when deployed.</p>\n<h2>Update</h2>\n<ul>\n<li>I just found that default <code>hexo-renderer-marked</code> didn't work with some markdown syntax like <em>.deploy_git/categories</em>. So, I change my markdown parser;</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked  --save</span><br><span class=\"line\">npm install hexo-renderer-markdown-it  --save</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>\n<p>Before deploying, you had better remove the <em>public</em> and <em>.deploy_git</em> folder because they won't be rewritten sometimes.</p>\n</li>\n<li>\n<p>Above operation works well if there is no image in the markdown. However, if there is an image, for example:</p>\n</li>\n</ul>\n<p><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">20180520102405.png</span>](<span class=\"link\">../images/20180520102405.png</span>)</span><br></pre></td></tr></table></figure></p>\n<p>The path for the image will be resolved incorrectly. In consistent with above case, the correct path should be <code>https://username.github.io/blog/images/20180520102405.png</code> while what we got is like <code>https://username.github.io/blog/2018/05/20/images/20180520101721.png</code>.So, we need to modify <code>src</code> to get a new url.</p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'error'</span>, windowErrorCb, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;, <span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'DOMContentLoaded'</span>,</span><br><span class=\"line\">  refreshImgUrl,</span><br><span class=\"line\">  &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">windowErrorCb</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = event.target</span><br><span class=\"line\">  imgErrorCb()</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imgErrorCb</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isImgErrorHandled = target.hasAttribute(<span class=\"string\">'data-src-error'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isImgPathMatch =</span><br><span class=\"line\">      target.tagName.toLowerCase() === <span class=\"string\">'img'</span> &amp;&amp;</span><br><span class=\"line\">      target.src.match(<span class=\"regexp\">/\\/images\\/[^/]*?\\d&#123;10,20&#125;[^/]*$/</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isImgPathMatch &amp;&amp; !isImgErrorHandled) &#123;</span><br><span class=\"line\">      target.src = <span class=\"string\">'https://xianshenglu.github.io/blog'</span> + isImgPathMatch[<span class=\"number\">0</span>]</span><br><span class=\"line\">      target.setAttribute(<span class=\"string\">'data-src-error'</span>, <span class=\"string\">'handled'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refreshImgUrl</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isImgPathMatchReg = <span class=\"regexp\">/\\/images\\/[^/]*?\\d&#123;10,20&#125;[^/]*$/</span></span><br><span class=\"line\">  $(<span class=\"string\">'img'</span>)</span><br><span class=\"line\">    .toArray()</span><br><span class=\"line\">    .forEach(<span class=\"function\"><span class=\"params\">img</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (img.src.match(isImgPathMatchReg)) &#123;</span><br><span class=\"line\">        img.src = img.src</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>To solve question above, you can put the code above in the bottom of the file <em>theme/next/source/js/src/motion.js</em> which should be changed according to your theme and image's path. Actually, you can put the code in any js file as long as you are sure that it will be loaded.</p>\n<h2>Ending</h2>\n<p>Well, the main settings have already finished. And if you want to set the theme or other things, go check the <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">docs</a>.</p>\n"},{"title":"Understand Format Context in CSS2.1","comments":1,"date":"2018-05-21T11:30:05.000Z","_content":"\n##Preface\n\nAccording to CSS2.1 [specs][specs] and [errata][errata],\n\n> Boxes in the normal flow belong to a formatting context, which in CSS 2 may be table, block or inline, but not both simultaneously. In future levels of CSS, other types of formatting context will be introduced.\n\n> Block-level boxes participate in a block formatting context. Inline-level boxes participate in an inline formatting context. Table formatting contexts are described in the chapter on tables.\n\nAlso,we can find the definition of BFC(Block Formatting Context) and IFC(Inline Formatting Context). However, it really takes me a lot of time to understand what is `participate in a BFC or IFC` or `establish a new BFC or IFC`.\n\n##Explanation\n\nWhen the specs says that participate in a\n\n[specs]: https://www.w3.org/TR/2011/REC-CSS2-20110607\n[errata]: http://www.w3.org/Style/css2-updates/REC-CSS2-20110607-errata.html\n","source":"_drafts/understand-format-context-in-css2-1.md","raw":"---\ntitle: Understand Format Context in CSS2.1\ncategories: css\ncomments: true\ndate: 2018-05-21 19:30:05\ntags:\n---\n\n##Preface\n\nAccording to CSS2.1 [specs][specs] and [errata][errata],\n\n> Boxes in the normal flow belong to a formatting context, which in CSS 2 may be table, block or inline, but not both simultaneously. In future levels of CSS, other types of formatting context will be introduced.\n\n> Block-level boxes participate in a block formatting context. Inline-level boxes participate in an inline formatting context. Table formatting contexts are described in the chapter on tables.\n\nAlso,we can find the definition of BFC(Block Formatting Context) and IFC(Inline Formatting Context). However, it really takes me a lot of time to understand what is `participate in a BFC or IFC` or `establish a new BFC or IFC`.\n\n##Explanation\n\nWhen the specs says that participate in a\n\n[specs]: https://www.w3.org/TR/2011/REC-CSS2-20110607\n[errata]: http://www.w3.org/Style/css2-updates/REC-CSS2-20110607-errata.html\n","slug":"understand-format-context-in-css2-1","published":0,"updated":"2018-05-22T05:38:25.462Z","layout":"post","photos":[],"link":"","_id":"cjv0yvino000rborpom28y2k0","content":"<p>##Preface</p>\n<p>According to CSS2.1 <a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607\" target=\"_blank\" rel=\"noopener\">specs</a> and <a href=\"http://www.w3.org/Style/css2-updates/REC-CSS2-20110607-errata.html\" target=\"_blank\" rel=\"noopener\">errata</a>,</p>\n<blockquote>\n<p>Boxes in the normal flow belong to a formatting context, which in CSS 2 may be table, block or inline, but not both simultaneously. In future levels of CSS, other types of formatting context will be introduced.</p>\n</blockquote>\n<blockquote>\n<p>Block-level boxes participate in a block formatting context. Inline-level boxes participate in an inline formatting context. Table formatting contexts are described in the chapter on tables.</p>\n</blockquote>\n<p>Also,we can find the definition of BFC(Block Formatting Context) and IFC(Inline Formatting Context). However, it really takes me a lot of time to understand what is <code>participate in a BFC or IFC</code> or <code>establish a new BFC or IFC</code>.</p>\n<p>##Explanation</p>\n<p>When the specs says that participate in a</p>\n","site":{"data":{}},"excerpt":"","more":"<p>##Preface</p>\n<p>According to CSS2.1 <a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607\" target=\"_blank\" rel=\"noopener\">specs</a> and <a href=\"http://www.w3.org/Style/css2-updates/REC-CSS2-20110607-errata.html\" target=\"_blank\" rel=\"noopener\">errata</a>,</p>\n<blockquote>\n<p>Boxes in the normal flow belong to a formatting context, which in CSS 2 may be table, block or inline, but not both simultaneously. In future levels of CSS, other types of formatting context will be introduced.</p>\n</blockquote>\n<blockquote>\n<p>Block-level boxes participate in a block formatting context. Inline-level boxes participate in an inline formatting context. Table formatting contexts are described in the chapter on tables.</p>\n</blockquote>\n<p>Also,we can find the definition of BFC(Block Formatting Context) and IFC(Inline Formatting Context). However, it really takes me a lot of time to understand what is <code>participate in a BFC or IFC</code> or <code>establish a new BFC or IFC</code>.</p>\n<p>##Explanation</p>\n<p>When the specs says that participate in a</p>\n"},{"title":"Chrome, vh Is Always Calculated as If the Url Bar Is Hidden","comments":1,"date":"2018-11-25T12:36:38.000Z","_content":"\nThe first time when I know `vh` I was very excited. Finally, we can do this by `css` instead of `js`. However, still too naive.\n\nAs we all know, scroll bar would hide automatically on mobile. So, it wouldn't affect the layout like on desktop.\n\nHowever, the address bar would also hide when scrolling. Like images below:\n\n![](../images/微信图片_20181125213110.jpg)\n\n![](../images/微信图片_20181125213118.jpg)\n\nAnd the code is:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n    <style>\n      * {\n        margin: 0;\n        padding: 0;\n      }\n\n      html,\n      body,\n      .app {\n        /* height: 100%; */\n        height: 100vh;\n      }\n\n      .app {\n        width: 100%;\n        border: 10px solid orange;\n        box-sizing: border-box;\n        position: relative;\n      }\n\n      .app__footer {\n        height: 100px;\n        width: 100%;\n        box-sizing: border-box;\n        border: 10px solid pink;\n        position: absolute;\n        bottom: 0;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id=\"app\" class=\"app\">\n      <header class=\"app__header\"></header>\n      <main class=\"app__main\"></main>\n      <footer class=\"app__footer\">app__footer</footer>\n    </div>\n  </body>\n</html>\n```\n\nThe viewport size changes when scrolling. In my Mi6X, the smaller is `659px` while the larger one is `715px` when the address bar is hidden.\n\nAccording to test on chrome 70, `height:100%` and `window.innerHeight` is always equal to the smaller one. I think it is correct. I also thought `100vh` would act like `100%`. However, it's not.\n\nAccording to [developers.google][url bar resizing] the `vh` is always calculated as if the URL bar is hidden since Chrome version 56.\n\nSo, `100vh` is equal to the larger one which is 715px on my phone. That's why images above would happen. In this case, if we use something like `bottom:0;` with `100vh` we would meet situation like image one. Part of `app__footer` was covered. Instead, if we use `height:100%`, it won't happen.\n\nHowever, as we all know it wouldn't be possible to use 100% when we were in nested css modules. So, in this case, how can we get the 100% in nested css modules?\n\nOf course, we can save the 100% to `rem` like:\n\n```js\ndocument.documentElement.style.fontSize = window.innerHeight * 0.01 + 'px'\n```\n\nBut I think the better way is using [CSS_variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables). For example:\n\n```css\nhtml,\nbody,\n.app {\n  /* height: 100%; */\n  /* height: 100vh; */\n  height: calc(var(--vh) * 100);\n}\n```\n\n```js\ndocument.documentElement.style.setProperty(\n  '--vh',\n  window.innerHeight * 0.01 + 'px'\n)\n```\n\nAlso, if you are worried about the compatibility. Here is the [polyfill](https://github.com/jhildenbiddle/css-vars-ponyfill).\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/38)\n\n## Reference\n\n- [the-trick-to-viewport-units-on-mobile](https://css-tricks.com/the-trick-to-viewport-units-on-mobile/)\n- [CSS3 100vh not constant in mobile browser](https://stackoverflow.com/questions/37112218/css3-100vh-not-constant-in-mobile-browser)\n\n[url bar resizing]: https://developers.google.com/web/updates/2016/12/url-bar-resizing\n","source":"_posts/chrome-vh-is-always-calculated-as-if-the-url-bar-is-hidden.md","raw":"---\ntitle: Chrome, vh Is Always Calculated as If the Url Bar Is Hidden\ncategories: css\ntags:\n  - vh\n  - CSS variables\ncomments: true\ndate: 2018-11-25 20:36:38\n---\n\nThe first time when I know `vh` I was very excited. Finally, we can do this by `css` instead of `js`. However, still too naive.\n\nAs we all know, scroll bar would hide automatically on mobile. So, it wouldn't affect the layout like on desktop.\n\nHowever, the address bar would also hide when scrolling. Like images below:\n\n![](../images/微信图片_20181125213110.jpg)\n\n![](../images/微信图片_20181125213118.jpg)\n\nAnd the code is:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n    <style>\n      * {\n        margin: 0;\n        padding: 0;\n      }\n\n      html,\n      body,\n      .app {\n        /* height: 100%; */\n        height: 100vh;\n      }\n\n      .app {\n        width: 100%;\n        border: 10px solid orange;\n        box-sizing: border-box;\n        position: relative;\n      }\n\n      .app__footer {\n        height: 100px;\n        width: 100%;\n        box-sizing: border-box;\n        border: 10px solid pink;\n        position: absolute;\n        bottom: 0;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id=\"app\" class=\"app\">\n      <header class=\"app__header\"></header>\n      <main class=\"app__main\"></main>\n      <footer class=\"app__footer\">app__footer</footer>\n    </div>\n  </body>\n</html>\n```\n\nThe viewport size changes when scrolling. In my Mi6X, the smaller is `659px` while the larger one is `715px` when the address bar is hidden.\n\nAccording to test on chrome 70, `height:100%` and `window.innerHeight` is always equal to the smaller one. I think it is correct. I also thought `100vh` would act like `100%`. However, it's not.\n\nAccording to [developers.google][url bar resizing] the `vh` is always calculated as if the URL bar is hidden since Chrome version 56.\n\nSo, `100vh` is equal to the larger one which is 715px on my phone. That's why images above would happen. In this case, if we use something like `bottom:0;` with `100vh` we would meet situation like image one. Part of `app__footer` was covered. Instead, if we use `height:100%`, it won't happen.\n\nHowever, as we all know it wouldn't be possible to use 100% when we were in nested css modules. So, in this case, how can we get the 100% in nested css modules?\n\nOf course, we can save the 100% to `rem` like:\n\n```js\ndocument.documentElement.style.fontSize = window.innerHeight * 0.01 + 'px'\n```\n\nBut I think the better way is using [CSS_variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables). For example:\n\n```css\nhtml,\nbody,\n.app {\n  /* height: 100%; */\n  /* height: 100vh; */\n  height: calc(var(--vh) * 100);\n}\n```\n\n```js\ndocument.documentElement.style.setProperty(\n  '--vh',\n  window.innerHeight * 0.01 + 'px'\n)\n```\n\nAlso, if you are worried about the compatibility. Here is the [polyfill](https://github.com/jhildenbiddle/css-vars-ponyfill).\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/38)\n\n## Reference\n\n- [the-trick-to-viewport-units-on-mobile](https://css-tricks.com/the-trick-to-viewport-units-on-mobile/)\n- [CSS3 100vh not constant in mobile browser](https://stackoverflow.com/questions/37112218/css3-100vh-not-constant-in-mobile-browser)\n\n[url bar resizing]: https://developers.google.com/web/updates/2016/12/url-bar-resizing\n","slug":"chrome-vh-is-always-calculated-as-if-the-url-bar-is-hidden","published":1,"updated":"2018-12-07T14:04:19.319Z","layout":"post","photos":[],"link":"","_id":"cjv0yvinu000vborplbfz3mq7","content":"<p>The first time when I know <code>vh</code> I was very excited. Finally, we can do this by <code>css</code> instead of <code>js</code>. However, still too naive.</p>\n<p>As we all know, scroll bar would hide automatically on mobile. So, it wouldn't affect the layout like on desktop.</p>\n<p>However, the address bar would also hide when scrolling. Like images below:</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181125213110.jpg\" alt=\"\"></p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181125213118.jpg\" alt=\"\"></p>\n<p>And the code is:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      * &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        padding: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      html,</span></span><br><span class=\"line\"><span class=\"undefined\">      body,</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.app</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* height: 100%; */</span></span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100vh;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.app</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        border: 10px solid orange;</span></span><br><span class=\"line\"><span class=\"undefined\">        box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: relative;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.app__footer</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"undefined\">        border: 10px solid pink;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        bottom: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app__header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app__main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app__footer\"</span>&gt;</span>app__footer<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>The viewport size changes when scrolling. In my Mi6X, the smaller is <code>659px</code> while the larger one is <code>715px</code> when the address bar is hidden.</p>\n<p>According to test on chrome 70, <code>height:100%</code> and <code>window.innerHeight</code> is always equal to the smaller one. I think it is correct. I also thought <code>100vh</code> would act like <code>100%</code>. However, it's not.</p>\n<p>According to <a href=\"https://developers.google.com/web/updates/2016/12/url-bar-resizing\" target=\"_blank\" rel=\"noopener\">developers.google</a> the <code>vh</code> is always calculated as if the URL bar is hidden since Chrome version 56.</p>\n<p>So, <code>100vh</code> is equal to the larger one which is 715px on my phone. That's why images above would happen. In this case, if we use something like <code>bottom:0;</code> with <code>100vh</code> we would meet situation like image one. Part of <code>app__footer</code> was covered. Instead, if we use <code>height:100%</code>, it won't happen.</p>\n<p>However, as we all know it wouldn't be possible to use 100% when we were in nested css modules. So, in this case, how can we get the 100% in nested css modules?</p>\n<p>Of course, we can save the 100% to <code>rem</code> like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.style.fontSize = <span class=\"built_in\">window</span>.innerHeight * <span class=\"number\">0.01</span> + <span class=\"string\">'px'</span></span><br></pre></td></tr></table></figure></p>\n<p>But I think the better way is using <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables\" target=\"_blank\" rel=\"noopener\">CSS_variables</a>. For example:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.app</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* height: 100%; */</span></span><br><span class=\"line\">  <span class=\"comment\">/* height: 100vh; */</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"built_in\">calc</span>(var(--vh) * <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.style.setProperty(</span><br><span class=\"line\">  <span class=\"string\">'--vh'</span>,</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.innerHeight * <span class=\"number\">0.01</span> + <span class=\"string\">'px'</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>Also, if you are worried about the compatibility. Here is the <a href=\"https://github.com/jhildenbiddle/css-vars-ponyfill\">polyfill</a>.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/38\"><strong>Original Post</strong></a></p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\" target=\"_blank\" rel=\"noopener\">the-trick-to-viewport-units-on-mobile</a></li>\n<li><a href=\"https://stackoverflow.com/questions/37112218/css3-100vh-not-constant-in-mobile-browser\" target=\"_blank\" rel=\"noopener\">CSS3 100vh not constant in mobile browser</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>The first time when I know <code>vh</code> I was very excited. Finally, we can do this by <code>css</code> instead of <code>js</code>. However, still too naive.</p>\n<p>As we all know, scroll bar would hide automatically on mobile. So, it wouldn't affect the layout like on desktop.</p>\n<p>However, the address bar would also hide when scrolling. Like images below:</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181125213110.jpg\" alt=\"\"></p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181125213118.jpg\" alt=\"\"></p>\n<p>And the code is:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      * &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">        padding: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      html,</span></span><br><span class=\"line\"><span class=\"undefined\">      body,</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.app</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* height: 100%; */</span></span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100vh;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.app</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        border: 10px solid orange;</span></span><br><span class=\"line\"><span class=\"undefined\">        box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: relative;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.app__footer</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"undefined\">        border: 10px solid pink;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        bottom: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app__header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app__main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app__footer\"</span>&gt;</span>app__footer<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>The viewport size changes when scrolling. In my Mi6X, the smaller is <code>659px</code> while the larger one is <code>715px</code> when the address bar is hidden.</p>\n<p>According to test on chrome 70, <code>height:100%</code> and <code>window.innerHeight</code> is always equal to the smaller one. I think it is correct. I also thought <code>100vh</code> would act like <code>100%</code>. However, it's not.</p>\n<p>According to <a href=\"https://developers.google.com/web/updates/2016/12/url-bar-resizing\" target=\"_blank\" rel=\"noopener\">developers.google</a> the <code>vh</code> is always calculated as if the URL bar is hidden since Chrome version 56.</p>\n<p>So, <code>100vh</code> is equal to the larger one which is 715px on my phone. That's why images above would happen. In this case, if we use something like <code>bottom:0;</code> with <code>100vh</code> we would meet situation like image one. Part of <code>app__footer</code> was covered. Instead, if we use <code>height:100%</code>, it won't happen.</p>\n<p>However, as we all know it wouldn't be possible to use 100% when we were in nested css modules. So, in this case, how can we get the 100% in nested css modules?</p>\n<p>Of course, we can save the 100% to <code>rem</code> like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.style.fontSize = <span class=\"built_in\">window</span>.innerHeight * <span class=\"number\">0.01</span> + <span class=\"string\">'px'</span></span><br></pre></td></tr></table></figure></p>\n<p>But I think the better way is using <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables\" target=\"_blank\" rel=\"noopener\">CSS_variables</a>. For example:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.app</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* height: 100%; */</span></span><br><span class=\"line\">  <span class=\"comment\">/* height: 100vh; */</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"built_in\">calc</span>(var(--vh) * <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.style.setProperty(</span><br><span class=\"line\">  <span class=\"string\">'--vh'</span>,</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.innerHeight * <span class=\"number\">0.01</span> + <span class=\"string\">'px'</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>Also, if you are worried about the compatibility. Here is the <a href=\"https://github.com/jhildenbiddle/css-vars-ponyfill\">polyfill</a>.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/38\"><strong>Original Post</strong></a></p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\" target=\"_blank\" rel=\"noopener\">the-trick-to-viewport-units-on-mobile</a></li>\n<li><a href=\"https://stackoverflow.com/questions/37112218/css3-100vh-not-constant-in-mobile-browser\" target=\"_blank\" rel=\"noopener\">CSS3 100vh not constant in mobile browser</a></li>\n</ul>\n"},{"title":"Build Multiple Choice Cascader with Third Party ui","comments":1,"date":"2018-11-18T10:04:47.000Z","_content":"\n## Preface\n\nI need to make a cascader which can support multiple choices. However, I didn't find any ui which supports that until 2018.11.18. That was a little pity.\n\n## Main\n\nI check the `element-ui` and find multiple cascader was in toDoList while `ant-design` refuse to support that directly. Maybe because they have already implemented [TreeSelect](https://ant.design/components/tree-select/). Here is what `TreeSelect` looks like:\n\n![](../images/1542536446656.gif)\n\nAlmost the result I want except the ui. It doesn't look like a cascader but a tree.\n\nAnyway, I built a multiple cascader component based on select and cascader in `ant-design-vue`. Here is the result:\n\n![](../images/1542536827531.gif)\n\nThe principle is easy. I use the `input` in `select` and hide the popup. And then I hide the `input` in `cascader` and show the popup. So, MultipleCascader is equal to `input` in `select` plus popup in `cascader` and use `transform` to let them stay together.\n\nTalking about the event, you have to listen and change the data to show correctly. That is a little troublesome.\n\nAnyway, here is the earliest [demo](https://codesandbox.io/s/8njr9xy212) in codesandbox. I am not sure if the demo would be always able to visit.\n\nThe latest version is in [here](https://github.com/xianshenglu/vue/tree/master/demo/multi-cascader-ant-design-vue).\nSo, here is the earliest code:\n\n_App.vue_\n\n```vue\n<template>\n  <div id=\"app\" class=\"app\"><MultipleCascader /></div>\n</template>\n\n<script>\nimport MultipleCascader from './components/MultipleCascader'\nexport default {\n  name: 'app',\n  components: {\n    MultipleCascader\n  }\n}\n</script>\n\n<style scoped></style>\n```\n\n_MultipleCascader.vue_\n\n```vue\n<template>\n  <div class=\"multi_cascader\">\n    <a-cascader\n      size=\"large\"\n      class=\"multi_cascader__cascader\"\n      :popupVisible=\"cascaderPopupVisible\"\n      :popupClassName=\"'multi_cascader__cascader_popup' + timestamp\"\n      changeOnSelect\n      expandTrigger=\"hover\"\n      :options=\"cascaderOptions\"\n      :fieldNames=\"{ label: 'label', value: 'id', children: 'children' }\"\n      v-model=\"cascaderValues\"\n      ref=\"cascader\"\n      :showSearch=\"{ cascaderFilter }\"\n      @change=\"cascaderChange\"\n    ></a-cascader>\n    <a-select\n      size=\"large\"\n      class=\"multi_cascader__select\"\n      dropdownClassName=\"hide\"\n      mode=\"multiple\"\n      :value=\"selectValues\"\n      allowClear\n      placeholder=\"Please select\"\n      :options=\"selectOptions\"\n      @focus=\"cascaderPopupVisible = true\"\n      @deselect=\"deleteOption\"\n      @change=\"selectChange\"\n      @search=\"selectSearch\"\n    ></a-select>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'MultipleCascader',\n  data: function() {\n    return {\n      timestamp: Date.now(),\n      selectOptions: [],\n      selectValues: [],\n      cascaderPopupVisible: false,\n      cascaderValues: [],\n      cascaderOptions: [\n        {\n          id: 1,\n          value: '1',\n          label: '1',\n          children: [\n            { id: 1.1, value: 1.1, label: '1-1' },\n            {\n              id: 1.2,\n              value: 1.2,\n              label: '1-2',\n              children: [\n                { id: 1.21, value: 1.21, label: '1-2-1' },\n                { id: 1.22, value: 1.22, label: '1-2-2' }\n              ]\n            }\n          ]\n        },\n        { id: 2, value: 2, label: '2' }\n      ]\n    }\n  },\n  mounted() {\n    document.addEventListener('click', this.hideCascaderPopup)\n  },\n  destroyed() {\n    document.removeEventListener('click', this.hideCascaderPopup)\n  },\n  methods: {\n    cascaderChange(values, options) {\n      // you may have different logic with the selected option, here I just want the last one.\n      let targetValue = values.slice(-1).pop()\n      let targetOption = options.slice(-1).pop()\n      let selectedValIndex = this.selectValues.indexOf(targetValue)\n      if (selectedValIndex >= 0) {\n        this.selectValues.splice(selectedValIndex, 1)\n        this.selectOptions.splice(selectedValIndex, 1)\n      } else {\n        this.selectValues.push(targetValue)\n        this.selectOptions.push(targetOption)\n      }\n    },\n    deleteOption(value) {\n      let selectedValIndex = this.selectValues.indexOf(value)\n      this.cascaderChange([value], [this.selectOptions[selectedValIndex]])\n    },\n    selectChange(values, vNodes) {\n      if (values.length === 0) {\n        this.selectValues = []\n        this.selectOptions = []\n      }\n    },\n    selectSearch(keyword) {\n      let searchInput = this.$refs.cascader.$el.querySelector('input')\n      if (searchInput) {\n        searchInput.value = keyword\n        searchInput.dispatchEvent(new Event('input'))\n      }\n    },\n    cascaderFilter(inputValue, path) {\n      return path.some(\n        option =>\n          option.label.toLowerCase().indexOf(inputValue.toLowerCase()) > -1\n      )\n    },\n    hideCascaderPopup(event) {\n      let cascaderPopup = document.querySelector(\n        '.multi_cascader__cascader_popup' + this.timestamp\n      )\n      let isClickCascaderPopup =\n        cascaderPopup && cascaderPopup.contains(event.target)\n      if (isClickCascaderPopup) {\n        return\n      }\n      this.cascaderPopupVisible = false\n    }\n  }\n}\n</script>\n\n<style scoped>\n.multi_cascader {\n  height: 100vh;\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  align-items: center;\n}\n.multi_cascader__select {\n  width: 50%;\n  margin-top: 0;\n  margin-bottom: auto;\n  transform: translate(0, -100%);\n}\n.multi_cascader__cascader {\n  width: 50%;\n  margin-top: auto;\n  margin-bottom: 0;\n  opacity: 0;\n}\n</style>\n\n<style>\n/* global style*/\n.hide {\n  display: none;\n}\n</style>\n```\n\n## Ending\n\n## Reference\n","source":"_posts/build-multiple-choice-cascader-with-third-party-ui.md","raw":"---\ntitle: Build Multiple Choice Cascader with Third Party ui\ncategories: frame\ntags:\n  - ant-design-vue\n  - vue\n  - multiple-choice-cascader\ncomments: true\ndate: 2018-11-18 18:04:47\n---\n\n## Preface\n\nI need to make a cascader which can support multiple choices. However, I didn't find any ui which supports that until 2018.11.18. That was a little pity.\n\n## Main\n\nI check the `element-ui` and find multiple cascader was in toDoList while `ant-design` refuse to support that directly. Maybe because they have already implemented [TreeSelect](https://ant.design/components/tree-select/). Here is what `TreeSelect` looks like:\n\n![](../images/1542536446656.gif)\n\nAlmost the result I want except the ui. It doesn't look like a cascader but a tree.\n\nAnyway, I built a multiple cascader component based on select and cascader in `ant-design-vue`. Here is the result:\n\n![](../images/1542536827531.gif)\n\nThe principle is easy. I use the `input` in `select` and hide the popup. And then I hide the `input` in `cascader` and show the popup. So, MultipleCascader is equal to `input` in `select` plus popup in `cascader` and use `transform` to let them stay together.\n\nTalking about the event, you have to listen and change the data to show correctly. That is a little troublesome.\n\nAnyway, here is the earliest [demo](https://codesandbox.io/s/8njr9xy212) in codesandbox. I am not sure if the demo would be always able to visit.\n\nThe latest version is in [here](https://github.com/xianshenglu/vue/tree/master/demo/multi-cascader-ant-design-vue).\nSo, here is the earliest code:\n\n_App.vue_\n\n```vue\n<template>\n  <div id=\"app\" class=\"app\"><MultipleCascader /></div>\n</template>\n\n<script>\nimport MultipleCascader from './components/MultipleCascader'\nexport default {\n  name: 'app',\n  components: {\n    MultipleCascader\n  }\n}\n</script>\n\n<style scoped></style>\n```\n\n_MultipleCascader.vue_\n\n```vue\n<template>\n  <div class=\"multi_cascader\">\n    <a-cascader\n      size=\"large\"\n      class=\"multi_cascader__cascader\"\n      :popupVisible=\"cascaderPopupVisible\"\n      :popupClassName=\"'multi_cascader__cascader_popup' + timestamp\"\n      changeOnSelect\n      expandTrigger=\"hover\"\n      :options=\"cascaderOptions\"\n      :fieldNames=\"{ label: 'label', value: 'id', children: 'children' }\"\n      v-model=\"cascaderValues\"\n      ref=\"cascader\"\n      :showSearch=\"{ cascaderFilter }\"\n      @change=\"cascaderChange\"\n    ></a-cascader>\n    <a-select\n      size=\"large\"\n      class=\"multi_cascader__select\"\n      dropdownClassName=\"hide\"\n      mode=\"multiple\"\n      :value=\"selectValues\"\n      allowClear\n      placeholder=\"Please select\"\n      :options=\"selectOptions\"\n      @focus=\"cascaderPopupVisible = true\"\n      @deselect=\"deleteOption\"\n      @change=\"selectChange\"\n      @search=\"selectSearch\"\n    ></a-select>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'MultipleCascader',\n  data: function() {\n    return {\n      timestamp: Date.now(),\n      selectOptions: [],\n      selectValues: [],\n      cascaderPopupVisible: false,\n      cascaderValues: [],\n      cascaderOptions: [\n        {\n          id: 1,\n          value: '1',\n          label: '1',\n          children: [\n            { id: 1.1, value: 1.1, label: '1-1' },\n            {\n              id: 1.2,\n              value: 1.2,\n              label: '1-2',\n              children: [\n                { id: 1.21, value: 1.21, label: '1-2-1' },\n                { id: 1.22, value: 1.22, label: '1-2-2' }\n              ]\n            }\n          ]\n        },\n        { id: 2, value: 2, label: '2' }\n      ]\n    }\n  },\n  mounted() {\n    document.addEventListener('click', this.hideCascaderPopup)\n  },\n  destroyed() {\n    document.removeEventListener('click', this.hideCascaderPopup)\n  },\n  methods: {\n    cascaderChange(values, options) {\n      // you may have different logic with the selected option, here I just want the last one.\n      let targetValue = values.slice(-1).pop()\n      let targetOption = options.slice(-1).pop()\n      let selectedValIndex = this.selectValues.indexOf(targetValue)\n      if (selectedValIndex >= 0) {\n        this.selectValues.splice(selectedValIndex, 1)\n        this.selectOptions.splice(selectedValIndex, 1)\n      } else {\n        this.selectValues.push(targetValue)\n        this.selectOptions.push(targetOption)\n      }\n    },\n    deleteOption(value) {\n      let selectedValIndex = this.selectValues.indexOf(value)\n      this.cascaderChange([value], [this.selectOptions[selectedValIndex]])\n    },\n    selectChange(values, vNodes) {\n      if (values.length === 0) {\n        this.selectValues = []\n        this.selectOptions = []\n      }\n    },\n    selectSearch(keyword) {\n      let searchInput = this.$refs.cascader.$el.querySelector('input')\n      if (searchInput) {\n        searchInput.value = keyword\n        searchInput.dispatchEvent(new Event('input'))\n      }\n    },\n    cascaderFilter(inputValue, path) {\n      return path.some(\n        option =>\n          option.label.toLowerCase().indexOf(inputValue.toLowerCase()) > -1\n      )\n    },\n    hideCascaderPopup(event) {\n      let cascaderPopup = document.querySelector(\n        '.multi_cascader__cascader_popup' + this.timestamp\n      )\n      let isClickCascaderPopup =\n        cascaderPopup && cascaderPopup.contains(event.target)\n      if (isClickCascaderPopup) {\n        return\n      }\n      this.cascaderPopupVisible = false\n    }\n  }\n}\n</script>\n\n<style scoped>\n.multi_cascader {\n  height: 100vh;\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  align-items: center;\n}\n.multi_cascader__select {\n  width: 50%;\n  margin-top: 0;\n  margin-bottom: auto;\n  transform: translate(0, -100%);\n}\n.multi_cascader__cascader {\n  width: 50%;\n  margin-top: auto;\n  margin-bottom: 0;\n  opacity: 0;\n}\n</style>\n\n<style>\n/* global style*/\n.hide {\n  display: none;\n}\n</style>\n```\n\n## Ending\n\n## Reference\n","slug":"build-multiple-choice-cascader-with-third-party-ui","published":1,"updated":"2018-11-18T14:14:49.755Z","layout":"post","photos":[],"link":"","_id":"cjv0yvio1000xborpjnrpsh5u","content":"<h2>Preface</h2>\n<p>I need to make a cascader which can support multiple choices. However, I didn't find any ui which supports that until 2018.11.18. That was a little pity.</p>\n<h2>Main</h2>\n<p>I check the <code>element-ui</code> and find multiple cascader was in toDoList while <code>ant-design</code> refuse to support that directly. Maybe because they have already implemented <a href=\"https://ant.design/components/tree-select/\" target=\"_blank\" rel=\"noopener\">TreeSelect</a>. Here is what <code>TreeSelect</code> looks like:</p>\n<p><img src=\"../images/1542536446656.gif\" alt=\"\"></p>\n<p>Almost the result I want except the ui. It doesn't look like a cascader but a tree.</p>\n<p>Anyway, I built a multiple cascader component based on select and cascader in <code>ant-design-vue</code>. Here is the result:</p>\n<p><img src=\"../images/1542536827531.gif\" alt=\"\"></p>\n<p>The principle is easy. I use the <code>input</code> in <code>select</code> and hide the popup. And then I hide the <code>input</code> in <code>cascader</code> and show the popup. So, MultipleCascader is equal to <code>input</code> in <code>select</code> plus popup in <code>cascader</code> and use <code>transform</code> to let them stay together.</p>\n<p>Talking about the event, you have to listen and change the data to show correctly. That is a little troublesome.</p>\n<p>Anyway, here is the earliest <a href=\"https://codesandbox.io/s/8njr9xy212\" target=\"_blank\" rel=\"noopener\">demo</a> in codesandbox. I am not sure if the demo would be always able to visit.</p>\n<p>The latest version is in <a href=\"https://github.com/xianshenglu/vue/tree/master/demo/multi-cascader-ant-design-vue\">here</a>.\nSo, here is the earliest code:</p>\n<p><em>App.vue</em></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot; class=&quot;app&quot;&gt;&lt;MultipleCascader /&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import MultipleCascader from &apos;./components/MultipleCascader&apos;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;app&apos;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    MultipleCascader</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p><em>MultipleCascader.vue</em></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;multi_cascader&quot;&gt;</span><br><span class=\"line\">    &lt;a-cascader</span><br><span class=\"line\">      size=&quot;large&quot;</span><br><span class=\"line\">      class=&quot;multi_cascader__cascader&quot;</span><br><span class=\"line\">      :popupVisible=&quot;cascaderPopupVisible&quot;</span><br><span class=\"line\">      :popupClassName=&quot;&apos;multi_cascader__cascader_popup&apos; + timestamp&quot;</span><br><span class=\"line\">      changeOnSelect</span><br><span class=\"line\">      expandTrigger=&quot;hover&quot;</span><br><span class=\"line\">      :options=&quot;cascaderOptions&quot;</span><br><span class=\"line\">      :fieldNames=&quot;&#123; label: &apos;label&apos;, value: &apos;id&apos;, children: &apos;children&apos; &#125;&quot;</span><br><span class=\"line\">      v-model=&quot;cascaderValues&quot;</span><br><span class=\"line\">      ref=&quot;cascader&quot;</span><br><span class=\"line\">      :showSearch=&quot;&#123; cascaderFilter &#125;&quot;</span><br><span class=\"line\">      @change=&quot;cascaderChange&quot;</span><br><span class=\"line\">    &gt;&lt;/a-cascader&gt;</span><br><span class=\"line\">    &lt;a-select</span><br><span class=\"line\">      size=&quot;large&quot;</span><br><span class=\"line\">      class=&quot;multi_cascader__select&quot;</span><br><span class=\"line\">      dropdownClassName=&quot;hide&quot;</span><br><span class=\"line\">      mode=&quot;multiple&quot;</span><br><span class=\"line\">      :value=&quot;selectValues&quot;</span><br><span class=\"line\">      allowClear</span><br><span class=\"line\">      placeholder=&quot;Please select&quot;</span><br><span class=\"line\">      :options=&quot;selectOptions&quot;</span><br><span class=\"line\">      @focus=&quot;cascaderPopupVisible = true&quot;</span><br><span class=\"line\">      @deselect=&quot;deleteOption&quot;</span><br><span class=\"line\">      @change=&quot;selectChange&quot;</span><br><span class=\"line\">      @search=&quot;selectSearch&quot;</span><br><span class=\"line\">    &gt;&lt;/a-select&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;MultipleCascader&apos;,</span><br><span class=\"line\">  data: function() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      timestamp: Date.now(),</span><br><span class=\"line\">      selectOptions: [],</span><br><span class=\"line\">      selectValues: [],</span><br><span class=\"line\">      cascaderPopupVisible: false,</span><br><span class=\"line\">      cascaderValues: [],</span><br><span class=\"line\">      cascaderOptions: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          id: 1,</span><br><span class=\"line\">          value: &apos;1&apos;,</span><br><span class=\"line\">          label: &apos;1&apos;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            &#123; id: 1.1, value: 1.1, label: &apos;1-1&apos; &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              id: 1.2,</span><br><span class=\"line\">              value: 1.2,</span><br><span class=\"line\">              label: &apos;1-2&apos;,</span><br><span class=\"line\">              children: [</span><br><span class=\"line\">                &#123; id: 1.21, value: 1.21, label: &apos;1-2-1&apos; &#125;,</span><br><span class=\"line\">                &#123; id: 1.22, value: 1.22, label: &apos;1-2-2&apos; &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123; id: 2, value: 2, label: &apos;2&apos; &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    document.addEventListener(&apos;click&apos;, this.hideCascaderPopup)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  destroyed() &#123;</span><br><span class=\"line\">    document.removeEventListener(&apos;click&apos;, this.hideCascaderPopup)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    cascaderChange(values, options) &#123;</span><br><span class=\"line\">      // you may have different logic with the selected option, here I just want the last one.</span><br><span class=\"line\">      let targetValue = values.slice(-1).pop()</span><br><span class=\"line\">      let targetOption = options.slice(-1).pop()</span><br><span class=\"line\">      let selectedValIndex = this.selectValues.indexOf(targetValue)</span><br><span class=\"line\">      if (selectedValIndex &gt;= 0) &#123;</span><br><span class=\"line\">        this.selectValues.splice(selectedValIndex, 1)</span><br><span class=\"line\">        this.selectOptions.splice(selectedValIndex, 1)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        this.selectValues.push(targetValue)</span><br><span class=\"line\">        this.selectOptions.push(targetOption)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deleteOption(value) &#123;</span><br><span class=\"line\">      let selectedValIndex = this.selectValues.indexOf(value)</span><br><span class=\"line\">      this.cascaderChange([value], [this.selectOptions[selectedValIndex]])</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    selectChange(values, vNodes) &#123;</span><br><span class=\"line\">      if (values.length === 0) &#123;</span><br><span class=\"line\">        this.selectValues = []</span><br><span class=\"line\">        this.selectOptions = []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    selectSearch(keyword) &#123;</span><br><span class=\"line\">      let searchInput = this.$refs.cascader.$el.querySelector(&apos;input&apos;)</span><br><span class=\"line\">      if (searchInput) &#123;</span><br><span class=\"line\">        searchInput.value = keyword</span><br><span class=\"line\">        searchInput.dispatchEvent(new Event(&apos;input&apos;))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    cascaderFilter(inputValue, path) &#123;</span><br><span class=\"line\">      return path.some(</span><br><span class=\"line\">        option =&gt;</span><br><span class=\"line\">          option.label.toLowerCase().indexOf(inputValue.toLowerCase()) &gt; -1</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hideCascaderPopup(event) &#123;</span><br><span class=\"line\">      let cascaderPopup = document.querySelector(</span><br><span class=\"line\">        &apos;.multi_cascader__cascader_popup&apos; + this.timestamp</span><br><span class=\"line\">      )</span><br><span class=\"line\">      let isClickCascaderPopup =</span><br><span class=\"line\">        cascaderPopup &amp;&amp; cascaderPopup.contains(event.target)</span><br><span class=\"line\">      if (isClickCascaderPopup) &#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      this.cascaderPopupVisible = false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.multi_cascader &#123;</span><br><span class=\"line\">  height: 100vh;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  flex-flow: column;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">  align-items: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.multi_cascader__select &#123;</span><br><span class=\"line\">  width: 50%;</span><br><span class=\"line\">  margin-top: 0;</span><br><span class=\"line\">  margin-bottom: auto;</span><br><span class=\"line\">  transform: translate(0, -100%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.multi_cascader__cascader &#123;</span><br><span class=\"line\">  width: 50%;</span><br><span class=\"line\">  margin-top: auto;</span><br><span class=\"line\">  margin-bottom: 0;</span><br><span class=\"line\">  opacity: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">/* global style*/</span><br><span class=\"line\">.hide &#123;</span><br><span class=\"line\">  display: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>I need to make a cascader which can support multiple choices. However, I didn't find any ui which supports that until 2018.11.18. That was a little pity.</p>\n<h2>Main</h2>\n<p>I check the <code>element-ui</code> and find multiple cascader was in toDoList while <code>ant-design</code> refuse to support that directly. Maybe because they have already implemented <a href=\"https://ant.design/components/tree-select/\" target=\"_blank\" rel=\"noopener\">TreeSelect</a>. Here is what <code>TreeSelect</code> looks like:</p>\n<p><img src=\"../images/1542536446656.gif\" alt=\"\"></p>\n<p>Almost the result I want except the ui. It doesn't look like a cascader but a tree.</p>\n<p>Anyway, I built a multiple cascader component based on select and cascader in <code>ant-design-vue</code>. Here is the result:</p>\n<p><img src=\"../images/1542536827531.gif\" alt=\"\"></p>\n<p>The principle is easy. I use the <code>input</code> in <code>select</code> and hide the popup. And then I hide the <code>input</code> in <code>cascader</code> and show the popup. So, MultipleCascader is equal to <code>input</code> in <code>select</code> plus popup in <code>cascader</code> and use <code>transform</code> to let them stay together.</p>\n<p>Talking about the event, you have to listen and change the data to show correctly. That is a little troublesome.</p>\n<p>Anyway, here is the earliest <a href=\"https://codesandbox.io/s/8njr9xy212\" target=\"_blank\" rel=\"noopener\">demo</a> in codesandbox. I am not sure if the demo would be always able to visit.</p>\n<p>The latest version is in <a href=\"https://github.com/xianshenglu/vue/tree/master/demo/multi-cascader-ant-design-vue\">here</a>.\nSo, here is the earliest code:</p>\n<p><em>App.vue</em></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot; class=&quot;app&quot;&gt;&lt;MultipleCascader /&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import MultipleCascader from &apos;./components/MultipleCascader&apos;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;app&apos;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    MultipleCascader</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p><em>MultipleCascader.vue</em></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;multi_cascader&quot;&gt;</span><br><span class=\"line\">    &lt;a-cascader</span><br><span class=\"line\">      size=&quot;large&quot;</span><br><span class=\"line\">      class=&quot;multi_cascader__cascader&quot;</span><br><span class=\"line\">      :popupVisible=&quot;cascaderPopupVisible&quot;</span><br><span class=\"line\">      :popupClassName=&quot;&apos;multi_cascader__cascader_popup&apos; + timestamp&quot;</span><br><span class=\"line\">      changeOnSelect</span><br><span class=\"line\">      expandTrigger=&quot;hover&quot;</span><br><span class=\"line\">      :options=&quot;cascaderOptions&quot;</span><br><span class=\"line\">      :fieldNames=&quot;&#123; label: &apos;label&apos;, value: &apos;id&apos;, children: &apos;children&apos; &#125;&quot;</span><br><span class=\"line\">      v-model=&quot;cascaderValues&quot;</span><br><span class=\"line\">      ref=&quot;cascader&quot;</span><br><span class=\"line\">      :showSearch=&quot;&#123; cascaderFilter &#125;&quot;</span><br><span class=\"line\">      @change=&quot;cascaderChange&quot;</span><br><span class=\"line\">    &gt;&lt;/a-cascader&gt;</span><br><span class=\"line\">    &lt;a-select</span><br><span class=\"line\">      size=&quot;large&quot;</span><br><span class=\"line\">      class=&quot;multi_cascader__select&quot;</span><br><span class=\"line\">      dropdownClassName=&quot;hide&quot;</span><br><span class=\"line\">      mode=&quot;multiple&quot;</span><br><span class=\"line\">      :value=&quot;selectValues&quot;</span><br><span class=\"line\">      allowClear</span><br><span class=\"line\">      placeholder=&quot;Please select&quot;</span><br><span class=\"line\">      :options=&quot;selectOptions&quot;</span><br><span class=\"line\">      @focus=&quot;cascaderPopupVisible = true&quot;</span><br><span class=\"line\">      @deselect=&quot;deleteOption&quot;</span><br><span class=\"line\">      @change=&quot;selectChange&quot;</span><br><span class=\"line\">      @search=&quot;selectSearch&quot;</span><br><span class=\"line\">    &gt;&lt;/a-select&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;MultipleCascader&apos;,</span><br><span class=\"line\">  data: function() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      timestamp: Date.now(),</span><br><span class=\"line\">      selectOptions: [],</span><br><span class=\"line\">      selectValues: [],</span><br><span class=\"line\">      cascaderPopupVisible: false,</span><br><span class=\"line\">      cascaderValues: [],</span><br><span class=\"line\">      cascaderOptions: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          id: 1,</span><br><span class=\"line\">          value: &apos;1&apos;,</span><br><span class=\"line\">          label: &apos;1&apos;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            &#123; id: 1.1, value: 1.1, label: &apos;1-1&apos; &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              id: 1.2,</span><br><span class=\"line\">              value: 1.2,</span><br><span class=\"line\">              label: &apos;1-2&apos;,</span><br><span class=\"line\">              children: [</span><br><span class=\"line\">                &#123; id: 1.21, value: 1.21, label: &apos;1-2-1&apos; &#125;,</span><br><span class=\"line\">                &#123; id: 1.22, value: 1.22, label: &apos;1-2-2&apos; &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123; id: 2, value: 2, label: &apos;2&apos; &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    document.addEventListener(&apos;click&apos;, this.hideCascaderPopup)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  destroyed() &#123;</span><br><span class=\"line\">    document.removeEventListener(&apos;click&apos;, this.hideCascaderPopup)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    cascaderChange(values, options) &#123;</span><br><span class=\"line\">      // you may have different logic with the selected option, here I just want the last one.</span><br><span class=\"line\">      let targetValue = values.slice(-1).pop()</span><br><span class=\"line\">      let targetOption = options.slice(-1).pop()</span><br><span class=\"line\">      let selectedValIndex = this.selectValues.indexOf(targetValue)</span><br><span class=\"line\">      if (selectedValIndex &gt;= 0) &#123;</span><br><span class=\"line\">        this.selectValues.splice(selectedValIndex, 1)</span><br><span class=\"line\">        this.selectOptions.splice(selectedValIndex, 1)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        this.selectValues.push(targetValue)</span><br><span class=\"line\">        this.selectOptions.push(targetOption)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deleteOption(value) &#123;</span><br><span class=\"line\">      let selectedValIndex = this.selectValues.indexOf(value)</span><br><span class=\"line\">      this.cascaderChange([value], [this.selectOptions[selectedValIndex]])</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    selectChange(values, vNodes) &#123;</span><br><span class=\"line\">      if (values.length === 0) &#123;</span><br><span class=\"line\">        this.selectValues = []</span><br><span class=\"line\">        this.selectOptions = []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    selectSearch(keyword) &#123;</span><br><span class=\"line\">      let searchInput = this.$refs.cascader.$el.querySelector(&apos;input&apos;)</span><br><span class=\"line\">      if (searchInput) &#123;</span><br><span class=\"line\">        searchInput.value = keyword</span><br><span class=\"line\">        searchInput.dispatchEvent(new Event(&apos;input&apos;))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    cascaderFilter(inputValue, path) &#123;</span><br><span class=\"line\">      return path.some(</span><br><span class=\"line\">        option =&gt;</span><br><span class=\"line\">          option.label.toLowerCase().indexOf(inputValue.toLowerCase()) &gt; -1</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hideCascaderPopup(event) &#123;</span><br><span class=\"line\">      let cascaderPopup = document.querySelector(</span><br><span class=\"line\">        &apos;.multi_cascader__cascader_popup&apos; + this.timestamp</span><br><span class=\"line\">      )</span><br><span class=\"line\">      let isClickCascaderPopup =</span><br><span class=\"line\">        cascaderPopup &amp;&amp; cascaderPopup.contains(event.target)</span><br><span class=\"line\">      if (isClickCascaderPopup) &#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      this.cascaderPopupVisible = false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.multi_cascader &#123;</span><br><span class=\"line\">  height: 100vh;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  flex-flow: column;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">  align-items: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.multi_cascader__select &#123;</span><br><span class=\"line\">  width: 50%;</span><br><span class=\"line\">  margin-top: 0;</span><br><span class=\"line\">  margin-bottom: auto;</span><br><span class=\"line\">  transform: translate(0, -100%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.multi_cascader__cascader &#123;</span><br><span class=\"line\">  width: 50%;</span><br><span class=\"line\">  margin-top: auto;</span><br><span class=\"line\">  margin-bottom: 0;</span><br><span class=\"line\">  opacity: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">/* global style*/</span><br><span class=\"line\">.hide &#123;</span><br><span class=\"line\">  display: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n"},{"title":"Find What Font the Browser Is Actually Using","comments":1,"date":"2018-08-04T10:16:59.000Z","_content":"\n## Preface\n\nWhen the designer asked me what is the font of some text I told her to press F12 and check the `font-family` in Computed, like this:\n\n![截图20180804182943](../images/截图20180804182943.png)\n\n## Main\n\nHowever, when I am using that `font-family` I find that I was totally wrong. The actual font the text used is this:\n\n![截图20180804183017](../images/截图20180804183017.png)\n\nThat is totally different from the `font-family` though I know that we can't be sure that the browser would use the `font-family` we set in css.\n\n## Ending\n\n## Reference\n\n- [how-can-i-determine-what-font-a-browser-is-actually-using-to-render-some-text](https://stackoverflow.com/questions/884177/how-can-i-determine-what-font-a-browser-is-actually-using-to-render-some-text)\n","source":"_posts/find-what-font-the-browser-is-actually-using.md","raw":"---\ntitle: Find What Font the Browser Is Actually Using\ntags:\n- font-family\ncategories: css\ncomments: true\ndate: 2018-08-04 18:16:59\n---\n\n## Preface\n\nWhen the designer asked me what is the font of some text I told her to press F12 and check the `font-family` in Computed, like this:\n\n![截图20180804182943](../images/截图20180804182943.png)\n\n## Main\n\nHowever, when I am using that `font-family` I find that I was totally wrong. The actual font the text used is this:\n\n![截图20180804183017](../images/截图20180804183017.png)\n\nThat is totally different from the `font-family` though I know that we can't be sure that the browser would use the `font-family` we set in css.\n\n## Ending\n\n## Reference\n\n- [how-can-i-determine-what-font-a-browser-is-actually-using-to-render-some-text](https://stackoverflow.com/questions/884177/how-can-i-determine-what-font-a-browser-is-actually-using-to-render-some-text)\n","slug":"find-what-font-the-browser-is-actually-using","published":1,"updated":"2018-08-04T11:16:07.889Z","layout":"post","photos":[],"link":"","_id":"cjv0yvioa0011borp4roymivn","content":"<h2>Preface</h2>\n<p>When the designer asked me what is the font of some text I told her to press F12 and check the <code>font-family</code> in Computed, like this:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180804182943.png\" alt=\"截图20180804182943\"></p>\n<h2>Main</h2>\n<p>However, when I am using that <code>font-family</code> I find that I was totally wrong. The actual font the text used is this:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180804183017.png\" alt=\"截图20180804183017\"></p>\n<p>That is totally different from the <code>font-family</code> though I know that we can't be sure that the browser would use the <code>font-family</code> we set in css.</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/884177/how-can-i-determine-what-font-a-browser-is-actually-using-to-render-some-text\" target=\"_blank\" rel=\"noopener\">how-can-i-determine-what-font-a-browser-is-actually-using-to-render-some-text</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>When the designer asked me what is the font of some text I told her to press F12 and check the <code>font-family</code> in Computed, like this:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180804182943.png\" alt=\"截图20180804182943\"></p>\n<h2>Main</h2>\n<p>However, when I am using that <code>font-family</code> I find that I was totally wrong. The actual font the text used is this:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180804183017.png\" alt=\"截图20180804183017\"></p>\n<p>That is totally different from the <code>font-family</code> though I know that we can't be sure that the browser would use the <code>font-family</code> we set in css.</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/884177/how-can-i-determine-what-font-a-browser-is-actually-using-to-render-some-text\" target=\"_blank\" rel=\"noopener\">how-can-i-determine-what-font-a-browser-is-actually-using-to-render-some-text</a></li>\n</ul>\n"},{"title":"event.preventDefault() in contextmenu Would Trigger mouseup event","comments":1,"date":"2018-12-27T13:16:15.000Z","_content":"\n### Question\n\nHow many logs would you have when you click and release right mouse button?\n\n#### Demo1\n\n```js\ndocument.oncontextmenu = function() {\n  console.error(event.type, Date.now())\n}\ndocument.onmouseup = function() {\n  console.error(event.type, Date.now())\n}\n```\n\n#### Demo2\n\n```js\ndocument.oncontextmenu = function() {\n  event.preventDefault()\n  console.error(event.type, Date.now())\n}\ndocument.onmouseup = function() {\n  console.error(event.type, Date.now())\n}\n```\n\nThe answer is 1,2. The question is\n\n- Does that matter?\n- And why?\n\n### Matters\n\nNormally, click and release right button would only trigger `contextmenu` instead of `mouseup`.\n\n```js\ndocument.oncontextmenu = function() {\n  console.error(event.type, Date.now())\n}\ndocument.onmouseup = function() {\n  console.error(event.type, Date.now())\n}\n```\n\nIt does make senses in most cases that when we were using `onmouseup` means that we only want to listen to the `mouseup` of left button.\n\nHowever, if you used `event.preventDefault()` in `contextmenu`, `mouseup` event would be triggered when you press and release the right button.\n\n```js\ndocument.oncontextmenu = function() {\n  event.preventDefault()\n  console.error(event.type, Date.now())\n}\ndocument.onmouseup = function() {\n  console.error(event.type, Date.now())\n}\n```\n\nIn most cases, this is not expected as it changes the behavior of `mouseup` listener because of changes in `contextmenu` listener. To be honest, this awful **unless we add button detection in `mouseup` listener every time we want to do something when user only press and release left button.**\n\n```js\ndocument.oncontextmenu = function() {\n  event.preventDefault()\n  console.error(event.type, Date.now())\n}\ndocument.onmouseup = function() {\n  if (event.button !== 0) {\n    return\n  }\n  console.error(event.type, Date.now())\n}\n```\n\n### Why\n\naccording to mdn [mouseup](https://developer.mozilla.org/en-US/docs/Web/Events/mouseup), default action of `mouseup` is\n\n> Default Action : Invoke a context menu (in combination with the right mouse button, if supported)\n\n```js\ndocument.oncontextmenu = function() {\n  console.error(event.type, Date.now())\n}\ndocument.onmouseup = function() {\n  event.preventDefault()\n  console.error(event.type, Date.now())\n}\n```\n\nHowever, at least Chrome 70 didn't prevent triggering `contextmenu` event. But it might explain something.\n\n- Because default action of `rightClick` was to invoke a context menu. So, `mouseup` won't get triggered.\n- And `event.preventDefault()` in `contextmenu` listener did the actual prevent job. So, `mouseup`\n  get triggered.\n\nAnyway, it's still hard to understand.\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/64)\n\n## Reference\n","source":"_posts/event.preventdefault()-in-contextmenu-would-trigger-mouseup-event.md","raw":"---\ntitle: event.preventDefault() in contextmenu Would Trigger mouseup event\ncategories: js\ntags:\n  - mouseup\n  - contextmenu\n  - preventDefault\ncomments: true\ndate: 2018-12-27 21:16:15\n---\n\n### Question\n\nHow many logs would you have when you click and release right mouse button?\n\n#### Demo1\n\n```js\ndocument.oncontextmenu = function() {\n  console.error(event.type, Date.now())\n}\ndocument.onmouseup = function() {\n  console.error(event.type, Date.now())\n}\n```\n\n#### Demo2\n\n```js\ndocument.oncontextmenu = function() {\n  event.preventDefault()\n  console.error(event.type, Date.now())\n}\ndocument.onmouseup = function() {\n  console.error(event.type, Date.now())\n}\n```\n\nThe answer is 1,2. The question is\n\n- Does that matter?\n- And why?\n\n### Matters\n\nNormally, click and release right button would only trigger `contextmenu` instead of `mouseup`.\n\n```js\ndocument.oncontextmenu = function() {\n  console.error(event.type, Date.now())\n}\ndocument.onmouseup = function() {\n  console.error(event.type, Date.now())\n}\n```\n\nIt does make senses in most cases that when we were using `onmouseup` means that we only want to listen to the `mouseup` of left button.\n\nHowever, if you used `event.preventDefault()` in `contextmenu`, `mouseup` event would be triggered when you press and release the right button.\n\n```js\ndocument.oncontextmenu = function() {\n  event.preventDefault()\n  console.error(event.type, Date.now())\n}\ndocument.onmouseup = function() {\n  console.error(event.type, Date.now())\n}\n```\n\nIn most cases, this is not expected as it changes the behavior of `mouseup` listener because of changes in `contextmenu` listener. To be honest, this awful **unless we add button detection in `mouseup` listener every time we want to do something when user only press and release left button.**\n\n```js\ndocument.oncontextmenu = function() {\n  event.preventDefault()\n  console.error(event.type, Date.now())\n}\ndocument.onmouseup = function() {\n  if (event.button !== 0) {\n    return\n  }\n  console.error(event.type, Date.now())\n}\n```\n\n### Why\n\naccording to mdn [mouseup](https://developer.mozilla.org/en-US/docs/Web/Events/mouseup), default action of `mouseup` is\n\n> Default Action : Invoke a context menu (in combination with the right mouse button, if supported)\n\n```js\ndocument.oncontextmenu = function() {\n  console.error(event.type, Date.now())\n}\ndocument.onmouseup = function() {\n  event.preventDefault()\n  console.error(event.type, Date.now())\n}\n```\n\nHowever, at least Chrome 70 didn't prevent triggering `contextmenu` event. But it might explain something.\n\n- Because default action of `rightClick` was to invoke a context menu. So, `mouseup` won't get triggered.\n- And `event.preventDefault()` in `contextmenu` listener did the actual prevent job. So, `mouseup`\n  get triggered.\n\nAnyway, it's still hard to understand.\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/64)\n\n## Reference\n","slug":"event.preventdefault()-in-contextmenu-would-trigger-mouseup-event","published":1,"updated":"2018-12-27T13:18:40.140Z","layout":"post","photos":[],"link":"","_id":"cjv0yviof0014borpu80ngkfb","content":"<h3>Question</h3>\n<p>How many logs would you have when you click and release right mouse button?</p>\n<h4>Demo1</h4>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4>Demo2</h4>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  event.preventDefault()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The answer is 1,2. The question is</p>\n<ul>\n<li>Does that matter?</li>\n<li>And why?</li>\n</ul>\n<h3>Matters</h3>\n<p>Normally, click and release right button would only trigger <code>contextmenu</code> instead of <code>mouseup</code>.</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>It does make senses in most cases that when we were using <code>onmouseup</code> means that we only want to listen to the <code>mouseup</code> of left button.</p>\n<p>However, if you used <code>event.preventDefault()</code> in <code>contextmenu</code>, <code>mouseup</code> event would be triggered when you press and release the right button.</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  event.preventDefault()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In most cases, this is not expected as it changes the behavior of <code>mouseup</code> listener because of changes in <code>contextmenu</code> listener. To be honest, this awful <strong>unless we add button detection in <code>mouseup</code> listener every time we want to do something when user only press and release left button.</strong></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  event.preventDefault()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.button !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3>Why</h3>\n<p>according to mdn <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/mouseup\" target=\"_blank\" rel=\"noopener\">mouseup</a>, default action of <code>mouseup</code> is</p>\n<blockquote>\n<p>Default Action : Invoke a context menu (in combination with the right mouse button, if supported)</p>\n</blockquote>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  event.preventDefault()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>However, at least Chrome 70 didn't prevent triggering <code>contextmenu</code> event. But it might explain something.</p>\n<ul>\n<li>Because default action of <code>rightClick</code> was to invoke a context menu. So, <code>mouseup</code> won't get triggered.</li>\n<li>And <code>event.preventDefault()</code> in <code>contextmenu</code> listener did the actual prevent job. So, <code>mouseup</code>\nget triggered.</li>\n</ul>\n<p>Anyway, it's still hard to understand.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/64\"><strong>Original Post</strong></a></p>\n<h2>Reference</h2>\n","site":{"data":{}},"excerpt":"","more":"<h3>Question</h3>\n<p>How many logs would you have when you click and release right mouse button?</p>\n<h4>Demo1</h4>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4>Demo2</h4>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  event.preventDefault()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The answer is 1,2. The question is</p>\n<ul>\n<li>Does that matter?</li>\n<li>And why?</li>\n</ul>\n<h3>Matters</h3>\n<p>Normally, click and release right button would only trigger <code>contextmenu</code> instead of <code>mouseup</code>.</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>It does make senses in most cases that when we were using <code>onmouseup</code> means that we only want to listen to the <code>mouseup</code> of left button.</p>\n<p>However, if you used <code>event.preventDefault()</code> in <code>contextmenu</code>, <code>mouseup</code> event would be triggered when you press and release the right button.</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  event.preventDefault()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In most cases, this is not expected as it changes the behavior of <code>mouseup</code> listener because of changes in <code>contextmenu</code> listener. To be honest, this awful <strong>unless we add button detection in <code>mouseup</code> listener every time we want to do something when user only press and release left button.</strong></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  event.preventDefault()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.button !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3>Why</h3>\n<p>according to mdn <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/mouseup\" target=\"_blank\" rel=\"noopener\">mouseup</a>, default action of <code>mouseup</code> is</p>\n<blockquote>\n<p>Default Action : Invoke a context menu (in combination with the right mouse button, if supported)</p>\n</blockquote>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  event.preventDefault()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(event.type, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>However, at least Chrome 70 didn't prevent triggering <code>contextmenu</code> event. But it might explain something.</p>\n<ul>\n<li>Because default action of <code>rightClick</code> was to invoke a context menu. So, <code>mouseup</code> won't get triggered.</li>\n<li>And <code>event.preventDefault()</code> in <code>contextmenu</code> listener did the actual prevent job. So, <code>mouseup</code>\nget triggered.</li>\n</ul>\n<p>Anyway, it's still hard to understand.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/64\"><strong>Original Post</strong></a></p>\n<h2>Reference</h2>\n"},{"title":"Image Load Error Handler","comments":1,"date":"2018-11-19T08:53:48.000Z","_content":"\n## Preface\n\nIn the past, I posted an answer in SO about how to [replace broken images](https://stackoverflow.com/questions/92720/jquery-javascript-to-replace-broken-images/50484874). And the code is\n\n```js\nwindow.addEventListener(\n  'error',\n  windowErrorCb,\n  {\n    capture: true\n  },\n  true\n)\n\nfunction windowErrorCb(event) {\n  let target = event.target\n  let isImg = target.tagName.toLowerCase() === 'img'\n  if (isImg) {\n    imgErrorCb()\n    return\n  }\n\n  function imgErrorCb() {\n    let isImgErrorHandled = target.hasAttribute('data-src-error')\n    if (!isImgErrorHandled) {\n      target.setAttribute('data-src-error', 'handled')\n      target.src = 'backup.png'\n    } else {\n      //anything you want to do\n      console.log(target.alt, 'both origin and backup image fail to load!')\n    }\n  }\n}\n```\n\nAnd the point is :\n\n1. Put the code in the head and executed as the first inline script. So, it will listen the errors happen after the script.\n\n2. Use event capturing to catch the errors earlier, also for those events which don't bubble.\n\n3. Use event delegation which avoids binding events on each image.\n\n4. Give the error img element an attribute after giving them a backup.png to avoid error of the _backup.png_ and subsequent infinite loop like below:\n\n> img error->backup.png->error->backup.png->error->,,,,,\n\nI thought the answer is almost perfect. But it turns out there is more scenes I don't know.\n\n#### No Src?\n\nUntil Chrome 70.0.3538.102 in win7, code below wouldn't trigger error event.\n\n```html\n<img />\n```\n\nBut code below would trigger!\n\n```html\n<img src=\"\" /> <img src />\n```\n\nThat does make sense. However, `img` without `src` wouldn't hidden. They would have 1px border like:\n\n![](../images/截图20181119171728.png)\n\nIn this case, we may have to do something about that. For instance,\n\n```css\nimg:not([src]) {\n  opacity: 0;\n}\n```\n\nor a default `backgroundImage` which will work on `img` though 1px border is still there.\n\n```css\nimg:not([src]) {\n  background: no-repeat left top / cover;\n  background-image: linear-gradient(to right, lightblue, pink); /*or your logo*/\n}\n```\n\n#### BackgroundImage Error?\n\nI still can't find a perfect solution for `backgroundImage`. The best answer in SO is like:\n\n```css\n.app__bg_img_box {\n  background: no-repeat left top / cover;\n  background-image: url(./images/github.png), linear-gradient(to right, lightblue, pink);\n  /* you can also use default.png like code below */\n  /* background-image: url(./images/github.png), url(./images/default.png); */\n}\n```\n\nAnd the cons is obvious.\n\n![](../images/1542620382678.gif)\n\n1. You have to take care of the transparency problem of the target image.\n2. Users can see the toggle between target image and default image.\n3. A little flaw is that default image will always be downloaded.\n\nAnother way I figured out is like code below. Here is the simplest code:\n\n```js\nlet backgroundDivs = Array.from(document.querySelectorAll('.app__bg_img_box'))\nbackgroundDivs.forEach(div => {\n  let imgUrl = window\n    .getComputedStyle(div)\n    .backgroundImage.match(/url\\([\"']?(.*)[\"']?\\)/)\n  if (imgUrl) {\n    let img = new Image()\n    img.src = imgUrl[1]\n    img.onerror = function(event) {\n      div.style.backgroundImage = 'url(./images/default.png)'\n      img.onerror = null\n    }\n  }\n})\n```\n\nIt will work well in most simple scenes but the cons is also obvious:\n\n1. Code will be more complicated if you want to deal with multiple backgroundImages.\n2. Each time you updated your dom structure, you may have to run the code above if you have add new divs with backgroundImage.\n\n## Ending\n\nIf lucky enough, we may have the new API in [Images][image-set-notation] which would make code below work.\n\n```css\nbackground: image('target.gif', 'fallback.gif');\n```\n\n## Reference\n\n- [onerror event using background: url()](https://stackoverflow.com/questions/22287474/onerror-event-using-background-url)\n\n- [image-set-notation][image-set-notation]\n\n[image-set-notation]: https://drafts.csswg.org/css-images-4/#image-set-notation\n","source":"_posts/image-load-error-handler.md","raw":"---\ntitle: Image Load Error Handler\ncategories: js\ntags:\n  - img\ncomments: true\ndate: 2018-11-19 16:53:48\n---\n\n## Preface\n\nIn the past, I posted an answer in SO about how to [replace broken images](https://stackoverflow.com/questions/92720/jquery-javascript-to-replace-broken-images/50484874). And the code is\n\n```js\nwindow.addEventListener(\n  'error',\n  windowErrorCb,\n  {\n    capture: true\n  },\n  true\n)\n\nfunction windowErrorCb(event) {\n  let target = event.target\n  let isImg = target.tagName.toLowerCase() === 'img'\n  if (isImg) {\n    imgErrorCb()\n    return\n  }\n\n  function imgErrorCb() {\n    let isImgErrorHandled = target.hasAttribute('data-src-error')\n    if (!isImgErrorHandled) {\n      target.setAttribute('data-src-error', 'handled')\n      target.src = 'backup.png'\n    } else {\n      //anything you want to do\n      console.log(target.alt, 'both origin and backup image fail to load!')\n    }\n  }\n}\n```\n\nAnd the point is :\n\n1. Put the code in the head and executed as the first inline script. So, it will listen the errors happen after the script.\n\n2. Use event capturing to catch the errors earlier, also for those events which don't bubble.\n\n3. Use event delegation which avoids binding events on each image.\n\n4. Give the error img element an attribute after giving them a backup.png to avoid error of the _backup.png_ and subsequent infinite loop like below:\n\n> img error->backup.png->error->backup.png->error->,,,,,\n\nI thought the answer is almost perfect. But it turns out there is more scenes I don't know.\n\n#### No Src?\n\nUntil Chrome 70.0.3538.102 in win7, code below wouldn't trigger error event.\n\n```html\n<img />\n```\n\nBut code below would trigger!\n\n```html\n<img src=\"\" /> <img src />\n```\n\nThat does make sense. However, `img` without `src` wouldn't hidden. They would have 1px border like:\n\n![](../images/截图20181119171728.png)\n\nIn this case, we may have to do something about that. For instance,\n\n```css\nimg:not([src]) {\n  opacity: 0;\n}\n```\n\nor a default `backgroundImage` which will work on `img` though 1px border is still there.\n\n```css\nimg:not([src]) {\n  background: no-repeat left top / cover;\n  background-image: linear-gradient(to right, lightblue, pink); /*or your logo*/\n}\n```\n\n#### BackgroundImage Error?\n\nI still can't find a perfect solution for `backgroundImage`. The best answer in SO is like:\n\n```css\n.app__bg_img_box {\n  background: no-repeat left top / cover;\n  background-image: url(./images/github.png), linear-gradient(to right, lightblue, pink);\n  /* you can also use default.png like code below */\n  /* background-image: url(./images/github.png), url(./images/default.png); */\n}\n```\n\nAnd the cons is obvious.\n\n![](../images/1542620382678.gif)\n\n1. You have to take care of the transparency problem of the target image.\n2. Users can see the toggle between target image and default image.\n3. A little flaw is that default image will always be downloaded.\n\nAnother way I figured out is like code below. Here is the simplest code:\n\n```js\nlet backgroundDivs = Array.from(document.querySelectorAll('.app__bg_img_box'))\nbackgroundDivs.forEach(div => {\n  let imgUrl = window\n    .getComputedStyle(div)\n    .backgroundImage.match(/url\\([\"']?(.*)[\"']?\\)/)\n  if (imgUrl) {\n    let img = new Image()\n    img.src = imgUrl[1]\n    img.onerror = function(event) {\n      div.style.backgroundImage = 'url(./images/default.png)'\n      img.onerror = null\n    }\n  }\n})\n```\n\nIt will work well in most simple scenes but the cons is also obvious:\n\n1. Code will be more complicated if you want to deal with multiple backgroundImages.\n2. Each time you updated your dom structure, you may have to run the code above if you have add new divs with backgroundImage.\n\n## Ending\n\nIf lucky enough, we may have the new API in [Images][image-set-notation] which would make code below work.\n\n```css\nbackground: image('target.gif', 'fallback.gif');\n```\n\n## Reference\n\n- [onerror event using background: url()](https://stackoverflow.com/questions/22287474/onerror-event-using-background-url)\n\n- [image-set-notation][image-set-notation]\n\n[image-set-notation]: https://drafts.csswg.org/css-images-4/#image-set-notation\n","slug":"image-load-error-handler","published":1,"updated":"2018-12-01T09:26:04.840Z","layout":"post","photos":[],"link":"","_id":"cjv0yvioj0016borpdjis8ugo","content":"<h2>Preface</h2>\n<p>In the past, I posted an answer in SO about how to <a href=\"https://stackoverflow.com/questions/92720/jquery-javascript-to-replace-broken-images/50484874\" target=\"_blank\" rel=\"noopener\">replace broken images</a>. And the code is</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'error'</span>,</span><br><span class=\"line\">  windowErrorCb,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    capture: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">windowErrorCb</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = event.target</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isImg = target.tagName.toLowerCase() === <span class=\"string\">'img'</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isImg) &#123;</span><br><span class=\"line\">    imgErrorCb()</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imgErrorCb</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isImgErrorHandled = target.hasAttribute(<span class=\"string\">'data-src-error'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isImgErrorHandled) &#123;</span><br><span class=\"line\">      target.setAttribute(<span class=\"string\">'data-src-error'</span>, <span class=\"string\">'handled'</span>)</span><br><span class=\"line\">      target.src = <span class=\"string\">'backup.png'</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//anything you want to do</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(target.alt, <span class=\"string\">'both origin and backup image fail to load!'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>And the point is :</p>\n<ol>\n<li>\n<p>Put the code in the head and executed as the first inline script. So, it will listen the errors happen after the script.</p>\n</li>\n<li>\n<p>Use event capturing to catch the errors earlier, also for those events which don't bubble.</p>\n</li>\n<li>\n<p>Use event delegation which avoids binding events on each image.</p>\n</li>\n<li>\n<p>Give the error img element an attribute after giving them a backup.png to avoid error of the <em>backup.png</em> and subsequent infinite loop like below:</p>\n</li>\n</ol>\n<blockquote>\n<p>img error-&gt;backup.png-&gt;error-&gt;backup.png-&gt;error-&gt;,,,,,</p>\n</blockquote>\n<p>I thought the answer is almost perfect. But it turns out there is more scenes I don't know.</p>\n<h4>No Src?</h4>\n<p>Until Chrome 70.0.3538.102 in win7, code below wouldn't trigger error event.</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>But code below would trigger!</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>That does make sense. However, <code>img</code> without <code>src</code> wouldn't hidden. They would have 1px border like:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181119171728.png\" alt=\"\"></p>\n<p>In this case, we may have to do something about that. For instance,</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[src]</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>or a default <code>backgroundImage</code> which will work on <code>img</code> though 1px border is still there.</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[src]</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: no-repeat left top / cover;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to right, lightblue, pink); <span class=\"comment\">/*or your logo*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4>BackgroundImage Error?</h4>\n<p>I still can't find a perfect solution for <code>backgroundImage</code>. The best answer in SO is like:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.app__bg_img_box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: no-repeat left top / cover;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(./images/github.png), <span class=\"built_in\">linear-gradient</span>(to right, lightblue, pink);</span><br><span class=\"line\">  <span class=\"comment\">/* you can also use default.png like code below */</span></span><br><span class=\"line\">  <span class=\"comment\">/* background-image: url(./images/github.png), url(./images/default.png); */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>And the cons is obvious.</p>\n<p><img src=\"../images/1542620382678.gif\" alt=\"\"></p>\n<ol>\n<li>You have to take care of the transparency problem of the target image.</li>\n<li>Users can see the toggle between target image and default image.</li>\n<li>A little flaw is that default image will always be downloaded.</li>\n</ol>\n<p>Another way I figured out is like code below. Here is the simplest code:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> backgroundDivs = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.app__bg_img_box'</span>))</span><br><span class=\"line\">backgroundDivs.forEach(<span class=\"function\"><span class=\"params\">div</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> imgUrl = <span class=\"built_in\">window</span></span><br><span class=\"line\">    .getComputedStyle(div)</span><br><span class=\"line\">    .backgroundImage.match(<span class=\"regexp\">/url\\([\"']?(.*)[\"']?\\)/</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (imgUrl) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">    img.src = imgUrl[<span class=\"number\">1</span>]</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      div.style.backgroundImage = <span class=\"string\">'url(./images/default.png)'</span></span><br><span class=\"line\">      img.onerror = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>It will work well in most simple scenes but the cons is also obvious:</p>\n<ol>\n<li>Code will be more complicated if you want to deal with multiple backgroundImages.</li>\n<li>Each time you updated your dom structure, you may have to run the code above if you have add new divs with backgroundImage.</li>\n</ol>\n<h2>Ending</h2>\n<p>If lucky enough, we may have the new API in <a href=\"https://drafts.csswg.org/css-images-4/#image-set-notation\" target=\"_blank\" rel=\"noopener\">Images</a> which would make code below work.</p>\n<p><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">background: image('target.gif', 'fallback.gif');</span><br></pre></td></tr></table></figure></p>\n<h2>Reference</h2>\n<ul>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/22287474/onerror-event-using-background-url\" target=\"_blank\" rel=\"noopener\">onerror event using background: url()</a></p>\n</li>\n<li>\n<p><a href=\"https://drafts.csswg.org/css-images-4/#image-set-notation\" target=\"_blank\" rel=\"noopener\">image-set-notation</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>In the past, I posted an answer in SO about how to <a href=\"https://stackoverflow.com/questions/92720/jquery-javascript-to-replace-broken-images/50484874\" target=\"_blank\" rel=\"noopener\">replace broken images</a>. And the code is</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'error'</span>,</span><br><span class=\"line\">  windowErrorCb,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    capture: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">windowErrorCb</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = event.target</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isImg = target.tagName.toLowerCase() === <span class=\"string\">'img'</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isImg) &#123;</span><br><span class=\"line\">    imgErrorCb()</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imgErrorCb</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isImgErrorHandled = target.hasAttribute(<span class=\"string\">'data-src-error'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isImgErrorHandled) &#123;</span><br><span class=\"line\">      target.setAttribute(<span class=\"string\">'data-src-error'</span>, <span class=\"string\">'handled'</span>)</span><br><span class=\"line\">      target.src = <span class=\"string\">'backup.png'</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//anything you want to do</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(target.alt, <span class=\"string\">'both origin and backup image fail to load!'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>And the point is :</p>\n<ol>\n<li>\n<p>Put the code in the head and executed as the first inline script. So, it will listen the errors happen after the script.</p>\n</li>\n<li>\n<p>Use event capturing to catch the errors earlier, also for those events which don't bubble.</p>\n</li>\n<li>\n<p>Use event delegation which avoids binding events on each image.</p>\n</li>\n<li>\n<p>Give the error img element an attribute after giving them a backup.png to avoid error of the <em>backup.png</em> and subsequent infinite loop like below:</p>\n</li>\n</ol>\n<blockquote>\n<p>img error-&gt;backup.png-&gt;error-&gt;backup.png-&gt;error-&gt;,,,,,</p>\n</blockquote>\n<p>I thought the answer is almost perfect. But it turns out there is more scenes I don't know.</p>\n<h4>No Src?</h4>\n<p>Until Chrome 70.0.3538.102 in win7, code below wouldn't trigger error event.</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>But code below would trigger!</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>That does make sense. However, <code>img</code> without <code>src</code> wouldn't hidden. They would have 1px border like:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181119171728.png\" alt=\"\"></p>\n<p>In this case, we may have to do something about that. For instance,</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[src]</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>or a default <code>backgroundImage</code> which will work on <code>img</code> though 1px border is still there.</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[src]</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: no-repeat left top / cover;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to right, lightblue, pink); <span class=\"comment\">/*or your logo*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4>BackgroundImage Error?</h4>\n<p>I still can't find a perfect solution for <code>backgroundImage</code>. The best answer in SO is like:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.app__bg_img_box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: no-repeat left top / cover;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(./images/github.png), <span class=\"built_in\">linear-gradient</span>(to right, lightblue, pink);</span><br><span class=\"line\">  <span class=\"comment\">/* you can also use default.png like code below */</span></span><br><span class=\"line\">  <span class=\"comment\">/* background-image: url(./images/github.png), url(./images/default.png); */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>And the cons is obvious.</p>\n<p><img src=\"../images/1542620382678.gif\" alt=\"\"></p>\n<ol>\n<li>You have to take care of the transparency problem of the target image.</li>\n<li>Users can see the toggle between target image and default image.</li>\n<li>A little flaw is that default image will always be downloaded.</li>\n</ol>\n<p>Another way I figured out is like code below. Here is the simplest code:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> backgroundDivs = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.app__bg_img_box'</span>))</span><br><span class=\"line\">backgroundDivs.forEach(<span class=\"function\"><span class=\"params\">div</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> imgUrl = <span class=\"built_in\">window</span></span><br><span class=\"line\">    .getComputedStyle(div)</span><br><span class=\"line\">    .backgroundImage.match(<span class=\"regexp\">/url\\([\"']?(.*)[\"']?\\)/</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (imgUrl) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">    img.src = imgUrl[<span class=\"number\">1</span>]</span><br><span class=\"line\">    img.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">      div.style.backgroundImage = <span class=\"string\">'url(./images/default.png)'</span></span><br><span class=\"line\">      img.onerror = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>It will work well in most simple scenes but the cons is also obvious:</p>\n<ol>\n<li>Code will be more complicated if you want to deal with multiple backgroundImages.</li>\n<li>Each time you updated your dom structure, you may have to run the code above if you have add new divs with backgroundImage.</li>\n</ol>\n<h2>Ending</h2>\n<p>If lucky enough, we may have the new API in <a href=\"https://drafts.csswg.org/css-images-4/#image-set-notation\" target=\"_blank\" rel=\"noopener\">Images</a> which would make code below work.</p>\n<p><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">background: image('target.gif', 'fallback.gif');</span><br></pre></td></tr></table></figure></p>\n<h2>Reference</h2>\n<ul>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/22287474/onerror-event-using-background-url\" target=\"_blank\" rel=\"noopener\">onerror event using background: url()</a></p>\n</li>\n<li>\n<p><a href=\"https://drafts.csswg.org/css-images-4/#image-set-notation\" target=\"_blank\" rel=\"noopener\">image-set-notation</a></p>\n</li>\n</ul>\n"},{"title":"How to Debug with a More Efficient Way","comments":1,"date":"2018-05-23T01:25:34.000Z","_content":"\n## Preface\n\nThere is always sometimes when I ran into a problem and I was stuck in there. After problems solved, I watched back and thought maybe I can fix the problem alone or it shouldn't take me so much time to work it out. So, I decided to write something about how to debug with a more efficient way.\n\n## Steps\n\n### Calm down first\n\nAre you beginning to sweat now? Take a walk if you are and forget about the origin thought.\n\n### Try to figure out what the question you are facing\n\n#### Problems which are in a big project\n\nWell, I hate this but I still meet this in some cases.\n\nAt present, I am trying to extract the problem from the big project and reproduce it in a demo which is as minimal as possible. Then, I will try to figure out what the problem I am actually facing with. After all, it's easier to debug in a minimal demo than a big project. Then, fix the demo and fix the project.\n\nSometimes the problems can't be or are not easy to be extracted. In that case, I would try to disable other functions which might complicate the problems to make the problems easier to fix.\n\n#### Problems which are out of control\n\nIf the error is out of your control, for example, you are working with something you basically have no idea, you had better pay attention to the error information. Then find the document and search for something about the error information.\n\nIt is quite common to encounter a new problem when we are using a frame which we don't know much about it. If that happens, the quickest way is to find the document and see if the way we use is not right.\n\n#### Problems seem familiar\n\nIf you know something about your error, for example, you are running a demo which doesn't behave as you expected, maybe you should stop and ask yourself a few questions:\n\n- What is my expected output?\n\n- Why should the demo behave like that?\n\nIn this way, you might say that it should behave like that because the specs said that it should ..... It doesn't matter if you don't remember the details of the specs. In this case, you should go to check the part of the specs and read the specs carefully again to see if it really defines the behavior you expected. And I still suggest you reading the specs again even that you remember the details.\n\nDon't tell me you don't know where the specs is because this shouldn't happen. Or if it really happens, it is better for you to find the specs as soon as possible.\n\nUsually, you will find that you missed something in the specs or just misunderstand the specs or the specs just didn't define the specific behavior.\n\nHowever, sometimes you are totally right after reading the specs. In this case, I think it's time to ask in the community like [Stackoverflow][stackoverflow] or just ask the specs working group. Before asking, you had better know something about how to ask.\n\n## Ending\n\nAnyway, the last way is [google][google] and I will update when I figure out something new.\n\n[google]: https://www.google.com\n[stackoverflow]: https://stackoverflow.com\n","source":"_posts/how-to-debug-with-a-more-efficient-way.md","raw":"---\ntitle: How to Debug with a More Efficient Way\ntags:\n- debug\n- efficiency\ncategories: debug\ncomments: true\ndate: 2018-05-23 09:25:34\n---\n\n## Preface\n\nThere is always sometimes when I ran into a problem and I was stuck in there. After problems solved, I watched back and thought maybe I can fix the problem alone or it shouldn't take me so much time to work it out. So, I decided to write something about how to debug with a more efficient way.\n\n## Steps\n\n### Calm down first\n\nAre you beginning to sweat now? Take a walk if you are and forget about the origin thought.\n\n### Try to figure out what the question you are facing\n\n#### Problems which are in a big project\n\nWell, I hate this but I still meet this in some cases.\n\nAt present, I am trying to extract the problem from the big project and reproduce it in a demo which is as minimal as possible. Then, I will try to figure out what the problem I am actually facing with. After all, it's easier to debug in a minimal demo than a big project. Then, fix the demo and fix the project.\n\nSometimes the problems can't be or are not easy to be extracted. In that case, I would try to disable other functions which might complicate the problems to make the problems easier to fix.\n\n#### Problems which are out of control\n\nIf the error is out of your control, for example, you are working with something you basically have no idea, you had better pay attention to the error information. Then find the document and search for something about the error information.\n\nIt is quite common to encounter a new problem when we are using a frame which we don't know much about it. If that happens, the quickest way is to find the document and see if the way we use is not right.\n\n#### Problems seem familiar\n\nIf you know something about your error, for example, you are running a demo which doesn't behave as you expected, maybe you should stop and ask yourself a few questions:\n\n- What is my expected output?\n\n- Why should the demo behave like that?\n\nIn this way, you might say that it should behave like that because the specs said that it should ..... It doesn't matter if you don't remember the details of the specs. In this case, you should go to check the part of the specs and read the specs carefully again to see if it really defines the behavior you expected. And I still suggest you reading the specs again even that you remember the details.\n\nDon't tell me you don't know where the specs is because this shouldn't happen. Or if it really happens, it is better for you to find the specs as soon as possible.\n\nUsually, you will find that you missed something in the specs or just misunderstand the specs or the specs just didn't define the specific behavior.\n\nHowever, sometimes you are totally right after reading the specs. In this case, I think it's time to ask in the community like [Stackoverflow][stackoverflow] or just ask the specs working group. Before asking, you had better know something about how to ask.\n\n## Ending\n\nAnyway, the last way is [google][google] and I will update when I figure out something new.\n\n[google]: https://www.google.com\n[stackoverflow]: https://stackoverflow.com\n","slug":"how-to-debug-with-a-more-efficient-way","published":1,"updated":"2018-07-01T10:37:59.904Z","layout":"post","photos":[],"link":"","_id":"cjv0yviop001aborpz9jn41ex","content":"<h2>Preface</h2>\n<p>There is always sometimes when I ran into a problem and I was stuck in there. After problems solved, I watched back and thought maybe I can fix the problem alone or it shouldn't take me so much time to work it out. So, I decided to write something about how to debug with a more efficient way.</p>\n<h2>Steps</h2>\n<h3>Calm down first</h3>\n<p>Are you beginning to sweat now? Take a walk if you are and forget about the origin thought.</p>\n<h3>Try to figure out what the question you are facing</h3>\n<h4>Problems which are in a big project</h4>\n<p>Well, I hate this but I still meet this in some cases.</p>\n<p>At present, I am trying to extract the problem from the big project and reproduce it in a demo which is as minimal as possible. Then, I will try to figure out what the problem I am actually facing with. After all, it's easier to debug in a minimal demo than a big project. Then, fix the demo and fix the project.</p>\n<p>Sometimes the problems can't be or are not easy to be extracted. In that case, I would try to disable other functions which might complicate the problems to make the problems easier to fix.</p>\n<h4>Problems which are out of control</h4>\n<p>If the error is out of your control, for example, you are working with something you basically have no idea, you had better pay attention to the error information. Then find the document and search for something about the error information.</p>\n<p>It is quite common to encounter a new problem when we are using a frame which we don't know much about it. If that happens, the quickest way is to find the document and see if the way we use is not right.</p>\n<h4>Problems seem familiar</h4>\n<p>If you know something about your error, for example, you are running a demo which doesn't behave as you expected, maybe you should stop and ask yourself a few questions:</p>\n<ul>\n<li>\n<p>What is my expected output?</p>\n</li>\n<li>\n<p>Why should the demo behave like that?</p>\n</li>\n</ul>\n<p>In this way, you might say that it should behave like that because the specs said that it should ..... It doesn't matter if you don't remember the details of the specs. In this case, you should go to check the part of the specs and read the specs carefully again to see if it really defines the behavior you expected. And I still suggest you reading the specs again even that you remember the details.</p>\n<p>Don't tell me you don't know where the specs is because this shouldn't happen. Or if it really happens, it is better for you to find the specs as soon as possible.</p>\n<p>Usually, you will find that you missed something in the specs or just misunderstand the specs or the specs just didn't define the specific behavior.</p>\n<p>However, sometimes you are totally right after reading the specs. In this case, I think it's time to ask in the community like <a href=\"https://stackoverflow.com\" target=\"_blank\" rel=\"noopener\">Stackoverflow</a> or just ask the specs working group. Before asking, you had better know something about how to ask.</p>\n<h2>Ending</h2>\n<p>Anyway, the last way is <a href=\"https://www.google.com\" target=\"_blank\" rel=\"noopener\">google</a> and I will update when I figure out something new.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>There is always sometimes when I ran into a problem and I was stuck in there. After problems solved, I watched back and thought maybe I can fix the problem alone or it shouldn't take me so much time to work it out. So, I decided to write something about how to debug with a more efficient way.</p>\n<h2>Steps</h2>\n<h3>Calm down first</h3>\n<p>Are you beginning to sweat now? Take a walk if you are and forget about the origin thought.</p>\n<h3>Try to figure out what the question you are facing</h3>\n<h4>Problems which are in a big project</h4>\n<p>Well, I hate this but I still meet this in some cases.</p>\n<p>At present, I am trying to extract the problem from the big project and reproduce it in a demo which is as minimal as possible. Then, I will try to figure out what the problem I am actually facing with. After all, it's easier to debug in a minimal demo than a big project. Then, fix the demo and fix the project.</p>\n<p>Sometimes the problems can't be or are not easy to be extracted. In that case, I would try to disable other functions which might complicate the problems to make the problems easier to fix.</p>\n<h4>Problems which are out of control</h4>\n<p>If the error is out of your control, for example, you are working with something you basically have no idea, you had better pay attention to the error information. Then find the document and search for something about the error information.</p>\n<p>It is quite common to encounter a new problem when we are using a frame which we don't know much about it. If that happens, the quickest way is to find the document and see if the way we use is not right.</p>\n<h4>Problems seem familiar</h4>\n<p>If you know something about your error, for example, you are running a demo which doesn't behave as you expected, maybe you should stop and ask yourself a few questions:</p>\n<ul>\n<li>\n<p>What is my expected output?</p>\n</li>\n<li>\n<p>Why should the demo behave like that?</p>\n</li>\n</ul>\n<p>In this way, you might say that it should behave like that because the specs said that it should ..... It doesn't matter if you don't remember the details of the specs. In this case, you should go to check the part of the specs and read the specs carefully again to see if it really defines the behavior you expected. And I still suggest you reading the specs again even that you remember the details.</p>\n<p>Don't tell me you don't know where the specs is because this shouldn't happen. Or if it really happens, it is better for you to find the specs as soon as possible.</p>\n<p>Usually, you will find that you missed something in the specs or just misunderstand the specs or the specs just didn't define the specific behavior.</p>\n<p>However, sometimes you are totally right after reading the specs. In this case, I think it's time to ask in the community like <a href=\"https://stackoverflow.com\" target=\"_blank\" rel=\"noopener\">Stackoverflow</a> or just ask the specs working group. Before asking, you had better know something about how to ask.</p>\n<h2>Ending</h2>\n<p>Anyway, the last way is <a href=\"https://www.google.com\" target=\"_blank\" rel=\"noopener\">google</a> and I will update when I figure out something new.</p>\n"},{"title":"Label Can't Be Focused In Firefox With Element.focus()","comments":1,"date":"2018-06-10T03:13:18.000Z","_content":"\n## Preface\n\nAs the title says, let's see the demo below:\n\n## Main\n\n```html\n<label id=\"cont\" contentEditable>\n   label should be focused\n</label>\n<button id=\"focus\">make label focus</button>\n```\n\n```css\n#cont {\n  display: block;\n  background: pink;\n  width: 150px;\n  height: 40px;\n}\n```\n\n```javascript\n$('#focus')[0].onclick = () => {\n  $('#cont')[0].focus()\n}\n$('#cont')[0].onfocus = event => {\n  console.log(event.type)\n}\n\nfunction $(selector) {\n  return Array.from(document.querySelectorAll(selector))\n}\n```\n\nSuppose that you are using chrome, after loaded please press `F12` and open the console and then click the button. `label#cont` should be focused after clicking the button.So, there will be word `focus` at the console.\n\nHowever, firefox wouldn't do that until you click the label. Anyway, I have posted a [bug][bug]. Let's see what will happen.\n\n[bug]: https://bugzilla.mozilla.org/show_bug.cgi?id=1468049\n","source":"_posts/label-can-t-be-focused-in-firefox-with-element.focus().md","raw":"---\ntitle: Label Can't Be Focused In Firefox With Element.focus()\ntags:\n- label\n- focus\n- firefox\n- contentEditable\n- bug\ncategories: html\ncomments: true\ndate: 2018-06-10 11:13:18\n---\n\n## Preface\n\nAs the title says, let's see the demo below:\n\n## Main\n\n```html\n<label id=\"cont\" contentEditable>\n   label should be focused\n</label>\n<button id=\"focus\">make label focus</button>\n```\n\n```css\n#cont {\n  display: block;\n  background: pink;\n  width: 150px;\n  height: 40px;\n}\n```\n\n```javascript\n$('#focus')[0].onclick = () => {\n  $('#cont')[0].focus()\n}\n$('#cont')[0].onfocus = event => {\n  console.log(event.type)\n}\n\nfunction $(selector) {\n  return Array.from(document.querySelectorAll(selector))\n}\n```\n\nSuppose that you are using chrome, after loaded please press `F12` and open the console and then click the button. `label#cont` should be focused after clicking the button.So, there will be word `focus` at the console.\n\nHowever, firefox wouldn't do that until you click the label. Anyway, I have posted a [bug][bug]. Let's see what will happen.\n\n[bug]: https://bugzilla.mozilla.org/show_bug.cgi?id=1468049\n","slug":"label-can-t-be-focused-in-firefox-with-element.focus()","published":1,"updated":"2018-06-18T01:31:30.241Z","layout":"post","photos":[],"link":"","_id":"cjv0yviot001dborpustsx1f8","content":"<h2>Preface</h2>\n<p>As the title says, let's see the demo below:</p>\n<h2>Main</h2>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cont\"</span> <span class=\"attr\">contentEditable</span>&gt;</span></span><br><span class=\"line\">   label should be focused</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"focus\"</span>&gt;</span>make label focus<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#cont</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#focus'</span>)[<span class=\"number\">0</span>].onclick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#cont'</span>)[<span class=\"number\">0</span>].focus()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$(<span class=\"string\">'#cont'</span>)[<span class=\"number\">0</span>].onfocus = <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.type)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">document</span>.querySelectorAll(selector))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Suppose that you are using chrome, after loaded please press <code>F12</code> and open the console and then click the button. <code>label#cont</code> should be focused after clicking the button.So, there will be word <code>focus</code> at the console.</p>\n<p>However, firefox wouldn't do that until you click the label. Anyway, I have posted a <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1468049\" target=\"_blank\" rel=\"noopener\">bug</a>. Let's see what will happen.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>As the title says, let's see the demo below:</p>\n<h2>Main</h2>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cont\"</span> <span class=\"attr\">contentEditable</span>&gt;</span></span><br><span class=\"line\">   label should be focused</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"focus\"</span>&gt;</span>make label focus<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#cont</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#focus'</span>)[<span class=\"number\">0</span>].onclick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  $(<span class=\"string\">'#cont'</span>)[<span class=\"number\">0</span>].focus()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$(<span class=\"string\">'#cont'</span>)[<span class=\"number\">0</span>].onfocus = <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.type)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>(<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">document</span>.querySelectorAll(selector))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Suppose that you are using chrome, after loaded please press <code>F12</code> and open the console and then click the button. <code>label#cont</code> should be focused after clicking the button.So, there will be word <code>focus</code> at the console.</p>\n<p>However, firefox wouldn't do that until you click the label. Anyway, I have posted a <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1468049\" target=\"_blank\" rel=\"noopener\">bug</a>. Let's see what will happen.</p>\n"},{"title":"MS Bug In Flex","comments":1,"date":"2018-06-09T08:11:46.000Z","_content":"\n## Preface\n\nI met some bug with MS's flex box.\n\n## Main\n\n- `min-height`\n  See code below:\n\n```html\n<div class=\"par\">\n  <div class=\"child child1\">child1</div>\n  <div class=\"child child2\">child2</div>\n  <div class=\"child child3\">child3</div>\n</div>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\n.par {\n  background: #eee;\n  width: 400px;\n  min-height: 200px;\n  display: flex;\n  justify-content: center;\n  flex-flow: column nowrap;\n}\n/* _:-ms-lang(x),\n.par {\n    height: 200px;\n} */\n.par .child {\n  flex: 1 1 auto;\n}\n.child1 {\n  background: pink;\n}\n.child2 {\n  background: lightblue;\n}\n.child3 {\n  background: yellowgreen;\n}\n```\n\nI think the result is pretty clear. As the image below :\n\n![](../images/截图20180609161841.png)\n\nHowever, what I got in `IE10` and `Edge` is like :\n\n![](../images/截图20180609161934.png)\n\nThe problem is quite clear. Property `flex` doesn't work in MS when there is only `min-height`. I think it is a bug so I just fix it by hack. And the hack is the comments in the code above.\n\n- IE10 `flex` doesn't work if flex item is inline element\n\nFor example:\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\n\n.box {\n  display: flex;\n  width: 500px;\n  margin: 60px auto 0;\n  justify-content: space-between;\n  background: pink;\n}\n```\n\n```html\n  <div class=\"box\">\n    <a href=\"\" class=\"box__link\">box1</a>\n    <a href=\"\" class=\"box__link\">box2</a>\n    <a href=\"\" class=\"box__link\">box3</a>\n  </div>\n```\n\nCode above is quite clear. However, in IE10, you will see:\n\n![截图20180818144157](../images/截图20180818144157.png)\n\n`justify-content:space-between` doesn't work. If you add\n\n```css\n.box__link {\n  display: block;\n}\n```\n\nIt will work. See:\n\n![截图20180818144338](../images/截图20180818144338.png)\n","source":"_posts/ms-bug-in-flex.md","raw":"---\ntitle: MS Bug In Flex\ntags:\n  - bug\n  - ms\n  - min-height\n  - display\n  - flex\n  - IE\n  - Edge\ncategories: css\ncomments: true\ndate: 2018-06-09 16:11:46\n---\n\n## Preface\n\nI met some bug with MS's flex box.\n\n## Main\n\n- `min-height`\n  See code below:\n\n```html\n<div class=\"par\">\n  <div class=\"child child1\">child1</div>\n  <div class=\"child child2\">child2</div>\n  <div class=\"child child3\">child3</div>\n</div>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\n.par {\n  background: #eee;\n  width: 400px;\n  min-height: 200px;\n  display: flex;\n  justify-content: center;\n  flex-flow: column nowrap;\n}\n/* _:-ms-lang(x),\n.par {\n    height: 200px;\n} */\n.par .child {\n  flex: 1 1 auto;\n}\n.child1 {\n  background: pink;\n}\n.child2 {\n  background: lightblue;\n}\n.child3 {\n  background: yellowgreen;\n}\n```\n\nI think the result is pretty clear. As the image below :\n\n![](../images/截图20180609161841.png)\n\nHowever, what I got in `IE10` and `Edge` is like :\n\n![](../images/截图20180609161934.png)\n\nThe problem is quite clear. Property `flex` doesn't work in MS when there is only `min-height`. I think it is a bug so I just fix it by hack. And the hack is the comments in the code above.\n\n- IE10 `flex` doesn't work if flex item is inline element\n\nFor example:\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\n\n.box {\n  display: flex;\n  width: 500px;\n  margin: 60px auto 0;\n  justify-content: space-between;\n  background: pink;\n}\n```\n\n```html\n  <div class=\"box\">\n    <a href=\"\" class=\"box__link\">box1</a>\n    <a href=\"\" class=\"box__link\">box2</a>\n    <a href=\"\" class=\"box__link\">box3</a>\n  </div>\n```\n\nCode above is quite clear. However, in IE10, you will see:\n\n![截图20180818144157](../images/截图20180818144157.png)\n\n`justify-content:space-between` doesn't work. If you add\n\n```css\n.box__link {\n  display: block;\n}\n```\n\nIt will work. See:\n\n![截图20180818144338](../images/截图20180818144338.png)\n","slug":"ms-bug-in-flex","published":1,"updated":"2018-08-18T06:44:03.955Z","layout":"post","photos":[],"link":"","_id":"cjv0yvip0001iborplar8ci13","content":"<h2>Preface</h2>\n<p>I met some bug with MS's flex box.</p>\n<h2>Main</h2>\n<ul>\n<li><code>min-height</code>\nSee code below:</li>\n</ul>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"par\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child child1\"</span>&gt;</span>child1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child child2\"</span>&gt;</span>child2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child child3\"</span>&gt;</span>child3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.par</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: column nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* _:-ms-lang(x),</span></span><br><span class=\"line\"><span class=\"comment\">.par &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    height: 200px;</span></span><br><span class=\"line\"><span class=\"comment\">&#125; */</span></span><br><span class=\"line\"><span class=\"selector-class\">.par</span> <span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span> <span class=\"number\">1</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: yellowgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>I think the result is pretty clear. As the image below :</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180609161841.png\" alt=\"\"></p>\n<p>However, what I got in <code>IE10</code> and <code>Edge</code> is like :</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180609161934.png\" alt=\"\"></p>\n<p>The problem is quite clear. Property <code>flex</code> doesn't work in MS when there is only <code>min-height</code>. I think it is a bug so I just fix it by hack. And the hack is the comments in the code above.</p>\n<ul>\n<li>IE10 <code>flex</code> doesn't work if flex item is inline element</li>\n</ul>\n<p>For example:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">60px</span> auto <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box__link\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box__link\"</span>&gt;</span>box2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box__link\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Code above is quite clear. However, in IE10, you will see:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180818144157.png\" alt=\"截图20180818144157\"></p>\n<p><code>justify-content:space-between</code> doesn't work. If you add</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box__link</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>It will work. See:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180818144338.png\" alt=\"截图20180818144338\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>I met some bug with MS's flex box.</p>\n<h2>Main</h2>\n<ul>\n<li><code>min-height</code>\nSee code below:</li>\n</ul>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"par\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child child1\"</span>&gt;</span>child1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child child2\"</span>&gt;</span>child2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child child3\"</span>&gt;</span>child3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.par</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: column nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* _:-ms-lang(x),</span></span><br><span class=\"line\"><span class=\"comment\">.par &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    height: 200px;</span></span><br><span class=\"line\"><span class=\"comment\">&#125; */</span></span><br><span class=\"line\"><span class=\"selector-class\">.par</span> <span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span> <span class=\"number\">1</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: yellowgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>I think the result is pretty clear. As the image below :</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180609161841.png\" alt=\"\"></p>\n<p>However, what I got in <code>IE10</code> and <code>Edge</code> is like :</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180609161934.png\" alt=\"\"></p>\n<p>The problem is quite clear. Property <code>flex</code> doesn't work in MS when there is only <code>min-height</code>. I think it is a bug so I just fix it by hack. And the hack is the comments in the code above.</p>\n<ul>\n<li>IE10 <code>flex</code> doesn't work if flex item is inline element</li>\n</ul>\n<p>For example:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">60px</span> auto <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box__link\"</span>&gt;</span>box1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box__link\"</span>&gt;</span>box2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box__link\"</span>&gt;</span>box3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Code above is quite clear. However, in IE10, you will see:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180818144157.png\" alt=\"截图20180818144157\"></p>\n<p><code>justify-content:space-between</code> doesn't work. If you add</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box__link</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>It will work. See:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180818144338.png\" alt=\"截图20180818144338\"></p>\n"},{"title":"Notes for Developing Web Page","comments":1,"date":"2019-02-01T11:17:24.000Z","_content":"\nHere is the stuff.\n\n### Still Consider IE?\n\nIf you still need to be compatible with IE browser, the below tag might be needed to render page using EdgeHTML instead of uncertain render engine.\n\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n```\n\n### Use Custom Font on the Web?\n\n[fontmin](https://github.com/ecomfe/fontmin/) will help you. For more information, check [issues/72](https://github.com/xianshenglu/blog/issues/72).\n\n### Consider Scroll Bar\n\nBefore we can directly set scroll bar width by `::-webkit-scrollbar` **for major browsers on PC**, we always need to take care of the toggle of scroll bar because it might affect the layout except in Mac. For example,\n\n- It is common that we need to use `box-sizing: border-box;` to include the scroll bar.\n- Sometimes we even need to get the scroll bar width in js.\n\nAnyway, make sure that you have already considered scroll bar before production. For example, the style, the effect of layout, etc.\n\n### Mobile Web Page\n\nFor the mobile web page, we need to do something else and I write a summary [here](https://github.com/xianshenglu/blog/issues/69).\n\n[**Source**](https://github.com/xianshenglu/blog/issues/68)\n\n## Reference\n","source":"_posts/notes-for-developing-web-page.md","raw":"---\ntitle: Notes for Developing Web Page\ncategories: summary\ntags:\ncomments: true\ndate: 2019-02-01 19:17:24\n---\n\nHere is the stuff.\n\n### Still Consider IE?\n\nIf you still need to be compatible with IE browser, the below tag might be needed to render page using EdgeHTML instead of uncertain render engine.\n\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n```\n\n### Use Custom Font on the Web?\n\n[fontmin](https://github.com/ecomfe/fontmin/) will help you. For more information, check [issues/72](https://github.com/xianshenglu/blog/issues/72).\n\n### Consider Scroll Bar\n\nBefore we can directly set scroll bar width by `::-webkit-scrollbar` **for major browsers on PC**, we always need to take care of the toggle of scroll bar because it might affect the layout except in Mac. For example,\n\n- It is common that we need to use `box-sizing: border-box;` to include the scroll bar.\n- Sometimes we even need to get the scroll bar width in js.\n\nAnyway, make sure that you have already considered scroll bar before production. For example, the style, the effect of layout, etc.\n\n### Mobile Web Page\n\nFor the mobile web page, we need to do something else and I write a summary [here](https://github.com/xianshenglu/blog/issues/69).\n\n[**Source**](https://github.com/xianshenglu/blog/issues/68)\n\n## Reference\n","slug":"notes-for-developing-web-page","published":1,"updated":"2019-02-02T09:18:41.243Z","layout":"post","photos":[],"link":"","_id":"cjv0yvip4001kborp4qono8ap","content":"<p>Here is the stuff.</p>\n<h3>Still Consider IE?</h3>\n<p>If you still need to be compatible with IE browser, the below tag might be needed to render page using EdgeHTML instead of uncertain render engine.</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3>Use Custom Font on the Web?</h3>\n<p><a href=\"https://github.com/ecomfe/fontmin/\">fontmin</a> will help you. For more information, check <a href=\"https://github.com/xianshenglu/blog/issues/72\">issues/72</a>.</p>\n<h3>Consider Scroll Bar</h3>\n<p>Before we can directly set scroll bar width by <code>::-webkit-scrollbar</code> <strong>for major browsers on PC</strong>, we always need to take care of the toggle of scroll bar because it might affect the layout except in Mac. For example,</p>\n<ul>\n<li>It is common that we need to use <code>box-sizing: border-box;</code> to include the scroll bar.</li>\n<li>Sometimes we even need to get the scroll bar width in js.</li>\n</ul>\n<p>Anyway, make sure that you have already considered scroll bar before production. For example, the style, the effect of layout, etc.</p>\n<h3>Mobile Web Page</h3>\n<p>For the mobile web page, we need to do something else and I write a summary <a href=\"https://github.com/xianshenglu/blog/issues/69\">here</a>.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/68\"><strong>Source</strong></a></p>\n<h2>Reference</h2>\n","site":{"data":{}},"excerpt":"","more":"<p>Here is the stuff.</p>\n<h3>Still Consider IE?</h3>\n<p>If you still need to be compatible with IE browser, the below tag might be needed to render page using EdgeHTML instead of uncertain render engine.</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3>Use Custom Font on the Web?</h3>\n<p><a href=\"https://github.com/ecomfe/fontmin/\">fontmin</a> will help you. For more information, check <a href=\"https://github.com/xianshenglu/blog/issues/72\">issues/72</a>.</p>\n<h3>Consider Scroll Bar</h3>\n<p>Before we can directly set scroll bar width by <code>::-webkit-scrollbar</code> <strong>for major browsers on PC</strong>, we always need to take care of the toggle of scroll bar because it might affect the layout except in Mac. For example,</p>\n<ul>\n<li>It is common that we need to use <code>box-sizing: border-box;</code> to include the scroll bar.</li>\n<li>Sometimes we even need to get the scroll bar width in js.</li>\n</ul>\n<p>Anyway, make sure that you have already considered scroll bar before production. For example, the style, the effect of layout, etc.</p>\n<h3>Mobile Web Page</h3>\n<p>For the mobile web page, we need to do something else and I write a summary <a href=\"https://github.com/xianshenglu/blog/issues/69\">here</a>.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/68\"><strong>Source</strong></a></p>\n<h2>Reference</h2>\n"},{"title":"Notes for Developing Mobile Web Page","comments":1,"date":"2019-01-28T05:30:46.000Z","_content":"\n#### Layout\n\nI guess most of you were using `rem`, `vw`, `viewport` etc.\n\nFor `rem` or `vw`, we always work with the below tag.\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n```\n\nAnd then we transformed `px` to `rem` or `vw` by plugins. However, some guys prefer using internal scale logic like below:\n\n```html\n<!-- if the device-width is 375 -->\n<meta name=\"viewport\" content=\"width=750, initial-scale=0.5\" />\n```\n\nIt will also work by changing the `width` and `initial-scale` at the same time.\n\nHowever, in most cases, we can see the `meta[name=\"viewport\"]` with more complicated content. For example,\n\n```html\n<meta\n  name=\"viewport\"\n  content=\"width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no\"\n/>\n```\n\nWhat if we remove the `minimum-scale`, `minimum-scale` and `user-scalable`? The result is:\n\n- If an `input` was focused on safari, the web page would zoom in. Here is the proof.\n\n  ![](../images/微信截图_20190201171932.gif)\n\n- You will get the scale buttons like below when you touch the page in WeChat 7.0.0, at least in Android.\n\n  ![](../images/微信截图_20190128134750.png)\n\nAnd the solution is to add `user-scalable=no` or `minimum-scale=1, minimum-scale=1`. But you have to accept a shortcoming:\n\n- **User can't zoom the page using two fingers, at least in my Android WeChat and Chrome 71.** Though in some browsers user can still zoom like UC, QQ etc.\n\nFor better compatibility, we may have to use both `user-scalable=no` and `minimum-scale=1, minimum-scale=1`. That's why we always see the code below.\n\n```html\n<meta\n  name=\"viewport\"\n  content=\"width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no\"\n/>\n```\n\n#### Screen With High Resolution\n\nNormally, we would use `png@2x`, `png@3x` etc to solve the vague problem of images brought by high resolution screen. For example,\n\n```css\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n  .example {\n    background: url('/images/my_image@2x.png') center center no-repeat;\n    background-size: cover;\n  }\n}\n@media (-webkit-min-device-pixel-ratio: 3), (min-resolution: 288dpi) {\n  .example {\n    background: url('/images/my_image@3x.png') center center no-repeat;\n    background-size: cover;\n  }\n}\n```\n\nA convenient way to do this is by [retinajs](https://github.com/strues/retinajs). And for icons, I would suggest you use `svg` if possible.\n\n#### `vh` Is Always Calculated as If the Url Bar Is Hidden.\n\nIn brief, `100vh` doesn't equal `window.innerHeight`. For more, check [issues/38](https://github.com/xianshenglu/blog/issues/38).\n\n#### Consider the Pop-Up Keyboard\n\nIf there is an input or another form element, the keyboard would pop up when the element was focused. For example,\n\n![](../images/微信图片_20190202174136.jpg)\n\nIs this a bug? Maybe... At least, you have to notice that before deploying. And the best way I think is to consult PM or designer if it's okay.\n\nIn that case, the keyboard would make `vh` smaller which may ruin the layout using `vh`.\n\n#### Link Highlight While It's Being Tapped\n\nIn my Android Chrome 71, the highlight would show when I touch the link.\n\n![](../images/微信图片_20190202173819.jpg)\n\nWe can disable it by the code below.\n\n```css\na {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-tap-highlight-color: transparent; /* For some Androids */\n}\n```\n\n**I would suggest you disable it because different manufacturers may show different colors**.\n\n#### `img` Without src Would Have 1px White `border` on Mobile Chrome 70.\n\nYou may need to add the code below to your _reset.css_ to hide the `img` without `src`.\n\n```css\nimg:not([src]) {\n  opacity: 0;\n}\n```\n\n#### Qrcode in WeChat\n\n- Use `img` Instead of `background-image`. Otherwise, it won't work.\n- Don't put two qrcodes in one screen. Otherwise, it would only recognize one.\n\n#### Format-detection\n\nIt is said that iOS safari has a default style for telephone numbers, email, etc. As I tested in iPhoneX 11.3, at least for telephone numbers, it does have a default style like below.\n\n![](../images/微信截图_20190201171930.png)\n\nIf we want to disable the default style we can use the code below to avoid that.\n\n```html\n<meta\n  name=\"format-detection\"\n  content=\"telephone=no, email=no, date=no, address=no, url=no\"\n/>\n```\n\nIf you want to call telephone, send message etc when the element is clicked you can do it by\n\n```html\n<a href=\"tel:020-11811922\">Call me: 020-11811922</a>\n<a href=\"sms:10086\">Send me a message: 10086</a>\n```\n\n#### Disable Select\n\nYou may want to avoid the situation like below when the user is touching the **text of the element**.\n\n![](../images/微信图片_20190202173857.jpg) ![](../images/微信图片_20190202173902.jpg)\n\nYou can use the code below to avoid that.\n\n```css\n.example {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n```\n\nThe user may still hear the tone or feel the vibration, at least in my WeChat 7.0.0. **However, the user can still trigger selection on UC, QQ browser with an extra operation.**\n\n#### Avoid Popup Menu in Long Touch ?（Not Compatible）\n\nYou may also want to disable popup like below when the user is touching **an image or other stuff**\n\n![](../images/微信图片_20190202173852.jpg) ![](../images/微信图片_20190202173826.jpg)\n\nIn this case, `user-select:none` is not enough to cover this. You may have to add js code like below.\n\n```js\nwindow.addEventListener('contextmenu', event => event.preventDefault())\n```\n\nOur User may still hear the tone or feel the vibration, at least in my Android Chrome 71. **However, in WeChat, QQ and UC browser, it doesn't work.**\n\nand CSS to disable callout in iOS.\n\n```css\n.target {\n  -webkit-touch-callout: none;\n}\n```\n\n#### Use `touchstart` to Imitate `hover`\n\nAs we all know, there is no `hover` on mobile. If you really want that, you can use `touchstart` to imitate it.\n\n#### No Need to Worry About the Scroll Bar\n\nOn mobile, the scroll bar would hide automatically when you stop scrolling.\n\n[**Source**](https://github.com/xianshenglu/blog/issues/69)\n\n## Reference\n\n- [user-scalable](https://www.w3.org/TR/css-device-adapt-1/#user-scalable)\n","source":"_posts/notes-for-developing-mobile-web-page.md","raw":"---\ntitle: Notes for Developing Mobile Web Page\ncategories: summary\ntags:\n  - mobile\ncomments: true\ndate: 2019-01-28 13:30:46\n---\n\n#### Layout\n\nI guess most of you were using `rem`, `vw`, `viewport` etc.\n\nFor `rem` or `vw`, we always work with the below tag.\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n```\n\nAnd then we transformed `px` to `rem` or `vw` by plugins. However, some guys prefer using internal scale logic like below:\n\n```html\n<!-- if the device-width is 375 -->\n<meta name=\"viewport\" content=\"width=750, initial-scale=0.5\" />\n```\n\nIt will also work by changing the `width` and `initial-scale` at the same time.\n\nHowever, in most cases, we can see the `meta[name=\"viewport\"]` with more complicated content. For example,\n\n```html\n<meta\n  name=\"viewport\"\n  content=\"width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no\"\n/>\n```\n\nWhat if we remove the `minimum-scale`, `minimum-scale` and `user-scalable`? The result is:\n\n- If an `input` was focused on safari, the web page would zoom in. Here is the proof.\n\n  ![](../images/微信截图_20190201171932.gif)\n\n- You will get the scale buttons like below when you touch the page in WeChat 7.0.0, at least in Android.\n\n  ![](../images/微信截图_20190128134750.png)\n\nAnd the solution is to add `user-scalable=no` or `minimum-scale=1, minimum-scale=1`. But you have to accept a shortcoming:\n\n- **User can't zoom the page using two fingers, at least in my Android WeChat and Chrome 71.** Though in some browsers user can still zoom like UC, QQ etc.\n\nFor better compatibility, we may have to use both `user-scalable=no` and `minimum-scale=1, minimum-scale=1`. That's why we always see the code below.\n\n```html\n<meta\n  name=\"viewport\"\n  content=\"width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no\"\n/>\n```\n\n#### Screen With High Resolution\n\nNormally, we would use `png@2x`, `png@3x` etc to solve the vague problem of images brought by high resolution screen. For example,\n\n```css\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n  .example {\n    background: url('/images/my_image@2x.png') center center no-repeat;\n    background-size: cover;\n  }\n}\n@media (-webkit-min-device-pixel-ratio: 3), (min-resolution: 288dpi) {\n  .example {\n    background: url('/images/my_image@3x.png') center center no-repeat;\n    background-size: cover;\n  }\n}\n```\n\nA convenient way to do this is by [retinajs](https://github.com/strues/retinajs). And for icons, I would suggest you use `svg` if possible.\n\n#### `vh` Is Always Calculated as If the Url Bar Is Hidden.\n\nIn brief, `100vh` doesn't equal `window.innerHeight`. For more, check [issues/38](https://github.com/xianshenglu/blog/issues/38).\n\n#### Consider the Pop-Up Keyboard\n\nIf there is an input or another form element, the keyboard would pop up when the element was focused. For example,\n\n![](../images/微信图片_20190202174136.jpg)\n\nIs this a bug? Maybe... At least, you have to notice that before deploying. And the best way I think is to consult PM or designer if it's okay.\n\nIn that case, the keyboard would make `vh` smaller which may ruin the layout using `vh`.\n\n#### Link Highlight While It's Being Tapped\n\nIn my Android Chrome 71, the highlight would show when I touch the link.\n\n![](../images/微信图片_20190202173819.jpg)\n\nWe can disable it by the code below.\n\n```css\na {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-tap-highlight-color: transparent; /* For some Androids */\n}\n```\n\n**I would suggest you disable it because different manufacturers may show different colors**.\n\n#### `img` Without src Would Have 1px White `border` on Mobile Chrome 70.\n\nYou may need to add the code below to your _reset.css_ to hide the `img` without `src`.\n\n```css\nimg:not([src]) {\n  opacity: 0;\n}\n```\n\n#### Qrcode in WeChat\n\n- Use `img` Instead of `background-image`. Otherwise, it won't work.\n- Don't put two qrcodes in one screen. Otherwise, it would only recognize one.\n\n#### Format-detection\n\nIt is said that iOS safari has a default style for telephone numbers, email, etc. As I tested in iPhoneX 11.3, at least for telephone numbers, it does have a default style like below.\n\n![](../images/微信截图_20190201171930.png)\n\nIf we want to disable the default style we can use the code below to avoid that.\n\n```html\n<meta\n  name=\"format-detection\"\n  content=\"telephone=no, email=no, date=no, address=no, url=no\"\n/>\n```\n\nIf you want to call telephone, send message etc when the element is clicked you can do it by\n\n```html\n<a href=\"tel:020-11811922\">Call me: 020-11811922</a>\n<a href=\"sms:10086\">Send me a message: 10086</a>\n```\n\n#### Disable Select\n\nYou may want to avoid the situation like below when the user is touching the **text of the element**.\n\n![](../images/微信图片_20190202173857.jpg) ![](../images/微信图片_20190202173902.jpg)\n\nYou can use the code below to avoid that.\n\n```css\n.example {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n```\n\nThe user may still hear the tone or feel the vibration, at least in my WeChat 7.0.0. **However, the user can still trigger selection on UC, QQ browser with an extra operation.**\n\n#### Avoid Popup Menu in Long Touch ?（Not Compatible）\n\nYou may also want to disable popup like below when the user is touching **an image or other stuff**\n\n![](../images/微信图片_20190202173852.jpg) ![](../images/微信图片_20190202173826.jpg)\n\nIn this case, `user-select:none` is not enough to cover this. You may have to add js code like below.\n\n```js\nwindow.addEventListener('contextmenu', event => event.preventDefault())\n```\n\nOur User may still hear the tone or feel the vibration, at least in my Android Chrome 71. **However, in WeChat, QQ and UC browser, it doesn't work.**\n\nand CSS to disable callout in iOS.\n\n```css\n.target {\n  -webkit-touch-callout: none;\n}\n```\n\n#### Use `touchstart` to Imitate `hover`\n\nAs we all know, there is no `hover` on mobile. If you really want that, you can use `touchstart` to imitate it.\n\n#### No Need to Worry About the Scroll Bar\n\nOn mobile, the scroll bar would hide automatically when you stop scrolling.\n\n[**Source**](https://github.com/xianshenglu/blog/issues/69)\n\n## Reference\n\n- [user-scalable](https://www.w3.org/TR/css-device-adapt-1/#user-scalable)\n","slug":"notes-for-developing-mobile-web-page","published":1,"updated":"2019-02-14T12:16:15.805Z","layout":"post","photos":[],"link":"","_id":"cjv0yvipa001oborpdnoqongb","content":"<h4>Layout</h4>\n<p>I guess most of you were using <code>rem</code>, <code>vw</code>, <code>viewport</code> etc.</p>\n<p>For <code>rem</code> or <code>vw</code>, we always work with the below tag.</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>And then we transformed <code>px</code> to <code>rem</code> or <code>vw</code> by plugins. However, some guys prefer using internal scale logic like below:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- if the device-width is 375 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=750, initial-scale=0.5\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>It will also work by changing the <code>width</code> and <code>initial-scale</code> at the same time.</p>\n<p>However, in most cases, we can see the <code>meta[name=&quot;viewport&quot;]</code> with more complicated content. For example,</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>What if we remove the <code>minimum-scale</code>, <code>minimum-scale</code> and <code>user-scalable</code>? The result is:</p>\n<ul>\n<li>\n<p>If an <code>input</code> was focused on safari, the web page would zoom in. Here is the proof.</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190201171932.gif\" alt=\"\"></p>\n</li>\n<li>\n<p>You will get the scale buttons like below when you touch the page in WeChat 7.0.0, at least in Android.</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190128134750.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>And the solution is to add <code>user-scalable=no</code> or <code>minimum-scale=1, minimum-scale=1</code>. But you have to accept a shortcoming:</p>\n<ul>\n<li><strong>User can't zoom the page using two fingers, at least in my Android WeChat and Chrome 71.</strong> Though in some browsers user can still zoom like UC, QQ etc.</li>\n</ul>\n<p>For better compatibility, we may have to use both <code>user-scalable=no</code> and <code>minimum-scale=1, minimum-scale=1</code>. That's why we always see the code below.</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4>Screen With High Resolution</h4>\n<p>Normally, we would use <code>png@2x</code>, <code>png@3x</code> etc to solve the vague problem of images brought by high resolution screen. For example,</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (-webkit-min-device-pixel-ratio: <span class=\"number\">2</span>), (min-resolution: <span class=\"number\">192dpi</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'/images/my_image@2x.png'</span>) center center no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> (-webkit-min-device-pixel-ratio: <span class=\"number\">3</span>), (min-resolution: <span class=\"number\">288dpi</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'/images/my_image@3x.png'</span>) center center no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>A convenient way to do this is by <a href=\"https://github.com/strues/retinajs\">retinajs</a>. And for icons, I would suggest you use <code>svg</code> if possible.</p>\n<h4><code>vh</code> Is Always Calculated as If the Url Bar Is Hidden.</h4>\n<p>In brief, <code>100vh</code> doesn't equal <code>window.innerHeight</code>. For more, check <a href=\"https://github.com/xianshenglu/blog/issues/38\">issues/38</a>.</p>\n<h4>Consider the Pop-Up Keyboard</h4>\n<p>If there is an input or another form element, the keyboard would pop up when the element was focused. For example,</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190202174136.jpg\" alt=\"\"></p>\n<p>Is this a bug? Maybe... At least, you have to notice that before deploying. And the best way I think is to consult PM or designer if it's okay.</p>\n<p>In that case, the keyboard would make <code>vh</code> smaller which may ruin the layout using <code>vh</code>.</p>\n<h4>Link Highlight While It's Being Tapped</h4>\n<p>In my Android Chrome 71, the highlight would show when I touch the link.</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190202173819.jpg\" alt=\"\"></p>\n<p>We can disable it by the code below.</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-tap-highlight-color</span>: <span class=\"built_in\">rgba</span>(0, 0, 0, 0);</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-tap-highlight-color</span>: transparent; <span class=\"comment\">/* For some Androids */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>I would suggest you disable it because different manufacturers may show different colors</strong>.</p>\n<h4><code>img</code> Without src Would Have 1px White <code>border</code> on Mobile Chrome 70.</h4>\n<p>You may need to add the code below to your <em>reset.css</em> to hide the <code>img</code> without <code>src</code>.</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[src]</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4>Qrcode in WeChat</h4>\n<ul>\n<li>Use <code>img</code> Instead of <code>background-image</code>. Otherwise, it won't work.</li>\n<li>Don't put two qrcodes in one screen. Otherwise, it would only recognize one.</li>\n</ul>\n<h4>Format-detection</h4>\n<p>It is said that iOS safari has a default style for telephone numbers, email, etc. As I tested in iPhoneX 11.3, at least for telephone numbers, it does have a default style like below.</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190201171930.png\" alt=\"\"></p>\n<p>If we want to disable the default style we can use the code below to avoid that.</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no, email=no, date=no, address=no, url=no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>If you want to call telephone, send message etc when the element is clicked you can do it by</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"tel:020-11811922\"</span>&gt;</span>Call me: 020-11811922<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"sms:10086\"</span>&gt;</span>Send me a message: 10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4>Disable Select</h4>\n<p>You may want to avoid the situation like below when the user is touching the <strong>text of the element</strong>.</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190202173857.jpg\" alt=\"\"> <img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190202173902.jpg\" alt=\"\"></p>\n<p>You can use the code below to avoid that.</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-user-select</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-user-select</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-ms-user-select</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The user may still hear the tone or feel the vibration, at least in my WeChat 7.0.0. <strong>However, the user can still trigger selection on UC, QQ browser with an extra operation.</strong></p>\n<h4>Avoid Popup Menu in Long Touch ?（Not Compatible）</h4>\n<p>You may also want to disable popup like below when the user is touching <strong>an image or other stuff</strong></p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190202173852.jpg\" alt=\"\"> <img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190202173826.jpg\" alt=\"\"></p>\n<p>In this case, <code>user-select:none</code> is not enough to cover this. You may have to add js code like below.</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'contextmenu'</span>, event =&gt; event.preventDefault())</span><br></pre></td></tr></table></figure></p>\n<p>Our User may still hear the tone or feel the vibration, at least in my Android Chrome 71. <strong>However, in WeChat, QQ and UC browser, it doesn't work.</strong></p>\n<p>and CSS to disable callout in iOS.</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.target</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-touch-callout</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4>Use <code>touchstart</code> to Imitate <code>hover</code></h4>\n<p>As we all know, there is no <code>hover</code> on mobile. If you really want that, you can use <code>touchstart</code> to imitate it.</p>\n<h4>No Need to Worry About the Scroll Bar</h4>\n<p>On mobile, the scroll bar would hide automatically when you stop scrolling.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/69\"><strong>Source</strong></a></p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://www.w3.org/TR/css-device-adapt-1/#user-scalable\" target=\"_blank\" rel=\"noopener\">user-scalable</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4>Layout</h4>\n<p>I guess most of you were using <code>rem</code>, <code>vw</code>, <code>viewport</code> etc.</p>\n<p>For <code>rem</code> or <code>vw</code>, we always work with the below tag.</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>And then we transformed <code>px</code> to <code>rem</code> or <code>vw</code> by plugins. However, some guys prefer using internal scale logic like below:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- if the device-width is 375 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=750, initial-scale=0.5\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>It will also work by changing the <code>width</code> and <code>initial-scale</code> at the same time.</p>\n<p>However, in most cases, we can see the <code>meta[name=&quot;viewport&quot;]</code> with more complicated content. For example,</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>What if we remove the <code>minimum-scale</code>, <code>minimum-scale</code> and <code>user-scalable</code>? The result is:</p>\n<ul>\n<li>\n<p>If an <code>input</code> was focused on safari, the web page would zoom in. Here is the proof.</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190201171932.gif\" alt=\"\"></p>\n</li>\n<li>\n<p>You will get the scale buttons like below when you touch the page in WeChat 7.0.0, at least in Android.</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190128134750.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>And the solution is to add <code>user-scalable=no</code> or <code>minimum-scale=1, minimum-scale=1</code>. But you have to accept a shortcoming:</p>\n<ul>\n<li><strong>User can't zoom the page using two fingers, at least in my Android WeChat and Chrome 71.</strong> Though in some browsers user can still zoom like UC, QQ etc.</li>\n</ul>\n<p>For better compatibility, we may have to use both <code>user-scalable=no</code> and <code>minimum-scale=1, minimum-scale=1</code>. That's why we always see the code below.</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4>Screen With High Resolution</h4>\n<p>Normally, we would use <code>png@2x</code>, <code>png@3x</code> etc to solve the vague problem of images brought by high resolution screen. For example,</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (-webkit-min-device-pixel-ratio: <span class=\"number\">2</span>), (min-resolution: <span class=\"number\">192dpi</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'/images/my_image@2x.png'</span>) center center no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> (-webkit-min-device-pixel-ratio: <span class=\"number\">3</span>), (min-resolution: <span class=\"number\">288dpi</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'/images/my_image@3x.png'</span>) center center no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>A convenient way to do this is by <a href=\"https://github.com/strues/retinajs\">retinajs</a>. And for icons, I would suggest you use <code>svg</code> if possible.</p>\n<h4><code>vh</code> Is Always Calculated as If the Url Bar Is Hidden.</h4>\n<p>In brief, <code>100vh</code> doesn't equal <code>window.innerHeight</code>. For more, check <a href=\"https://github.com/xianshenglu/blog/issues/38\">issues/38</a>.</p>\n<h4>Consider the Pop-Up Keyboard</h4>\n<p>If there is an input or another form element, the keyboard would pop up when the element was focused. For example,</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190202174136.jpg\" alt=\"\"></p>\n<p>Is this a bug? Maybe... At least, you have to notice that before deploying. And the best way I think is to consult PM or designer if it's okay.</p>\n<p>In that case, the keyboard would make <code>vh</code> smaller which may ruin the layout using <code>vh</code>.</p>\n<h4>Link Highlight While It's Being Tapped</h4>\n<p>In my Android Chrome 71, the highlight would show when I touch the link.</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190202173819.jpg\" alt=\"\"></p>\n<p>We can disable it by the code below.</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-tap-highlight-color</span>: <span class=\"built_in\">rgba</span>(0, 0, 0, 0);</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-tap-highlight-color</span>: transparent; <span class=\"comment\">/* For some Androids */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>I would suggest you disable it because different manufacturers may show different colors</strong>.</p>\n<h4><code>img</code> Without src Would Have 1px White <code>border</code> on Mobile Chrome 70.</h4>\n<p>You may need to add the code below to your <em>reset.css</em> to hide the <code>img</code> without <code>src</code>.</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[src]</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4>Qrcode in WeChat</h4>\n<ul>\n<li>Use <code>img</code> Instead of <code>background-image</code>. Otherwise, it won't work.</li>\n<li>Don't put two qrcodes in one screen. Otherwise, it would only recognize one.</li>\n</ul>\n<h4>Format-detection</h4>\n<p>It is said that iOS safari has a default style for telephone numbers, email, etc. As I tested in iPhoneX 11.3, at least for telephone numbers, it does have a default style like below.</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190201171930.png\" alt=\"\"></p>\n<p>If we want to disable the default style we can use the code below to avoid that.</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no, email=no, date=no, address=no, url=no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>If you want to call telephone, send message etc when the element is clicked you can do it by</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"tel:020-11811922\"</span>&gt;</span>Call me: 020-11811922<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"sms:10086\"</span>&gt;</span>Send me a message: 10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4>Disable Select</h4>\n<p>You may want to avoid the situation like below when the user is touching the <strong>text of the element</strong>.</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190202173857.jpg\" alt=\"\"> <img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190202173902.jpg\" alt=\"\"></p>\n<p>You can use the code below to avoid that.</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-user-select</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-user-select</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-ms-user-select</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The user may still hear the tone or feel the vibration, at least in my WeChat 7.0.0. <strong>However, the user can still trigger selection on UC, QQ browser with an extra operation.</strong></p>\n<h4>Avoid Popup Menu in Long Touch ?（Not Compatible）</h4>\n<p>You may also want to disable popup like below when the user is touching <strong>an image or other stuff</strong></p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190202173852.jpg\" alt=\"\"> <img src=\"../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190202173826.jpg\" alt=\"\"></p>\n<p>In this case, <code>user-select:none</code> is not enough to cover this. You may have to add js code like below.</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'contextmenu'</span>, event =&gt; event.preventDefault())</span><br></pre></td></tr></table></figure></p>\n<p>Our User may still hear the tone or feel the vibration, at least in my Android Chrome 71. <strong>However, in WeChat, QQ and UC browser, it doesn't work.</strong></p>\n<p>and CSS to disable callout in iOS.</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.target</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-touch-callout</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4>Use <code>touchstart</code> to Imitate <code>hover</code></h4>\n<p>As we all know, there is no <code>hover</code> on mobile. If you really want that, you can use <code>touchstart</code> to imitate it.</p>\n<h4>No Need to Worry About the Scroll Bar</h4>\n<p>On mobile, the scroll bar would hide automatically when you stop scrolling.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/69\"><strong>Source</strong></a></p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://www.w3.org/TR/css-device-adapt-1/#user-scalable\" target=\"_blank\" rel=\"noopener\">user-scalable</a></li>\n</ul>\n"},{"title":"Override 3rd Party Style","comments":1,"date":"2018-10-05T08:26:56.000Z","_content":"\n## Preface\n\nIt is very common to see 3rd party libs in our projects, especially some UI frames. Meanwhile, here comes the problems.\n\nHow can we override partial 3rd party style and avoid our style being overridden by 3rd party.\n\nWell, that's two question.\n\n## Main\n\n### Override Partial 3rd Party Style\n\n- _lib-override.css_\n\nI think the first thing is to prepare a single file like _lib-override.css_ to do this job whatever choice we make.\n\n- override ways\n\nIt's obvious that `!important` or `#id` can help us do this job. However, I wouldn't suggest you to do that. I would choose to use class selector with namespace to solve this kind of problem. For example,\n\n3rd party code is:\n\n```css\n.el-button--primary {\n  color: #fff;\n}\n```\n\nThen you can write:\n\n```less\n.app {\n  .el-button--primary {\n    color: #fff;\n  }\n}\n```\n\nCode above also works to avoid our style being overridden by 3rd party. In some cases, if one class is not enough you may have to add more class as namespace.\n\n## Ending\n\n## Reference\n","source":"_posts/override-3rd-party-style.md","raw":"---\ntitle: Override 3rd Party Style\ncategories: css\ntags:\n  - override.css\ncomments: true\ndate: 2018-10-05 16:26:56\n---\n\n## Preface\n\nIt is very common to see 3rd party libs in our projects, especially some UI frames. Meanwhile, here comes the problems.\n\nHow can we override partial 3rd party style and avoid our style being overridden by 3rd party.\n\nWell, that's two question.\n\n## Main\n\n### Override Partial 3rd Party Style\n\n- _lib-override.css_\n\nI think the first thing is to prepare a single file like _lib-override.css_ to do this job whatever choice we make.\n\n- override ways\n\nIt's obvious that `!important` or `#id` can help us do this job. However, I wouldn't suggest you to do that. I would choose to use class selector with namespace to solve this kind of problem. For example,\n\n3rd party code is:\n\n```css\n.el-button--primary {\n  color: #fff;\n}\n```\n\nThen you can write:\n\n```less\n.app {\n  .el-button--primary {\n    color: #fff;\n  }\n}\n```\n\nCode above also works to avoid our style being overridden by 3rd party. In some cases, if one class is not enough you may have to add more class as namespace.\n\n## Ending\n\n## Reference\n","slug":"override-3rd-party-style","published":1,"updated":"2018-10-05T09:10:38.423Z","layout":"post","photos":[],"link":"","_id":"cjv0yvipe001qborphzhe8cna","content":"<h2>Preface</h2>\n<p>It is very common to see 3rd party libs in our projects, especially some UI frames. Meanwhile, here comes the problems.</p>\n<p>How can we override partial 3rd party style and avoid our style being overridden by 3rd party.</p>\n<p>Well, that's two question.</p>\n<h2>Main</h2>\n<h3>Override Partial 3rd Party Style</h3>\n<ul>\n<li><em>lib-override.css</em></li>\n</ul>\n<p>I think the first thing is to prepare a single file like <em>lib-override.css</em> to do this job whatever choice we make.</p>\n<ul>\n<li>override ways</li>\n</ul>\n<p>It's obvious that <code>!important</code> or <code>#id</code> can help us do this job. However, I wouldn't suggest you to do that. I would choose to use class selector with namespace to solve this kind of problem. For example,</p>\n<p>3rd party code is:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.el-button--primary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Then you can write:</p>\n<p><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.app</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.el-button--primary</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Code above also works to avoid our style being overridden by 3rd party. In some cases, if one class is not enough you may have to add more class as namespace.</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>It is very common to see 3rd party libs in our projects, especially some UI frames. Meanwhile, here comes the problems.</p>\n<p>How can we override partial 3rd party style and avoid our style being overridden by 3rd party.</p>\n<p>Well, that's two question.</p>\n<h2>Main</h2>\n<h3>Override Partial 3rd Party Style</h3>\n<ul>\n<li><em>lib-override.css</em></li>\n</ul>\n<p>I think the first thing is to prepare a single file like <em>lib-override.css</em> to do this job whatever choice we make.</p>\n<ul>\n<li>override ways</li>\n</ul>\n<p>It's obvious that <code>!important</code> or <code>#id</code> can help us do this job. However, I wouldn't suggest you to do that. I would choose to use class selector with namespace to solve this kind of problem. For example,</p>\n<p>3rd party code is:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.el-button--primary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Then you can write:</p>\n<p><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.app</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.el-button--primary</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Code above also works to avoid our style being overridden by 3rd party. In some cases, if one class is not enough you may have to add more class as namespace.</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n"},{"title":"Problems Met When Using canvas","comments":1,"date":"2018-10-05T11:21:32.000Z","_content":"\n## Preface\n\nKind of weird when using `canvas`, but it's true. Let's take a look.\n\n## Main\n\n### canvas would lost accurate data when opacity isn't equal to 255\n\nsample code:\n\n```html\n <canvas id=\"canvas\"></canvas>\n```\n\n```js\nlet canvas = document.getElementById('canvas')\nlet cxt = canvas.getContext('2d')\nlet imageData = cxt.getImageData(0, 0, 1, 1)\nlet data = imageData.data\n\ndata[0] = 200\ndata[1] = 100\ndata[2] = 50\ndata[3] = 25\nconsole.log(imageData.data) //[200, 100, 50, 25]\ncxt.putImageData(imageData, 0, 0)\nlet debugImgData = cxt.getImageData(0, 0, 1, 1)\nconsole.log(debugImgData.data) //[204, 102, 51, 25]\n```\n\n`imageData.data` wouldn't be equal to `debugImgData.data` because opacity isn't equal to 255. If we set opacity to 255. They would be the same.\n\n```js\ndata[3] = 255\n```\n\n### imageData.data is readonly\n\nYou can modify `data` but you can't reassign it like `imageData.data=[1,22,3,5]`. It will fail **silently**.\n\n### copy imageData\n\nBecause `imageData.data` is readonly. So, you can't copy it like code below:\n\n```js\nlet newImgData = cxt.createImageData(debugImgData)\nnewImgData.data = debugImgData.data\nconsole.log('newImgData', newImgData.data) //[0,0,0,0]\n```\n\nAccording to mdn, return value of [createImageData][createimagedata] is\n\n_A new ImageData object with the specified width and height. The new object is filled with transparent black pixels._\n\nwhich is `[0,0,0,0,,,,]`. And assignment of `newImgData.data = debugImgData.data` fail silently. So, if you want to copy `imageData` the right way is:\n\n```js\nlet newImgData = cxt.createImageData(debugImgData)\nnewImgData.data.set(debugImgData.data)\nconsole.log('newImgData', newImgData.data) //[200, 100, 50, 255]\n```\n\nThat is because `ImageData.data` is a `Uint8ClampedArray`. So we can find the API of\n`Uint8ClampedArray.prototype.set()` which stores multiple values in the typed array, reading input values from a specified array.\n\n## Ending\n\n## Reference\n\n- [HTML Canvas putImageData with transparency causes incorrect RGB to be saved](https://stackoverflow.com/questions/36588722/html-canvas-putimagedata-with-transparency-causes-incorrect-rgb-to-be-saved#)\n\n[createimagedata]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData\n","source":"_posts/problems-met-when-using-canvas.md","raw":"---\ntitle: Problems Met When Using canvas\ncategories: html\ntags:\n  - canvas\ncomments: true\ndate: 2018-10-05 19:21:32\n---\n\n## Preface\n\nKind of weird when using `canvas`, but it's true. Let's take a look.\n\n## Main\n\n### canvas would lost accurate data when opacity isn't equal to 255\n\nsample code:\n\n```html\n <canvas id=\"canvas\"></canvas>\n```\n\n```js\nlet canvas = document.getElementById('canvas')\nlet cxt = canvas.getContext('2d')\nlet imageData = cxt.getImageData(0, 0, 1, 1)\nlet data = imageData.data\n\ndata[0] = 200\ndata[1] = 100\ndata[2] = 50\ndata[3] = 25\nconsole.log(imageData.data) //[200, 100, 50, 25]\ncxt.putImageData(imageData, 0, 0)\nlet debugImgData = cxt.getImageData(0, 0, 1, 1)\nconsole.log(debugImgData.data) //[204, 102, 51, 25]\n```\n\n`imageData.data` wouldn't be equal to `debugImgData.data` because opacity isn't equal to 255. If we set opacity to 255. They would be the same.\n\n```js\ndata[3] = 255\n```\n\n### imageData.data is readonly\n\nYou can modify `data` but you can't reassign it like `imageData.data=[1,22,3,5]`. It will fail **silently**.\n\n### copy imageData\n\nBecause `imageData.data` is readonly. So, you can't copy it like code below:\n\n```js\nlet newImgData = cxt.createImageData(debugImgData)\nnewImgData.data = debugImgData.data\nconsole.log('newImgData', newImgData.data) //[0,0,0,0]\n```\n\nAccording to mdn, return value of [createImageData][createimagedata] is\n\n_A new ImageData object with the specified width and height. The new object is filled with transparent black pixels._\n\nwhich is `[0,0,0,0,,,,]`. And assignment of `newImgData.data = debugImgData.data` fail silently. So, if you want to copy `imageData` the right way is:\n\n```js\nlet newImgData = cxt.createImageData(debugImgData)\nnewImgData.data.set(debugImgData.data)\nconsole.log('newImgData', newImgData.data) //[200, 100, 50, 255]\n```\n\nThat is because `ImageData.data` is a `Uint8ClampedArray`. So we can find the API of\n`Uint8ClampedArray.prototype.set()` which stores multiple values in the typed array, reading input values from a specified array.\n\n## Ending\n\n## Reference\n\n- [HTML Canvas putImageData with transparency causes incorrect RGB to be saved](https://stackoverflow.com/questions/36588722/html-canvas-putimagedata-with-transparency-causes-incorrect-rgb-to-be-saved#)\n\n[createimagedata]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData\n","slug":"problems-met-when-using-canvas","published":1,"updated":"2018-10-05T12:14:39.067Z","layout":"post","photos":[],"link":"","_id":"cjv0yvipk001tborpm091guof","content":"<h2>Preface</h2>\n<p>Kind of weird when using <code>canvas</code>, but it's true. Let's take a look.</p>\n<h2>Main</h2>\n<h3>canvas would lost accurate data when opacity isn't equal to 255</h3>\n<p>sample code:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> cxt = canvas.getContext(<span class=\"string\">'2d'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> imageData = cxt.getImageData(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = imageData.data</span><br><span class=\"line\"></span><br><span class=\"line\">data[<span class=\"number\">0</span>] = <span class=\"number\">200</span></span><br><span class=\"line\">data[<span class=\"number\">1</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">data[<span class=\"number\">2</span>] = <span class=\"number\">50</span></span><br><span class=\"line\">data[<span class=\"number\">3</span>] = <span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(imageData.data) <span class=\"comment\">//[200, 100, 50, 25]</span></span><br><span class=\"line\">cxt.putImageData(imageData, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> debugImgData = cxt.getImageData(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(debugImgData.data) <span class=\"comment\">//[204, 102, 51, 25]</span></span><br></pre></td></tr></table></figure></p>\n<p><code>imageData.data</code> wouldn't be equal to <code>debugImgData.data</code> because opacity isn't equal to 255. If we set opacity to 255. They would be the same.</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data[<span class=\"number\">3</span>] = <span class=\"number\">255</span></span><br></pre></td></tr></table></figure></p>\n<h3>imageData.data is readonly</h3>\n<p>You can modify <code>data</code> but you can't reassign it like <code>imageData.data=[1,22,3,5]</code>. It will fail <strong>silently</strong>.</p>\n<h3>copy imageData</h3>\n<p>Because <code>imageData.data</code> is readonly. So, you can't copy it like code below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newImgData = cxt.createImageData(debugImgData)</span><br><span class=\"line\">newImgData.data = debugImgData.data</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'newImgData'</span>, newImgData.data) <span class=\"comment\">//[0,0,0,0]</span></span><br></pre></td></tr></table></figure></p>\n<p>According to mdn, return value of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData\" target=\"_blank\" rel=\"noopener\">createImageData</a> is</p>\n<p><em>A new ImageData object with the specified width and height. The new object is filled with transparent black pixels.</em></p>\n<p>which is <code>[0,0,0,0,,,,]</code>. And assignment of <code>newImgData.data = debugImgData.data</code> fail silently. So, if you want to copy <code>imageData</code> the right way is:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newImgData = cxt.createImageData(debugImgData)</span><br><span class=\"line\">newImgData.data.set(debugImgData.data)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'newImgData'</span>, newImgData.data) <span class=\"comment\">//[200, 100, 50, 255]</span></span><br></pre></td></tr></table></figure></p>\n<p>That is because <code>ImageData.data</code> is a <code>Uint8ClampedArray</code>. So we can find the API of\n<code>Uint8ClampedArray.prototype.set()</code> which stores multiple values in the typed array, reading input values from a specified array.</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/36588722/html-canvas-putimagedata-with-transparency-causes-incorrect-rgb-to-be-saved#\" target=\"_blank\" rel=\"noopener\">HTML Canvas putImageData with transparency causes incorrect RGB to be saved</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>Kind of weird when using <code>canvas</code>, but it's true. Let's take a look.</p>\n<h2>Main</h2>\n<h3>canvas would lost accurate data when opacity isn't equal to 255</h3>\n<p>sample code:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> cxt = canvas.getContext(<span class=\"string\">'2d'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> imageData = cxt.getImageData(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = imageData.data</span><br><span class=\"line\"></span><br><span class=\"line\">data[<span class=\"number\">0</span>] = <span class=\"number\">200</span></span><br><span class=\"line\">data[<span class=\"number\">1</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">data[<span class=\"number\">2</span>] = <span class=\"number\">50</span></span><br><span class=\"line\">data[<span class=\"number\">3</span>] = <span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(imageData.data) <span class=\"comment\">//[200, 100, 50, 25]</span></span><br><span class=\"line\">cxt.putImageData(imageData, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> debugImgData = cxt.getImageData(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(debugImgData.data) <span class=\"comment\">//[204, 102, 51, 25]</span></span><br></pre></td></tr></table></figure></p>\n<p><code>imageData.data</code> wouldn't be equal to <code>debugImgData.data</code> because opacity isn't equal to 255. If we set opacity to 255. They would be the same.</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data[<span class=\"number\">3</span>] = <span class=\"number\">255</span></span><br></pre></td></tr></table></figure></p>\n<h3>imageData.data is readonly</h3>\n<p>You can modify <code>data</code> but you can't reassign it like <code>imageData.data=[1,22,3,5]</code>. It will fail <strong>silently</strong>.</p>\n<h3>copy imageData</h3>\n<p>Because <code>imageData.data</code> is readonly. So, you can't copy it like code below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newImgData = cxt.createImageData(debugImgData)</span><br><span class=\"line\">newImgData.data = debugImgData.data</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'newImgData'</span>, newImgData.data) <span class=\"comment\">//[0,0,0,0]</span></span><br></pre></td></tr></table></figure></p>\n<p>According to mdn, return value of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData\" target=\"_blank\" rel=\"noopener\">createImageData</a> is</p>\n<p><em>A new ImageData object with the specified width and height. The new object is filled with transparent black pixels.</em></p>\n<p>which is <code>[0,0,0,0,,,,]</code>. And assignment of <code>newImgData.data = debugImgData.data</code> fail silently. So, if you want to copy <code>imageData</code> the right way is:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newImgData = cxt.createImageData(debugImgData)</span><br><span class=\"line\">newImgData.data.set(debugImgData.data)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'newImgData'</span>, newImgData.data) <span class=\"comment\">//[200, 100, 50, 255]</span></span><br></pre></td></tr></table></figure></p>\n<p>That is because <code>ImageData.data</code> is a <code>Uint8ClampedArray</code>. So we can find the API of\n<code>Uint8ClampedArray.prototype.set()</code> which stores multiple values in the typed array, reading input values from a specified array.</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/36588722/html-canvas-putimagedata-with-transparency-causes-incorrect-rgb-to-be-saved#\" target=\"_blank\" rel=\"noopener\">HTML Canvas putImageData with transparency causes incorrect RGB to be saved</a></li>\n</ul>\n"},{"title":"Remnant Shadows When Toggling HD Pictures with Alpha","comments":1,"date":"2018-12-01T02:10:51.000Z","_content":"\nSee the demo:\n\n```html\n<div id=\"app\" class=\"app\">\n  <img src=\"./images/hd3.png\" class=\"app__image\" id=\"app__image\" />\n  <button class=\"app__button\" id=\"app__button\">next image</button>\n</div>\n<script>\n  let app__button = document.getElementById('app__button')\n  let app__image = document.getElementById('app__image')\n  app__button.addEventListener('click', function(event) {\n    app__image.style.visibility = 'hidden'\n    app__image.src = './images/hd4.png'\n    app__image.onload = function() {\n      app__image.style.visibility = 'visible'\n    }\n  })\n</script>\n```\n\nThe code is easy. But the images are special.\n\n- Type is png.\n- Size is more than 10M.\n- Alpha channel has been modified.\n- Both happen on my win7 and Mac 10.13.\n\nIn this case, when we click the button above, the result in Firefox and Safari would be:\n\n![](../images/1543630801931.gif)\n\nIf you look at it carefully, you would see the remnant shadows of previous image. That is unexpected because I change the `src` in the `onload` callback. Also, the same thing would happen in Chrome, though the frequency is much lower. So, how do we solve this?\n\n#### Solution\n\n```js\nlet app__button = document.getElementById('app__button')\nlet app__image = document.getElementById('app__image')\napp__button.addEventListener('click', function(event) {\n  app__image.src = '../images/transparent.png'\n  let tempImage = new Image()\n  tempImage.src = '../images/hd4.png'\n  tempImage.onload = function(event) {\n    // setTimeout(() => {\n    // if you are still worried, you can use setTimeout or requestAnimationFrame to delay\n    app__image.src = event.target.src\n    // }, 20)\n  }\n})\n```\n\nSee? We change the previous image with a transparent image. A little hack, but it works.\n\nObviously, there is a little interval between images onload and browsers' ready to render the latest image, especially in Firefox and Safari. When the browsers' performance becomes better this problem may not happen again. Anyway, hope we lucky.\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/22)\n","source":"_posts/remnant-shadows-when-toggling-pictures-with-alpha-in-firefox-and-safari.md","raw":"---\ntitle: Remnant Shadows When Toggling HD Pictures with Alpha\ncategories: js\ntags:\n  - performance\n  - image\ncomments: true\ndate: 2018-12-01 10:10:51\n---\n\nSee the demo:\n\n```html\n<div id=\"app\" class=\"app\">\n  <img src=\"./images/hd3.png\" class=\"app__image\" id=\"app__image\" />\n  <button class=\"app__button\" id=\"app__button\">next image</button>\n</div>\n<script>\n  let app__button = document.getElementById('app__button')\n  let app__image = document.getElementById('app__image')\n  app__button.addEventListener('click', function(event) {\n    app__image.style.visibility = 'hidden'\n    app__image.src = './images/hd4.png'\n    app__image.onload = function() {\n      app__image.style.visibility = 'visible'\n    }\n  })\n</script>\n```\n\nThe code is easy. But the images are special.\n\n- Type is png.\n- Size is more than 10M.\n- Alpha channel has been modified.\n- Both happen on my win7 and Mac 10.13.\n\nIn this case, when we click the button above, the result in Firefox and Safari would be:\n\n![](../images/1543630801931.gif)\n\nIf you look at it carefully, you would see the remnant shadows of previous image. That is unexpected because I change the `src` in the `onload` callback. Also, the same thing would happen in Chrome, though the frequency is much lower. So, how do we solve this?\n\n#### Solution\n\n```js\nlet app__button = document.getElementById('app__button')\nlet app__image = document.getElementById('app__image')\napp__button.addEventListener('click', function(event) {\n  app__image.src = '../images/transparent.png'\n  let tempImage = new Image()\n  tempImage.src = '../images/hd4.png'\n  tempImage.onload = function(event) {\n    // setTimeout(() => {\n    // if you are still worried, you can use setTimeout or requestAnimationFrame to delay\n    app__image.src = event.target.src\n    // }, 20)\n  }\n})\n```\n\nSee? We change the previous image with a transparent image. A little hack, but it works.\n\nObviously, there is a little interval between images onload and browsers' ready to render the latest image, especially in Firefox and Safari. When the browsers' performance becomes better this problem may not happen again. Anyway, hope we lucky.\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/22)\n","slug":"remnant-shadows-when-toggling-pictures-with-alpha-in-firefox-and-safari","published":1,"updated":"2018-12-22T09:03:07.857Z","layout":"post","photos":[],"link":"","_id":"cjv0yvipn001wborpqlocewqo","content":"<p>See the demo:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./images/hd3.png\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app__image\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app__image\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app__button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app__button\"</span>&gt;</span>next image<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> app__button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app__button'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> app__image = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app__image'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  app__button.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    app__image.style.visibility = <span class=\"string\">'hidden'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    app__image.src = <span class=\"string\">'./images/hd4.png'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    app__image.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      app__image.style.visibility = <span class=\"string\">'visible'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>The code is easy. But the images are special.</p>\n<ul>\n<li>Type is png.</li>\n<li>Size is more than 10M.</li>\n<li>Alpha channel has been modified.</li>\n<li>Both happen on my win7 and Mac 10.13.</li>\n</ul>\n<p>In this case, when we click the button above, the result in Firefox and Safari would be:</p>\n<p><img src=\"../images/1543630801931.gif\" alt=\"\"></p>\n<p>If you look at it carefully, you would see the remnant shadows of previous image. That is unexpected because I change the <code>src</code> in the <code>onload</code> callback. Also, the same thing would happen in Chrome, though the frequency is much lower. So, how do we solve this?</p>\n<h4>Solution</h4>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app__button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app__button'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> app__image = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app__image'</span>)</span><br><span class=\"line\">app__button.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  app__image.src = <span class=\"string\">'../images/transparent.png'</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tempImage = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">  tempImage.src = <span class=\"string\">'../images/hd4.png'</span></span><br><span class=\"line\">  tempImage.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// setTimeout(() =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// if you are still worried, you can use setTimeout or requestAnimationFrame to delay</span></span><br><span class=\"line\">    app__image.src = event.target.src</span><br><span class=\"line\">    <span class=\"comment\">// &#125;, 20)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>See? We change the previous image with a transparent image. A little hack, but it works.</p>\n<p>Obviously, there is a little interval between images onload and browsers' ready to render the latest image, especially in Firefox and Safari. When the browsers' performance becomes better this problem may not happen again. Anyway, hope we lucky.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/22\"><strong>Original Post</strong></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>See the demo:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./images/hd3.png\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app__image\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app__image\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app__button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app__button\"</span>&gt;</span>next image<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> app__button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app__button'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> app__image = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app__image'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  app__button.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    app__image.style.visibility = <span class=\"string\">'hidden'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    app__image.src = <span class=\"string\">'./images/hd4.png'</span></span></span><br><span class=\"line\"><span class=\"javascript\">    app__image.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      app__image.style.visibility = <span class=\"string\">'visible'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>The code is easy. But the images are special.</p>\n<ul>\n<li>Type is png.</li>\n<li>Size is more than 10M.</li>\n<li>Alpha channel has been modified.</li>\n<li>Both happen on my win7 and Mac 10.13.</li>\n</ul>\n<p>In this case, when we click the button above, the result in Firefox and Safari would be:</p>\n<p><img src=\"../images/1543630801931.gif\" alt=\"\"></p>\n<p>If you look at it carefully, you would see the remnant shadows of previous image. That is unexpected because I change the <code>src</code> in the <code>onload</code> callback. Also, the same thing would happen in Chrome, though the frequency is much lower. So, how do we solve this?</p>\n<h4>Solution</h4>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app__button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app__button'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> app__image = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app__image'</span>)</span><br><span class=\"line\">app__button.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  app__image.src = <span class=\"string\">'../images/transparent.png'</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tempImage = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">  tempImage.src = <span class=\"string\">'../images/hd4.png'</span></span><br><span class=\"line\">  tempImage.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// setTimeout(() =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// if you are still worried, you can use setTimeout or requestAnimationFrame to delay</span></span><br><span class=\"line\">    app__image.src = event.target.src</span><br><span class=\"line\">    <span class=\"comment\">// &#125;, 20)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>See? We change the previous image with a transparent image. A little hack, but it works.</p>\n<p>Obviously, there is a little interval between images onload and browsers' ready to render the latest image, especially in Firefox and Safari. When the browsers' performance becomes better this problem may not happen again. Anyway, hope we lucky.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/22\"><strong>Original Post</strong></a></p>\n"},{"title":"自定义微信分享样式","comments":1,"date":"2018-10-02T09:42:57.000Z","_content":"\n## Preface\n\n产品希望我们在微信分享出去的链接，有自己的样式，而不是仅仅一个链接。用产品的话来说，你发给客户一个链接，客户敢点么？？？\n\n听着比较有意思，不过也不能说完全没有道理，毕竟各种各样的诈骗大家也是有所耳闻，经确认，产品想要：\n\n![截图20181002175453.png](../images/截图20181002175453.png)\n\n而我们当前分享是：\n\n![截图20181002175558.png](../images/截图20181002175558.png)\n\n## Main\n\n总监给我提示说，微信有 js-sdk ，可以在 js 里设置这个样式。\n\n于是，我找到了[微信 JS-SDK 说明文档][微信js-sdk说明文档]，基本上就是根据文档走些配置，这个要和产品那边要些账号密码，改些东西之类，根据文档来，没什么好说的。\n\n大体流程如下：\n\n1. 步骤一：绑定域名\n2. 步骤二：引入 JS 文件\n3. 步骤三：通过 config 接口注入权限验证配置\n\n```js\nwx.config({}) //传入一些初始化参数\n```\n\n4. 步骤四：通过 ready 接口处理成功验证\n\n```js\nwx.ready(function() {}) //传入成功回调\n```\n\n5. 步骤五：通过 error 接口处理失败验证\n\n```js\nwx.error(function() {}) //传入失败回调\n```\n\n实际操作的时候，遇到了几点麻烦，这里需要提一下：\n\n#### 测试的时候，注意开启 debug 模式，方便定位问题。\n\n```js\nwx.config({ debug: true /*其他参数*/ })\n```\n\n#### 出于安全考虑，开发者必须在服务器端实现签名的逻辑。\n\n这个是文档说的，反正就是给后台处理了，最终前端初始化需要的几个字段，除了 `debug` 和 `jsApiList` ，都是从后台拿的。\n\n```js\nwx.config({\n    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名\n    jsApiList: [] // 必填，需要使用的JS接口列表\n});\n```\n\n后台在实现的时候，可能需要注意文档提示的两点：\n\n1. access_token（有效期 7200 秒，开发者必须在自己的服务全局缓存 access_token）\n\n2. jsapi_ticket（有效期 7200 秒，开发者必须在自己的服务全局缓存 jsapi_ticket）\n\n因为这会导致一开始生成的签名没错，但是两个小时后就失效了。\n\n#### 代码逻辑\n\n通常的逻辑都是前端从后台拿到上面的几个字段，在前端完成初始化，然后添加初始化成功和失败的回调。\n\n示例：\n\n```js\nvar link = location.href\n$.ajax({\n  url: 'your_url', //后台给你提供的接口\n  type: 'GET',\n  data: { url: link },\n  async: true,\n  dataType: 'json',\n  success: function(data) {\n    wx.config({\n      debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来\n      appId: data.configMap.appId, // 必填，公众号的唯一标识\n      timestamp: data.configMap.timestamp, // 必填，生成签名的时间戳\n      nonceStr: data.configMap.nonceStr, // 必填，生成签名的随机串\n      signature: data.configMap.signature, // 必填，签名，见附录1\n      jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n    })\n    wx.ready(function(res) {\n      wx.onMenuShareAppMessage({\n        title: document.title,\n        desc: document.title,\n        link: link,\n        imgUrl: Imgurl,\n        trigger: function(res) {},\n        success: function(res) {},\n        cancel: function(res) {},\n        fail: function(res) {}\n      })\n      wx.onMenuShareTimeline({\n        title: document.title,\n        link: link,\n        imgUrl: Imgurl,\n        trigger: function(res) {},\n        success: function(res) {},\n        cancel: function(res) {},\n        fail: function(res) {}\n      })\n    })\n    wx.error(function(res) {\n      alert(res)\n    })\n  },\n  error: function(error) {\n    alert(error)\n  }\n})\n```\n\n我司稍微特殊些，直接把初始化的代码放在前面需要引入微信的 js 文件后面了，所以我直接引入这个文件就完成了初始化操作。不过，我还是需要在引入后监听初始化成功和失败的回调。\n\n我司代码：\n\n```html\n<script src=\"./js/shareInWeChat.js?debug=1\"></script>\n<!-- 里面包含了 wx.config({}) 的代码-->\n<!-- 通过 debug 参数来切换调试模式  -->\n```\n\n```js\nsetWeChatShareStyle(product, imgUrl)\nfunction setWeChatShareStyle(product, imgUrl) {\n  var success = function(res) {}\n  var fail = function(res) {}\n  var desc =\n    product.description && product.description !== ''\n      ? product.description\n      : '后备描述'\n  wx.ready(function() {\n    var eventConf = {\n      title: product.name,\n      desc: desc,\n      imgUrl: imgUrl,\n      link: window.location.href,\n      success: success\n    }\n    if (pubMethods.isAndroid()) {\n      // 安卓适用于老接口，新接口不行\n      wx.onMenuShareAppMessage(eventConf)\n      wx.onMenuShareTimeline(eventConf)\n      wx.onMenuShareQQ(eventConf)\n      wx.onMenuShareQZone(eventConf)\n    }\n    if (pubMethods.isIOS()) {\n      // iOS 适用于新接口，老接口不行\n      wx.updateAppMessageShareData(eventConf, success)\n      wx.updateTimelineShareData(eventConf, success)\n    }\n  })\n  wx.error(fail)\n}\n```\n\n最初我担心，这样可能会监听不到 `wx.config` 初始化的结果，结果发现还是可以监听到的，说明 `wx.config` 里面的操作是个异步操作。\n\n#### 代码兼容性\n\n- 统一传参\n\n如上面代码所示，虽然根据微信的文档，对于不同的接口，传的参数稍有区别，但是我为了方便，都放在 `eventConf` 里面了，事实证明也是可以的（不可以我就要吐槽了，毕竟传入的是对象）。\n\n- 接口更新的 bug\n\n虽然微信文档上有接口更新的说明：\n\n_请注意，原有的 wx.onMenuShareTimeline、wx.onMenuShareAppMessage、wx.onMenuShareQQ、wx.onMenuShareQZone 接口，即将废弃。请尽快迁移使用客户端 6.7.2 及 JSSDK 1.4.0 以上版本支持的 wx.updateAppMessageShareData、updateTimelineShareData 接口。_\n\n但我实际上测试的结果是，安卓不支持新接口，iOS 支持，但是我如果把新老接口全用上，有一端会失败，所以最终才有上面那个机型判断的结果，对于不同的机型采用了不同的接口。\n\n```js\nif (pubMethods.isAndroid()) {\n  // 安卓适用于老接口，新接口不行\n  wx.onMenuShareAppMessage(eventConf)\n  wx.onMenuShareTimeline(eventConf)\n  wx.onMenuShareQQ(eventConf)\n  wx.onMenuShareQZone(eventConf)\n}\nif (pubMethods.isIOS()) {\n  // iOS 适用于新接口，老接口不行\n  wx.updateAppMessageShareData(eventConf, success)\n  wx.updateTimelineShareData(eventConf, success)\n}\n```\n\n- 分享的图片不能是 base64\n\n由于我司需要对图片进行处理再去分享，所以当我用 `canvas` 导出 `base64` 作为 `imgUrl` 的时候，我发现是没有效果的。\n\n## Ending\n\n## Reference\n\n- [微信分享自定义样式](https://segmentfault.com/a/1190000013491531)\n\n- [微信分享图标设置，以及 wx.config 配置](https://www.cnblogs.com/lxlin/p/6829893.html#undefined)\n\n[微信js-sdk说明文档]: https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115\n","source":"_posts/set-custom-style-of-share-in-wechat.md","raw":"---\ntitle: 自定义微信分享样式\ntags:\n  - wechat\n  - share\n  - qq\ncategories: js\ncomments: true\ndate: 2018-10-02 17:42:57\n---\n\n## Preface\n\n产品希望我们在微信分享出去的链接，有自己的样式，而不是仅仅一个链接。用产品的话来说，你发给客户一个链接，客户敢点么？？？\n\n听着比较有意思，不过也不能说完全没有道理，毕竟各种各样的诈骗大家也是有所耳闻，经确认，产品想要：\n\n![截图20181002175453.png](../images/截图20181002175453.png)\n\n而我们当前分享是：\n\n![截图20181002175558.png](../images/截图20181002175558.png)\n\n## Main\n\n总监给我提示说，微信有 js-sdk ，可以在 js 里设置这个样式。\n\n于是，我找到了[微信 JS-SDK 说明文档][微信js-sdk说明文档]，基本上就是根据文档走些配置，这个要和产品那边要些账号密码，改些东西之类，根据文档来，没什么好说的。\n\n大体流程如下：\n\n1. 步骤一：绑定域名\n2. 步骤二：引入 JS 文件\n3. 步骤三：通过 config 接口注入权限验证配置\n\n```js\nwx.config({}) //传入一些初始化参数\n```\n\n4. 步骤四：通过 ready 接口处理成功验证\n\n```js\nwx.ready(function() {}) //传入成功回调\n```\n\n5. 步骤五：通过 error 接口处理失败验证\n\n```js\nwx.error(function() {}) //传入失败回调\n```\n\n实际操作的时候，遇到了几点麻烦，这里需要提一下：\n\n#### 测试的时候，注意开启 debug 模式，方便定位问题。\n\n```js\nwx.config({ debug: true /*其他参数*/ })\n```\n\n#### 出于安全考虑，开发者必须在服务器端实现签名的逻辑。\n\n这个是文档说的，反正就是给后台处理了，最终前端初始化需要的几个字段，除了 `debug` 和 `jsApiList` ，都是从后台拿的。\n\n```js\nwx.config({\n    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名\n    jsApiList: [] // 必填，需要使用的JS接口列表\n});\n```\n\n后台在实现的时候，可能需要注意文档提示的两点：\n\n1. access_token（有效期 7200 秒，开发者必须在自己的服务全局缓存 access_token）\n\n2. jsapi_ticket（有效期 7200 秒，开发者必须在自己的服务全局缓存 jsapi_ticket）\n\n因为这会导致一开始生成的签名没错，但是两个小时后就失效了。\n\n#### 代码逻辑\n\n通常的逻辑都是前端从后台拿到上面的几个字段，在前端完成初始化，然后添加初始化成功和失败的回调。\n\n示例：\n\n```js\nvar link = location.href\n$.ajax({\n  url: 'your_url', //后台给你提供的接口\n  type: 'GET',\n  data: { url: link },\n  async: true,\n  dataType: 'json',\n  success: function(data) {\n    wx.config({\n      debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来\n      appId: data.configMap.appId, // 必填，公众号的唯一标识\n      timestamp: data.configMap.timestamp, // 必填，生成签名的时间戳\n      nonceStr: data.configMap.nonceStr, // 必填，生成签名的随机串\n      signature: data.configMap.signature, // 必填，签名，见附录1\n      jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n    })\n    wx.ready(function(res) {\n      wx.onMenuShareAppMessage({\n        title: document.title,\n        desc: document.title,\n        link: link,\n        imgUrl: Imgurl,\n        trigger: function(res) {},\n        success: function(res) {},\n        cancel: function(res) {},\n        fail: function(res) {}\n      })\n      wx.onMenuShareTimeline({\n        title: document.title,\n        link: link,\n        imgUrl: Imgurl,\n        trigger: function(res) {},\n        success: function(res) {},\n        cancel: function(res) {},\n        fail: function(res) {}\n      })\n    })\n    wx.error(function(res) {\n      alert(res)\n    })\n  },\n  error: function(error) {\n    alert(error)\n  }\n})\n```\n\n我司稍微特殊些，直接把初始化的代码放在前面需要引入微信的 js 文件后面了，所以我直接引入这个文件就完成了初始化操作。不过，我还是需要在引入后监听初始化成功和失败的回调。\n\n我司代码：\n\n```html\n<script src=\"./js/shareInWeChat.js?debug=1\"></script>\n<!-- 里面包含了 wx.config({}) 的代码-->\n<!-- 通过 debug 参数来切换调试模式  -->\n```\n\n```js\nsetWeChatShareStyle(product, imgUrl)\nfunction setWeChatShareStyle(product, imgUrl) {\n  var success = function(res) {}\n  var fail = function(res) {}\n  var desc =\n    product.description && product.description !== ''\n      ? product.description\n      : '后备描述'\n  wx.ready(function() {\n    var eventConf = {\n      title: product.name,\n      desc: desc,\n      imgUrl: imgUrl,\n      link: window.location.href,\n      success: success\n    }\n    if (pubMethods.isAndroid()) {\n      // 安卓适用于老接口，新接口不行\n      wx.onMenuShareAppMessage(eventConf)\n      wx.onMenuShareTimeline(eventConf)\n      wx.onMenuShareQQ(eventConf)\n      wx.onMenuShareQZone(eventConf)\n    }\n    if (pubMethods.isIOS()) {\n      // iOS 适用于新接口，老接口不行\n      wx.updateAppMessageShareData(eventConf, success)\n      wx.updateTimelineShareData(eventConf, success)\n    }\n  })\n  wx.error(fail)\n}\n```\n\n最初我担心，这样可能会监听不到 `wx.config` 初始化的结果，结果发现还是可以监听到的，说明 `wx.config` 里面的操作是个异步操作。\n\n#### 代码兼容性\n\n- 统一传参\n\n如上面代码所示，虽然根据微信的文档，对于不同的接口，传的参数稍有区别，但是我为了方便，都放在 `eventConf` 里面了，事实证明也是可以的（不可以我就要吐槽了，毕竟传入的是对象）。\n\n- 接口更新的 bug\n\n虽然微信文档上有接口更新的说明：\n\n_请注意，原有的 wx.onMenuShareTimeline、wx.onMenuShareAppMessage、wx.onMenuShareQQ、wx.onMenuShareQZone 接口，即将废弃。请尽快迁移使用客户端 6.7.2 及 JSSDK 1.4.0 以上版本支持的 wx.updateAppMessageShareData、updateTimelineShareData 接口。_\n\n但我实际上测试的结果是，安卓不支持新接口，iOS 支持，但是我如果把新老接口全用上，有一端会失败，所以最终才有上面那个机型判断的结果，对于不同的机型采用了不同的接口。\n\n```js\nif (pubMethods.isAndroid()) {\n  // 安卓适用于老接口，新接口不行\n  wx.onMenuShareAppMessage(eventConf)\n  wx.onMenuShareTimeline(eventConf)\n  wx.onMenuShareQQ(eventConf)\n  wx.onMenuShareQZone(eventConf)\n}\nif (pubMethods.isIOS()) {\n  // iOS 适用于新接口，老接口不行\n  wx.updateAppMessageShareData(eventConf, success)\n  wx.updateTimelineShareData(eventConf, success)\n}\n```\n\n- 分享的图片不能是 base64\n\n由于我司需要对图片进行处理再去分享，所以当我用 `canvas` 导出 `base64` 作为 `imgUrl` 的时候，我发现是没有效果的。\n\n## Ending\n\n## Reference\n\n- [微信分享自定义样式](https://segmentfault.com/a/1190000013491531)\n\n- [微信分享图标设置，以及 wx.config 配置](https://www.cnblogs.com/lxlin/p/6829893.html#undefined)\n\n[微信js-sdk说明文档]: https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115\n","slug":"set-custom-style-of-share-in-wechat","published":1,"updated":"2018-10-03T13:10:56.172Z","layout":"post","photos":[],"link":"","_id":"cjv0yvipt001zborpfjtvk9l0","content":"<h2>Preface</h2>\n<p>产品希望我们在微信分享出去的链接，有自己的样式，而不是仅仅一个链接。用产品的话来说，你发给客户一个链接，客户敢点么？？？</p>\n<p>听着比较有意思，不过也不能说完全没有道理，毕竟各种各样的诈骗大家也是有所耳闻，经确认，产品想要：</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181002175453.png\" alt=\"截图20181002175453.png\"></p>\n<p>而我们当前分享是：</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181002175558.png\" alt=\"截图20181002175558.png\"></p>\n<h2>Main</h2>\n<p>总监给我提示说，微信有 js-sdk ，可以在 js 里设置这个样式。</p>\n<p>于是，我找到了<a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115\" target=\"_blank\" rel=\"noopener\">微信 JS-SDK 说明文档</a>，基本上就是根据文档走些配置，这个要和产品那边要些账号密码，改些东西之类，根据文档来，没什么好说的。</p>\n<p>大体流程如下：</p>\n<ol>\n<li>步骤一：绑定域名</li>\n<li>步骤二：引入 JS 文件</li>\n<li>步骤三：通过 config 接口注入权限验证配置</li>\n</ol>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;&#125;) <span class=\"comment\">//传入一些初始化参数</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"4\">\n<li>步骤四：通过 ready 接口处理成功验证</li>\n</ol>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;) <span class=\"comment\">//传入成功回调</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li>步骤五：通过 error 接口处理失败验证</li>\n</ol>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;) <span class=\"comment\">//传入失败回调</span></span><br></pre></td></tr></table></figure></p>\n<p>实际操作的时候，遇到了几点麻烦，这里需要提一下：</p>\n<h4>测试的时候，注意开启 debug 模式，方便定位问题。</h4>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.config(&#123; <span class=\"attr\">debug</span>: <span class=\"literal\">true</span> <span class=\"comment\">/*其他参数*/</span> &#125;)</span><br></pre></td></tr></table></figure></p>\n<h4>出于安全考虑，开发者必须在服务器端实现签名的逻辑。</h4>\n<p>这个是文档说的，反正就是给后台处理了，最终前端初始化需要的几个字段，除了 <code>debug</code> 和 <code>jsApiList</code> ，都是从后台拿的。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class=\"line\">    appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">    timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">    nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">    signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名</span></span><br><span class=\"line\">    jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>后台在实现的时候，可能需要注意文档提示的两点：</p>\n<ol>\n<li>\n<p>access_token（有效期 7200 秒，开发者必须在自己的服务全局缓存 access_token）</p>\n</li>\n<li>\n<p>jsapi_ticket（有效期 7200 秒，开发者必须在自己的服务全局缓存 jsapi_ticket）</p>\n</li>\n</ol>\n<p>因为这会导致一开始生成的签名没错，但是两个小时后就失效了。</p>\n<h4>代码逻辑</h4>\n<p>通常的逻辑都是前端从后台拿到上面的几个字段，在前端完成初始化，然后添加初始化成功和失败的回调。</p>\n<p>示例：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> link = location.href</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'your_url'</span>, <span class=\"comment\">//后台给你提供的接口</span></span><br><span class=\"line\">  type: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">  data: &#123; <span class=\"attr\">url</span>: link &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">async</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  dataType: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    wx.config(&#123;</span><br><span class=\"line\">      debug: <span class=\"literal\">false</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来</span></span><br><span class=\"line\">      appId: data.configMap.appId, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">      timestamp: data.configMap.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">      nonceStr: data.configMap.nonceStr, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">      signature: data.configMap.signature, <span class=\"comment\">// 必填，签名，见附录1</span></span><br><span class=\"line\">      jsApiList: [<span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      wx.onMenuShareAppMessage(&#123;</span><br><span class=\"line\">        title: <span class=\"built_in\">document</span>.title,</span><br><span class=\"line\">        desc: <span class=\"built_in\">document</span>.title,</span><br><span class=\"line\">        link: link,</span><br><span class=\"line\">        imgUrl: Imgurl,</span><br><span class=\"line\">        trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;,</span><br><span class=\"line\">        cancel: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;,</span><br><span class=\"line\">        fail: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      wx.onMenuShareTimeline(&#123;</span><br><span class=\"line\">        title: <span class=\"built_in\">document</span>.title,</span><br><span class=\"line\">        link: link,</span><br><span class=\"line\">        imgUrl: Imgurl,</span><br><span class=\"line\">        trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;,</span><br><span class=\"line\">        cancel: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;,</span><br><span class=\"line\">        fail: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    wx.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      alert(res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    alert(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>我司稍微特殊些，直接把初始化的代码放在前面需要引入微信的 js 文件后面了，所以我直接引入这个文件就完成了初始化操作。不过，我还是需要在引入后监听初始化成功和失败的回调。</p>\n<p>我司代码：</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./js/shareInWeChat.js?debug=1\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 里面包含了 wx.config(&#123;&#125;) 的代码--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 通过 debug 参数来切换调试模式  --&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">setWeChatShareStyle(product, imgUrl)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setWeChatShareStyle</span>(<span class=\"params\">product, imgUrl</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> success = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fail = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> desc =</span><br><span class=\"line\">    product.description &amp;&amp; product.description !== <span class=\"string\">''</span></span><br><span class=\"line\">      ? product.description</span><br><span class=\"line\">      : <span class=\"string\">'后备描述'</span></span><br><span class=\"line\">  wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> eventConf = &#123;</span><br><span class=\"line\">      title: product.name,</span><br><span class=\"line\">      desc: desc,</span><br><span class=\"line\">      imgUrl: imgUrl,</span><br><span class=\"line\">      link: <span class=\"built_in\">window</span>.location.href,</span><br><span class=\"line\">      success: success</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pubMethods.isAndroid()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 安卓适用于老接口，新接口不行</span></span><br><span class=\"line\">      wx.onMenuShareAppMessage(eventConf)</span><br><span class=\"line\">      wx.onMenuShareTimeline(eventConf)</span><br><span class=\"line\">      wx.onMenuShareQQ(eventConf)</span><br><span class=\"line\">      wx.onMenuShareQZone(eventConf)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pubMethods.isIOS()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// iOS 适用于新接口，老接口不行</span></span><br><span class=\"line\">      wx.updateAppMessageShareData(eventConf, success)</span><br><span class=\"line\">      wx.updateTimelineShareData(eventConf, success)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  wx.error(fail)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最初我担心，这样可能会监听不到 <code>wx.config</code> 初始化的结果，结果发现还是可以监听到的，说明 <code>wx.config</code> 里面的操作是个异步操作。</p>\n<h4>代码兼容性</h4>\n<ul>\n<li>统一传参</li>\n</ul>\n<p>如上面代码所示，虽然根据微信的文档，对于不同的接口，传的参数稍有区别，但是我为了方便，都放在 <code>eventConf</code> 里面了，事实证明也是可以的（不可以我就要吐槽了，毕竟传入的是对象）。</p>\n<ul>\n<li>接口更新的 bug</li>\n</ul>\n<p>虽然微信文档上有接口更新的说明：</p>\n<p><em>请注意，原有的 wx.onMenuShareTimeline、wx.onMenuShareAppMessage、wx.onMenuShareQQ、wx.onMenuShareQZone 接口，即将废弃。请尽快迁移使用客户端 6.7.2 及 JSSDK 1.4.0 以上版本支持的 wx.updateAppMessageShareData、updateTimelineShareData 接口。</em></p>\n<p>但我实际上测试的结果是，安卓不支持新接口，iOS 支持，但是我如果把新老接口全用上，有一端会失败，所以最终才有上面那个机型判断的结果，对于不同的机型采用了不同的接口。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (pubMethods.isAndroid()) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 安卓适用于老接口，新接口不行</span></span><br><span class=\"line\">  wx.onMenuShareAppMessage(eventConf)</span><br><span class=\"line\">  wx.onMenuShareTimeline(eventConf)</span><br><span class=\"line\">  wx.onMenuShareQQ(eventConf)</span><br><span class=\"line\">  wx.onMenuShareQZone(eventConf)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (pubMethods.isIOS()) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// iOS 适用于新接口，老接口不行</span></span><br><span class=\"line\">  wx.updateAppMessageShareData(eventConf, success)</span><br><span class=\"line\">  wx.updateTimelineShareData(eventConf, success)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>分享的图片不能是 base64</li>\n</ul>\n<p>由于我司需要对图片进行处理再去分享，所以当我用 <code>canvas</code> 导出 <code>base64</code> 作为 <code>imgUrl</code> 的时候，我发现是没有效果的。</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li>\n<p><a href=\"https://segmentfault.com/a/1190000013491531\" target=\"_blank\" rel=\"noopener\">微信分享自定义样式</a></p>\n</li>\n<li>\n<p><a href=\"https://www.cnblogs.com/lxlin/p/6829893.html#undefined\" target=\"_blank\" rel=\"noopener\">微信分享图标设置，以及 wx.config 配置</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>产品希望我们在微信分享出去的链接，有自己的样式，而不是仅仅一个链接。用产品的话来说，你发给客户一个链接，客户敢点么？？？</p>\n<p>听着比较有意思，不过也不能说完全没有道理，毕竟各种各样的诈骗大家也是有所耳闻，经确认，产品想要：</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181002175453.png\" alt=\"截图20181002175453.png\"></p>\n<p>而我们当前分享是：</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181002175558.png\" alt=\"截图20181002175558.png\"></p>\n<h2>Main</h2>\n<p>总监给我提示说，微信有 js-sdk ，可以在 js 里设置这个样式。</p>\n<p>于是，我找到了<a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115\" target=\"_blank\" rel=\"noopener\">微信 JS-SDK 说明文档</a>，基本上就是根据文档走些配置，这个要和产品那边要些账号密码，改些东西之类，根据文档来，没什么好说的。</p>\n<p>大体流程如下：</p>\n<ol>\n<li>步骤一：绑定域名</li>\n<li>步骤二：引入 JS 文件</li>\n<li>步骤三：通过 config 接口注入权限验证配置</li>\n</ol>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;&#125;) <span class=\"comment\">//传入一些初始化参数</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"4\">\n<li>步骤四：通过 ready 接口处理成功验证</li>\n</ol>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;) <span class=\"comment\">//传入成功回调</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li>步骤五：通过 error 接口处理失败验证</li>\n</ol>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;) <span class=\"comment\">//传入失败回调</span></span><br></pre></td></tr></table></figure></p>\n<p>实际操作的时候，遇到了几点麻烦，这里需要提一下：</p>\n<h4>测试的时候，注意开启 debug 模式，方便定位问题。</h4>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.config(&#123; <span class=\"attr\">debug</span>: <span class=\"literal\">true</span> <span class=\"comment\">/*其他参数*/</span> &#125;)</span><br></pre></td></tr></table></figure></p>\n<h4>出于安全考虑，开发者必须在服务器端实现签名的逻辑。</h4>\n<p>这个是文档说的，反正就是给后台处理了，最终前端初始化需要的几个字段，除了 <code>debug</code> 和 <code>jsApiList</code> ，都是从后台拿的。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class=\"line\">    appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">    timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">    nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">    signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名</span></span><br><span class=\"line\">    jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>后台在实现的时候，可能需要注意文档提示的两点：</p>\n<ol>\n<li>\n<p>access_token（有效期 7200 秒，开发者必须在自己的服务全局缓存 access_token）</p>\n</li>\n<li>\n<p>jsapi_ticket（有效期 7200 秒，开发者必须在自己的服务全局缓存 jsapi_ticket）</p>\n</li>\n</ol>\n<p>因为这会导致一开始生成的签名没错，但是两个小时后就失效了。</p>\n<h4>代码逻辑</h4>\n<p>通常的逻辑都是前端从后台拿到上面的几个字段，在前端完成初始化，然后添加初始化成功和失败的回调。</p>\n<p>示例：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> link = location.href</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'your_url'</span>, <span class=\"comment\">//后台给你提供的接口</span></span><br><span class=\"line\">  type: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">  data: &#123; <span class=\"attr\">url</span>: link &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">async</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  dataType: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    wx.config(&#123;</span><br><span class=\"line\">      debug: <span class=\"literal\">false</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来</span></span><br><span class=\"line\">      appId: data.configMap.appId, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">      timestamp: data.configMap.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">      nonceStr: data.configMap.nonceStr, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">      signature: data.configMap.signature, <span class=\"comment\">// 必填，签名，见附录1</span></span><br><span class=\"line\">      jsApiList: [<span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      wx.onMenuShareAppMessage(&#123;</span><br><span class=\"line\">        title: <span class=\"built_in\">document</span>.title,</span><br><span class=\"line\">        desc: <span class=\"built_in\">document</span>.title,</span><br><span class=\"line\">        link: link,</span><br><span class=\"line\">        imgUrl: Imgurl,</span><br><span class=\"line\">        trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;,</span><br><span class=\"line\">        cancel: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;,</span><br><span class=\"line\">        fail: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      wx.onMenuShareTimeline(&#123;</span><br><span class=\"line\">        title: <span class=\"built_in\">document</span>.title,</span><br><span class=\"line\">        link: link,</span><br><span class=\"line\">        imgUrl: Imgurl,</span><br><span class=\"line\">        trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;,</span><br><span class=\"line\">        cancel: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;,</span><br><span class=\"line\">        fail: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    wx.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      alert(res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    alert(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>我司稍微特殊些，直接把初始化的代码放在前面需要引入微信的 js 文件后面了，所以我直接引入这个文件就完成了初始化操作。不过，我还是需要在引入后监听初始化成功和失败的回调。</p>\n<p>我司代码：</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./js/shareInWeChat.js?debug=1\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 里面包含了 wx.config(&#123;&#125;) 的代码--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 通过 debug 参数来切换调试模式  --&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">setWeChatShareStyle(product, imgUrl)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setWeChatShareStyle</span>(<span class=\"params\">product, imgUrl</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> success = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fail = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> desc =</span><br><span class=\"line\">    product.description &amp;&amp; product.description !== <span class=\"string\">''</span></span><br><span class=\"line\">      ? product.description</span><br><span class=\"line\">      : <span class=\"string\">'后备描述'</span></span><br><span class=\"line\">  wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> eventConf = &#123;</span><br><span class=\"line\">      title: product.name,</span><br><span class=\"line\">      desc: desc,</span><br><span class=\"line\">      imgUrl: imgUrl,</span><br><span class=\"line\">      link: <span class=\"built_in\">window</span>.location.href,</span><br><span class=\"line\">      success: success</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pubMethods.isAndroid()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 安卓适用于老接口，新接口不行</span></span><br><span class=\"line\">      wx.onMenuShareAppMessage(eventConf)</span><br><span class=\"line\">      wx.onMenuShareTimeline(eventConf)</span><br><span class=\"line\">      wx.onMenuShareQQ(eventConf)</span><br><span class=\"line\">      wx.onMenuShareQZone(eventConf)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pubMethods.isIOS()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// iOS 适用于新接口，老接口不行</span></span><br><span class=\"line\">      wx.updateAppMessageShareData(eventConf, success)</span><br><span class=\"line\">      wx.updateTimelineShareData(eventConf, success)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  wx.error(fail)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最初我担心，这样可能会监听不到 <code>wx.config</code> 初始化的结果，结果发现还是可以监听到的，说明 <code>wx.config</code> 里面的操作是个异步操作。</p>\n<h4>代码兼容性</h4>\n<ul>\n<li>统一传参</li>\n</ul>\n<p>如上面代码所示，虽然根据微信的文档，对于不同的接口，传的参数稍有区别，但是我为了方便，都放在 <code>eventConf</code> 里面了，事实证明也是可以的（不可以我就要吐槽了，毕竟传入的是对象）。</p>\n<ul>\n<li>接口更新的 bug</li>\n</ul>\n<p>虽然微信文档上有接口更新的说明：</p>\n<p><em>请注意，原有的 wx.onMenuShareTimeline、wx.onMenuShareAppMessage、wx.onMenuShareQQ、wx.onMenuShareQZone 接口，即将废弃。请尽快迁移使用客户端 6.7.2 及 JSSDK 1.4.0 以上版本支持的 wx.updateAppMessageShareData、updateTimelineShareData 接口。</em></p>\n<p>但我实际上测试的结果是，安卓不支持新接口，iOS 支持，但是我如果把新老接口全用上，有一端会失败，所以最终才有上面那个机型判断的结果，对于不同的机型采用了不同的接口。</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (pubMethods.isAndroid()) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 安卓适用于老接口，新接口不行</span></span><br><span class=\"line\">  wx.onMenuShareAppMessage(eventConf)</span><br><span class=\"line\">  wx.onMenuShareTimeline(eventConf)</span><br><span class=\"line\">  wx.onMenuShareQQ(eventConf)</span><br><span class=\"line\">  wx.onMenuShareQZone(eventConf)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (pubMethods.isIOS()) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// iOS 适用于新接口，老接口不行</span></span><br><span class=\"line\">  wx.updateAppMessageShareData(eventConf, success)</span><br><span class=\"line\">  wx.updateTimelineShareData(eventConf, success)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>分享的图片不能是 base64</li>\n</ul>\n<p>由于我司需要对图片进行处理再去分享，所以当我用 <code>canvas</code> 导出 <code>base64</code> 作为 <code>imgUrl</code> 的时候，我发现是没有效果的。</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li>\n<p><a href=\"https://segmentfault.com/a/1190000013491531\" target=\"_blank\" rel=\"noopener\">微信分享自定义样式</a></p>\n</li>\n<li>\n<p><a href=\"https://www.cnblogs.com/lxlin/p/6829893.html#undefined\" target=\"_blank\" rel=\"noopener\">微信分享图标设置，以及 wx.config 配置</a></p>\n</li>\n</ul>\n"},{"title":"Serval Ways to Force Update in Vue","comments":1,"date":"2018-12-01T06:13:45.000Z","_content":"\nI have to mention this before we go on. As the [doc-Forcing-an-Update](https://vuejs.org/v2/guide/components-edge-cases.html#Forcing-an-Update) says:\n\n> If you find yourself needing to force an update in Vue, in **99.99%** of cases, you’ve made a mistake somewhere.\n\nWhen I come back to write a blog, I find it's totally true. Well, let's begin. Here is the demo code based on _element-ui@2.4.11_ and _vue@2.5.17_:\n\n```html\n<div id=\"app\">\n  <p v-for=\"item in items\" :key=\"item.id\">{{ item.label }}</p>\n  <hr />\n  <el-tree\n    :data=\"items\"\n    show-checkbox\n    node-key=\"id\"\n    :default-expanded-keys=\"[2, 3]\"\n    v-if=\"isElTreeShow\"\n    :key=\"elTreeVersion\"\n  >\n  </el-tree>\n</div>\n<script>\n  window.app = new Vue({\n    el: '#app',\n    data: {\n      isElTreeShow: true,\n      elTreeVersion: 100,\n      items: [\n        {\n          id: 1,\n          label: 'Level one 1'\n        },\n        {\n          id: 2,\n          label: 'Level one 2',\n          children: [\n            {\n              id: 21,\n              label: 'Level two 2-1'\n            }\n          ]\n        },\n        {\n          id: 3,\n          label: 'Level one 3'\n        }\n      ],\n      compare(a, b) {\n        return a.id - b.id\n      },\n      compareReverse(a, b) {\n        return -this.compare(a, b)\n      }\n    }\n  })\n</script>\n```\n\n## Auto Update with Vue's Reactivity System\n\nGo check the doc.\n\n## \\$forceUpdate\n\nFor example, if someone made a mistake and wrote the code like\n\n```js\nlet length = app.items.length\napp.items[length] = { id: length + 1, label: `Level one ${length + 1}` }\n```\n\nYou will not see the data update because you just add an nonreactive attribute. In this case, you might need `app.$forceUpdate()`. However, better idea is using code like:\n\n```js\nlet length = app.items.length\napp.items.push({ id: length + 1, label: `Level one ${length + 1}` })\n```\n\nor\n\n```js\nlet length = app.items.length\nthis.$set(app.items, length, {\n  id: length + 1,\n  label: `Level one ${length + 1}`\n})\n```\n\n## Reassign\n\nHowever, it's common to use third party components. In this case, it may not be easy to modify the component if we find something not good. For example, if we sort the data using:\n\n```js\napp.items.reverse()\n```\n\nHere is the result:\n\n![](../images/1543654707987.gif)\n\nThe part above the `hr` works as expected while the `el-tree` doesn't change even you use `$forceUpdate`. So, in this case, what can we do?\n\nWe can make it update by reassigning like:\n\n```js\napp.items = app.items.slice()\n```\n\nUntil now, every thing about force update has been solved. I haven't met problems which can't be solved by ways above. However, there is some way stronger I have to mention.\n\n## v-if/key\n\nIn some cases, we do need to destroy and rebuild the component. But I didn't find any API about `rebuild` except [this issue](https://github.com/vuejs/Discussion/issues/356). Some guys said we can rebuild using `v-if=\"isElTreeShow\"`:\n\n```js\napp.isElTreeShow = !app.isElTreeShow\napp.$nextTick(() => {\n  app.isElTreeShow = !app.isElTreeShow\n})\n```\n\nor a better idea use `:key=\"elTreeVersion\"`\n\n```js\napp.elTreeVersion++\n```\n\nSee? That's pretty cool.\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/47)\n","source":"_posts/serval-ways-to-re-render-in-vue.md","raw":"---\ntitle: Serval Ways to Force Update in Vue\ncategories: frame\ntags:\n  - vue\n\ncomments: true\ndate: 2018-12-01 14:13:45\n---\n\nI have to mention this before we go on. As the [doc-Forcing-an-Update](https://vuejs.org/v2/guide/components-edge-cases.html#Forcing-an-Update) says:\n\n> If you find yourself needing to force an update in Vue, in **99.99%** of cases, you’ve made a mistake somewhere.\n\nWhen I come back to write a blog, I find it's totally true. Well, let's begin. Here is the demo code based on _element-ui@2.4.11_ and _vue@2.5.17_:\n\n```html\n<div id=\"app\">\n  <p v-for=\"item in items\" :key=\"item.id\">{{ item.label }}</p>\n  <hr />\n  <el-tree\n    :data=\"items\"\n    show-checkbox\n    node-key=\"id\"\n    :default-expanded-keys=\"[2, 3]\"\n    v-if=\"isElTreeShow\"\n    :key=\"elTreeVersion\"\n  >\n  </el-tree>\n</div>\n<script>\n  window.app = new Vue({\n    el: '#app',\n    data: {\n      isElTreeShow: true,\n      elTreeVersion: 100,\n      items: [\n        {\n          id: 1,\n          label: 'Level one 1'\n        },\n        {\n          id: 2,\n          label: 'Level one 2',\n          children: [\n            {\n              id: 21,\n              label: 'Level two 2-1'\n            }\n          ]\n        },\n        {\n          id: 3,\n          label: 'Level one 3'\n        }\n      ],\n      compare(a, b) {\n        return a.id - b.id\n      },\n      compareReverse(a, b) {\n        return -this.compare(a, b)\n      }\n    }\n  })\n</script>\n```\n\n## Auto Update with Vue's Reactivity System\n\nGo check the doc.\n\n## \\$forceUpdate\n\nFor example, if someone made a mistake and wrote the code like\n\n```js\nlet length = app.items.length\napp.items[length] = { id: length + 1, label: `Level one ${length + 1}` }\n```\n\nYou will not see the data update because you just add an nonreactive attribute. In this case, you might need `app.$forceUpdate()`. However, better idea is using code like:\n\n```js\nlet length = app.items.length\napp.items.push({ id: length + 1, label: `Level one ${length + 1}` })\n```\n\nor\n\n```js\nlet length = app.items.length\nthis.$set(app.items, length, {\n  id: length + 1,\n  label: `Level one ${length + 1}`\n})\n```\n\n## Reassign\n\nHowever, it's common to use third party components. In this case, it may not be easy to modify the component if we find something not good. For example, if we sort the data using:\n\n```js\napp.items.reverse()\n```\n\nHere is the result:\n\n![](../images/1543654707987.gif)\n\nThe part above the `hr` works as expected while the `el-tree` doesn't change even you use `$forceUpdate`. So, in this case, what can we do?\n\nWe can make it update by reassigning like:\n\n```js\napp.items = app.items.slice()\n```\n\nUntil now, every thing about force update has been solved. I haven't met problems which can't be solved by ways above. However, there is some way stronger I have to mention.\n\n## v-if/key\n\nIn some cases, we do need to destroy and rebuild the component. But I didn't find any API about `rebuild` except [this issue](https://github.com/vuejs/Discussion/issues/356). Some guys said we can rebuild using `v-if=\"isElTreeShow\"`:\n\n```js\napp.isElTreeShow = !app.isElTreeShow\napp.$nextTick(() => {\n  app.isElTreeShow = !app.isElTreeShow\n})\n```\n\nor a better idea use `:key=\"elTreeVersion\"`\n\n```js\napp.elTreeVersion++\n```\n\nSee? That's pretty cool.\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/47)\n","slug":"serval-ways-to-re-render-in-vue","published":1,"updated":"2018-12-01T09:03:58.180Z","layout":"post","photos":[],"link":"","_id":"cjv0yviq70022borpiv9kzksv","content":"<p>I have to mention this before we go on. As the <a href=\"https://vuejs.org/v2/guide/components-edge-cases.html#Forcing-an-Update\" target=\"_blank\" rel=\"noopener\">doc-Forcing-an-Update</a> says:</p>\n<blockquote>\n<p>If you find yourself needing to force an update in Vue, in <strong>99.99%</strong> of cases, you’ve made a mistake somewhere.</p>\n</blockquote>\n<p>When I come back to write a blog, I find it's totally true. Well, let's begin. Here is the demo code based on <em>element-ui@2.4.11</em> and <em>vue@2.5.17</em>:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span>&#123;&#123; item.label &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-tree</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:data</span>=<span class=\"string\">\"items\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">show-checkbox</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">node-key</span>=<span class=\"string\">\"id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:default-expanded-keys</span>=<span class=\"string\">\"[2, 3]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">\"isElTreeShow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"elTreeVersion\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">el-tree</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      isElTreeShow: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      elTreeVersion: 100,</span></span><br><span class=\"line\"><span class=\"undefined\">      items: [</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          id: 1,</span></span><br><span class=\"line\"><span class=\"javascript\">          label: <span class=\"string\">'Level one 1'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          id: 2,</span></span><br><span class=\"line\"><span class=\"javascript\">          label: <span class=\"string\">'Level one 2'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">          children: [</span></span><br><span class=\"line\"><span class=\"undefined\">            &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">              id: 21,</span></span><br><span class=\"line\"><span class=\"javascript\">              label: <span class=\"string\">'Level two 2-1'</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">          ]</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          id: 3,</span></span><br><span class=\"line\"><span class=\"javascript\">          label: <span class=\"string\">'Level one 3'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      ],</span></span><br><span class=\"line\"><span class=\"undefined\">      compare(a, b) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> a.id - b.id</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      compareReverse(a, b) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> -<span class=\"keyword\">this</span>.compare(a, b)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2>Auto Update with Vue's Reactivity System</h2>\n<p>Go check the doc.</p>\n<h2>$forceUpdate</h2>\n<p>For example, if someone made a mistake and wrote the code like</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> length = app.items.length</span><br><span class=\"line\">app.items[length] = &#123; <span class=\"attr\">id</span>: length + <span class=\"number\">1</span>, <span class=\"attr\">label</span>: <span class=\"string\">`Level one <span class=\"subst\">$&#123;length + <span class=\"number\">1</span>&#125;</span>`</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>You will not see the data update because you just add an nonreactive attribute. In this case, you might need <code>app.$forceUpdate()</code>. However, better idea is using code like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> length = app.items.length</span><br><span class=\"line\">app.items.push(&#123; <span class=\"attr\">id</span>: length + <span class=\"number\">1</span>, <span class=\"attr\">label</span>: <span class=\"string\">`Level one <span class=\"subst\">$&#123;length + <span class=\"number\">1</span>&#125;</span>`</span> &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>or</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> length = app.items.length</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$set(app.items, length, &#123;</span><br><span class=\"line\">  id: length + <span class=\"number\">1</span>,</span><br><span class=\"line\">  label: <span class=\"string\">`Level one <span class=\"subst\">$&#123;length + <span class=\"number\">1</span>&#125;</span>`</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2>Reassign</h2>\n<p>However, it's common to use third party components. In this case, it may not be easy to modify the component if we find something not good. For example, if we sort the data using:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.items.reverse()</span><br></pre></td></tr></table></figure></p>\n<p>Here is the result:</p>\n<p><img src=\"../images/1543654707987.gif\" alt=\"\"></p>\n<p>The part above the <code>hr</code> works as expected while the <code>el-tree</code> doesn't change even you use <code>$forceUpdate</code>. So, in this case, what can we do?</p>\n<p>We can make it update by reassigning like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.items = app.items.slice()</span><br></pre></td></tr></table></figure></p>\n<p>Until now, every thing about force update has been solved. I haven't met problems which can't be solved by ways above. However, there is some way stronger I have to mention.</p>\n<h2>v-if/key</h2>\n<p>In some cases, we do need to destroy and rebuild the component. But I didn't find any API about <code>rebuild</code> except <a href=\"https://github.com/vuejs/Discussion/issues/356\">this issue</a>. Some guys said we can rebuild using <code>v-if=&quot;isElTreeShow&quot;</code>:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.isElTreeShow = !app.isElTreeShow</span><br><span class=\"line\">app.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  app.isElTreeShow = !app.isElTreeShow</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>or a better idea use <code>:key=&quot;elTreeVersion&quot;</code></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.elTreeVersion++</span><br></pre></td></tr></table></figure></p>\n<p>See? That's pretty cool.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/47\"><strong>Original Post</strong></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>I have to mention this before we go on. As the <a href=\"https://vuejs.org/v2/guide/components-edge-cases.html#Forcing-an-Update\" target=\"_blank\" rel=\"noopener\">doc-Forcing-an-Update</a> says:</p>\n<blockquote>\n<p>If you find yourself needing to force an update in Vue, in <strong>99.99%</strong> of cases, you’ve made a mistake somewhere.</p>\n</blockquote>\n<p>When I come back to write a blog, I find it's totally true. Well, let's begin. Here is the demo code based on <em>element-ui@2.4.11</em> and <em>vue@2.5.17</em>:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span>&#123;&#123; item.label &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-tree</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:data</span>=<span class=\"string\">\"items\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">show-checkbox</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">node-key</span>=<span class=\"string\">\"id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:default-expanded-keys</span>=<span class=\"string\">\"[2, 3]\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-if</span>=<span class=\"string\">\"isElTreeShow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">\"elTreeVersion\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">el-tree</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      isElTreeShow: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      elTreeVersion: 100,</span></span><br><span class=\"line\"><span class=\"undefined\">      items: [</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          id: 1,</span></span><br><span class=\"line\"><span class=\"javascript\">          label: <span class=\"string\">'Level one 1'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          id: 2,</span></span><br><span class=\"line\"><span class=\"javascript\">          label: <span class=\"string\">'Level one 2'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">          children: [</span></span><br><span class=\"line\"><span class=\"undefined\">            &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">              id: 21,</span></span><br><span class=\"line\"><span class=\"javascript\">              label: <span class=\"string\">'Level two 2-1'</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">          ]</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          id: 3,</span></span><br><span class=\"line\"><span class=\"javascript\">          label: <span class=\"string\">'Level one 3'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      ],</span></span><br><span class=\"line\"><span class=\"undefined\">      compare(a, b) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> a.id - b.id</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      compareReverse(a, b) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> -<span class=\"keyword\">this</span>.compare(a, b)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2>Auto Update with Vue's Reactivity System</h2>\n<p>Go check the doc.</p>\n<h2>$forceUpdate</h2>\n<p>For example, if someone made a mistake and wrote the code like</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> length = app.items.length</span><br><span class=\"line\">app.items[length] = &#123; <span class=\"attr\">id</span>: length + <span class=\"number\">1</span>, <span class=\"attr\">label</span>: <span class=\"string\">`Level one <span class=\"subst\">$&#123;length + <span class=\"number\">1</span>&#125;</span>`</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>You will not see the data update because you just add an nonreactive attribute. In this case, you might need <code>app.$forceUpdate()</code>. However, better idea is using code like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> length = app.items.length</span><br><span class=\"line\">app.items.push(&#123; <span class=\"attr\">id</span>: length + <span class=\"number\">1</span>, <span class=\"attr\">label</span>: <span class=\"string\">`Level one <span class=\"subst\">$&#123;length + <span class=\"number\">1</span>&#125;</span>`</span> &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>or</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> length = app.items.length</span><br><span class=\"line\"><span class=\"keyword\">this</span>.$set(app.items, length, &#123;</span><br><span class=\"line\">  id: length + <span class=\"number\">1</span>,</span><br><span class=\"line\">  label: <span class=\"string\">`Level one <span class=\"subst\">$&#123;length + <span class=\"number\">1</span>&#125;</span>`</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2>Reassign</h2>\n<p>However, it's common to use third party components. In this case, it may not be easy to modify the component if we find something not good. For example, if we sort the data using:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.items.reverse()</span><br></pre></td></tr></table></figure></p>\n<p>Here is the result:</p>\n<p><img src=\"../images/1543654707987.gif\" alt=\"\"></p>\n<p>The part above the <code>hr</code> works as expected while the <code>el-tree</code> doesn't change even you use <code>$forceUpdate</code>. So, in this case, what can we do?</p>\n<p>We can make it update by reassigning like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.items = app.items.slice()</span><br></pre></td></tr></table></figure></p>\n<p>Until now, every thing about force update has been solved. I haven't met problems which can't be solved by ways above. However, there is some way stronger I have to mention.</p>\n<h2>v-if/key</h2>\n<p>In some cases, we do need to destroy and rebuild the component. But I didn't find any API about <code>rebuild</code> except <a href=\"https://github.com/vuejs/Discussion/issues/356\">this issue</a>. Some guys said we can rebuild using <code>v-if=&quot;isElTreeShow&quot;</code>:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.isElTreeShow = !app.isElTreeShow</span><br><span class=\"line\">app.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  app.isElTreeShow = !app.isElTreeShow</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>or a better idea use <code>:key=&quot;elTreeVersion&quot;</code></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.elTreeVersion++</span><br></pre></td></tr></table></figure></p>\n<p>See? That's pretty cool.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/47\"><strong>Original Post</strong></a></p>\n"},{"title":"Skills on Mobile Development","comments":1,"date":"2018-07-01T02:18:27.000Z","_content":"\n## Main\n\n### Access localhost on Mobile\n\nAs you know, If I am working with url like `http://localhost:8080` It doesn't work on mobile. So, I have to try another way. After some research, I find something related:\n\n- `localhost` is a hostname which points to `127.0.0.1` by default and also can be changed.\n\nNormally, **we are using the same WIFI on our computer and mobile.** So, in my case,\n\n- I use command `ipconfig` and got the ip `192.168.x.x`.\n- I add `--host 192.168.x.x` in my _package.json_ scripts like this:\n\n```js\n{\n  \"name\": \"webpack-boilerplate\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"build\": \"npm run lint && webpack --config webpack.config.js -p\",\n    \"dev\": \"npm run lint && webpack-dev-server --config webpack.dev.config.js --inline --host 192.168.x.x\",\n    \"lint\": \"./node_modules/.bin/eslint js\"\n  },\n}\n```\n\n- If you aren't using _package.json_, you can directly replace `localhost` to `192.168.x.x` in the url.\n- Then I open the url `http://192.168.x.x:8080` on my computer and mobile. Both work!\n\n## Ending\n\n## Reference\n\n- [移动端前端开发调试](http://yujiangshui.com/multidevice-frontend-debug/)\n","source":"_posts/skills-on-mobile-development.md","raw":"---\ntitle: Skills on Mobile Development\ntags:\n  - mobile\n  - webpack\ncategories: debug\ncomments: true\ndate: 2018-07-01 10:18:27\n---\n\n## Main\n\n### Access localhost on Mobile\n\nAs you know, If I am working with url like `http://localhost:8080` It doesn't work on mobile. So, I have to try another way. After some research, I find something related:\n\n- `localhost` is a hostname which points to `127.0.0.1` by default and also can be changed.\n\nNormally, **we are using the same WIFI on our computer and mobile.** So, in my case,\n\n- I use command `ipconfig` and got the ip `192.168.x.x`.\n- I add `--host 192.168.x.x` in my _package.json_ scripts like this:\n\n```js\n{\n  \"name\": \"webpack-boilerplate\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"build\": \"npm run lint && webpack --config webpack.config.js -p\",\n    \"dev\": \"npm run lint && webpack-dev-server --config webpack.dev.config.js --inline --host 192.168.x.x\",\n    \"lint\": \"./node_modules/.bin/eslint js\"\n  },\n}\n```\n\n- If you aren't using _package.json_, you can directly replace `localhost` to `192.168.x.x` in the url.\n- Then I open the url `http://192.168.x.x:8080` on my computer and mobile. Both work!\n\n## Ending\n\n## Reference\n\n- [移动端前端开发调试](http://yujiangshui.com/multidevice-frontend-debug/)\n","slug":"skills-on-mobile-development","published":1,"updated":"2018-10-05T01:27:51.852Z","layout":"post","photos":[],"link":"","_id":"cjv0yviqu0026borp52e5i0nn","content":"<h2>Main</h2>\n<h3>Access localhost on Mobile</h3>\n<p>As you know, If I am working with url like <code>http://localhost:8080</code> It doesn't work on mobile. So, I have to try another way. After some research, I find something related:</p>\n<ul>\n<li><code>localhost</code> is a hostname which points to <code>127.0.0.1</code> by default and also can be changed.</li>\n</ul>\n<p>Normally, <strong>we are using the same WIFI on our computer and mobile.</strong> So, in my case,</p>\n<ul>\n<li>I use command <code>ipconfig</code> and got the ip <code>192.168.x.x</code>.</li>\n<li>I add <code>--host 192.168.x.x</code> in my <em>package.json</em> scripts like this:</li>\n</ul>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"webpack-boilerplate\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"app.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"npm run lint &amp;&amp; webpack --config webpack.config.js -p\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"npm run lint &amp;&amp; webpack-dev-server --config webpack.dev.config.js --inline --host 192.168.x.x\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"./node_modules/.bin/eslint js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>If you aren't using <em>package.json</em>, you can directly replace <code>localhost</code> to <code>192.168.x.x</code> in the url.</li>\n<li>Then I open the url <code>http://192.168.x.x:8080</code> on my computer and mobile. Both work!</li>\n</ul>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"http://yujiangshui.com/multidevice-frontend-debug/\" target=\"_blank\" rel=\"noopener\">移动端前端开发调试</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>Main</h2>\n<h3>Access localhost on Mobile</h3>\n<p>As you know, If I am working with url like <code>http://localhost:8080</code> It doesn't work on mobile. So, I have to try another way. After some research, I find something related:</p>\n<ul>\n<li><code>localhost</code> is a hostname which points to <code>127.0.0.1</code> by default and also can be changed.</li>\n</ul>\n<p>Normally, <strong>we are using the same WIFI on our computer and mobile.</strong> So, in my case,</p>\n<ul>\n<li>I use command <code>ipconfig</code> and got the ip <code>192.168.x.x</code>.</li>\n<li>I add <code>--host 192.168.x.x</code> in my <em>package.json</em> scripts like this:</li>\n</ul>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"webpack-boilerplate\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"app.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"npm run lint &amp;&amp; webpack --config webpack.config.js -p\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"npm run lint &amp;&amp; webpack-dev-server --config webpack.dev.config.js --inline --host 192.168.x.x\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"./node_modules/.bin/eslint js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>If you aren't using <em>package.json</em>, you can directly replace <code>localhost</code> to <code>192.168.x.x</code> in the url.</li>\n<li>Then I open the url <code>http://192.168.x.x:8080</code> on my computer and mobile. Both work!</li>\n</ul>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"http://yujiangshui.com/multidevice-frontend-debug/\" target=\"_blank\" rel=\"noopener\">移动端前端开发调试</a></li>\n</ul>\n"},{"title":"前端大文件分拆上传与上传池管理","comments":1,"date":"2018-08-05T12:43:03.000Z","_content":"\n## Preface\n\n后台管理项目有个上传组件，本来大家通过这个组件上传好好的，后来好像是腾讯云那边做了限制，这边上传 zip 包超过 50M 就会返回 413，所以总监让我对文件进行拆分，分块上传，然后他后台那边进行合并处理。\n\n## Main\n\n咋一看，好像蛮简单，就是拆分下文件，根据文件份数发 n 个请求就可以了，所以搜索了下，示例代码大概是这样：\n\n```html\n\n```\n\n```css\n```\n\n```js\n```\n\n## Ending\n\n## Reference\n","source":"_posts/split-file-and-upload-in-frontend.md","raw":"---\ntitle: 前端大文件分拆上传与上传池管理\ntags:\n  - Blob\n  - Chinese\ncategories: js\ncomments: true\ndate: 2018-08-05 20:43:03\n---\n\n## Preface\n\n后台管理项目有个上传组件，本来大家通过这个组件上传好好的，后来好像是腾讯云那边做了限制，这边上传 zip 包超过 50M 就会返回 413，所以总监让我对文件进行拆分，分块上传，然后他后台那边进行合并处理。\n\n## Main\n\n咋一看，好像蛮简单，就是拆分下文件，根据文件份数发 n 个请求就可以了，所以搜索了下，示例代码大概是这样：\n\n```html\n\n```\n\n```css\n```\n\n```js\n```\n\n## Ending\n\n## Reference\n","slug":"split-file-and-upload-in-frontend","published":1,"updated":"2018-08-18T11:18:08.341Z","layout":"post","photos":[],"link":"","_id":"cjv0yvirl002aborpdvy7rvbc","content":"<h2>Preface</h2>\n<p>后台管理项目有个上传组件，本来大家通过这个组件上传好好的，后来好像是腾讯云那边做了限制，这边上传 zip 包超过 50M 就会返回 413，所以总监让我对文件进行拆分，分块上传，然后他后台那边进行合并处理。</p>\n<h2>Main</h2>\n<p>咋一看，好像蛮简单，就是拆分下文件，根据文件份数发 n 个请求就可以了，所以搜索了下，示例代码大概是这样：</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">```<span class=\"selector-tag\">js</span></span><br></pre></td></tr></table></figure></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>后台管理项目有个上传组件，本来大家通过这个组件上传好好的，后来好像是腾讯云那边做了限制，这边上传 zip 包超过 50M 就会返回 413，所以总监让我对文件进行拆分，分块上传，然后他后台那边进行合并处理。</p>\n<h2>Main</h2>\n<p>咋一看，好像蛮简单，就是拆分下文件，根据文件份数发 n 个请求就可以了，所以搜索了下，示例代码大概是这样：</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">```<span class=\"selector-tag\">js</span></span><br></pre></td></tr></table></figure></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n"},{"title":"settings in vscode","comments":1,"date":"2018-09-23T02:09:06.000Z","_content":"\n## 配置\n\n1. vscode 支持特定语言的设置，比如，为不同的语言设置不同的配置：\n\n```js\n{\n  \"[html]\": {\n    \"editor.tabSize\": 4\n  },\n  \"[css]\": {\n    \"editor.tabSize\": 4\n  },\n  \"[javascript]\": {\n    \"editor.insertSpaces\": true,\n    \"editor.tabSize\": 2\n  },\n  \"[typescript]\": {\n    \"editor.tabSize\": 2\n  }\n}\n```\n\n2. 个别插件的配置比较特殊，需要配置后才能正常使用，譬如 csscomb, eslint, Easy LESS 等，注意查看文档。\n\n3. 我的配置文件，借助 Settings Sync VSCode 插件，不定期修改会同步到 https://gist.github.com/xianshenglu\n\n## 相关插件\n\n#### HTML：\n\nAuto Rename Tag 修改 HTML 标签时，自动修改匹配的标签\n\nOpen in Browser\n\nHTML CSS Class Completion: CSS class 提示\n\nHTMLHint: HTML 格式提示\n\n#### CSS：\n\nCan I Use: HTML5、CSS3、SVG 的浏览器兼容性检查\n\nColor Highlight: 颜色值在代码中高亮显示\n\nColor Picker: 拾色器\n\ncsscomb: css 排序，格式化，支持 .vue，**但对于嵌入式样式缩进有问题**\n\nHTML CSS Support: css 提示，支持 .vue\n\n#### JS\n\nESLint: ESLint 语法校验，自动格式化，修改等\n\nVersion Lens package.json: 文件显示模块当前版本和最新版本\n\nView Node Package: 快速打开选中模块的主页和代码仓库\n\nJavaScript (ES6) code snippets: ES6 语法代码段\n\nVersion Lens: 在 package.json 里显示包最新版本号\n\n#### HTML/CSS/JS\n\nEmmet: html,css,js 提示\n\n#### 框架\n\nvetur: 目前比较好的 Vue 语法高亮\n\nVueHelper: Vue2 代码段（包括 Vue2 api、vue-router2、vuex2）\n\nvue-peek: vue 文件内查找速览声明\n\nvue-format: vue 格式化插件\n\n#### 非语言类\n\nBracket Pair Colorizer: 不同层级括号上色\n\nCode Spelling Checker: 单词拼写检查\n\nOutput Colorizer: 彩色输出信息\n\nPartial Diff: 对比两段代码或文件\n\nPath Autocomplete: 路径补全\n\nPath Intellisense: 路径提示\n\nProject Manager: 快速切换项目\n\nSettings Sync VSCode: 设置同步到 Gist\n","source":"_posts/settings-in-vscode.md","raw":"---\ntitle: settings in vscode\ntags: --vscode\ncategories: software\ncomments: true\ndate: 2018-09-23 10:09:06\n---\n\n## 配置\n\n1. vscode 支持特定语言的设置，比如，为不同的语言设置不同的配置：\n\n```js\n{\n  \"[html]\": {\n    \"editor.tabSize\": 4\n  },\n  \"[css]\": {\n    \"editor.tabSize\": 4\n  },\n  \"[javascript]\": {\n    \"editor.insertSpaces\": true,\n    \"editor.tabSize\": 2\n  },\n  \"[typescript]\": {\n    \"editor.tabSize\": 2\n  }\n}\n```\n\n2. 个别插件的配置比较特殊，需要配置后才能正常使用，譬如 csscomb, eslint, Easy LESS 等，注意查看文档。\n\n3. 我的配置文件，借助 Settings Sync VSCode 插件，不定期修改会同步到 https://gist.github.com/xianshenglu\n\n## 相关插件\n\n#### HTML：\n\nAuto Rename Tag 修改 HTML 标签时，自动修改匹配的标签\n\nOpen in Browser\n\nHTML CSS Class Completion: CSS class 提示\n\nHTMLHint: HTML 格式提示\n\n#### CSS：\n\nCan I Use: HTML5、CSS3、SVG 的浏览器兼容性检查\n\nColor Highlight: 颜色值在代码中高亮显示\n\nColor Picker: 拾色器\n\ncsscomb: css 排序，格式化，支持 .vue，**但对于嵌入式样式缩进有问题**\n\nHTML CSS Support: css 提示，支持 .vue\n\n#### JS\n\nESLint: ESLint 语法校验，自动格式化，修改等\n\nVersion Lens package.json: 文件显示模块当前版本和最新版本\n\nView Node Package: 快速打开选中模块的主页和代码仓库\n\nJavaScript (ES6) code snippets: ES6 语法代码段\n\nVersion Lens: 在 package.json 里显示包最新版本号\n\n#### HTML/CSS/JS\n\nEmmet: html,css,js 提示\n\n#### 框架\n\nvetur: 目前比较好的 Vue 语法高亮\n\nVueHelper: Vue2 代码段（包括 Vue2 api、vue-router2、vuex2）\n\nvue-peek: vue 文件内查找速览声明\n\nvue-format: vue 格式化插件\n\n#### 非语言类\n\nBracket Pair Colorizer: 不同层级括号上色\n\nCode Spelling Checker: 单词拼写检查\n\nOutput Colorizer: 彩色输出信息\n\nPartial Diff: 对比两段代码或文件\n\nPath Autocomplete: 路径补全\n\nPath Intellisense: 路径提示\n\nProject Manager: 快速切换项目\n\nSettings Sync VSCode: 设置同步到 Gist\n","slug":"settings-in-vscode","published":1,"updated":"2018-09-23T02:10:14.953Z","layout":"post","photos":[],"link":"","_id":"cjv0yvirs002eborpqterikzo","content":"<h2>配置</h2>\n<ol>\n<li>vscode 支持特定语言的设置，比如，为不同的语言设置不同的配置：</li>\n</ol>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"[html]\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"editor.tabSize\"</span>: <span class=\"number\">4</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"[css]\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"editor.tabSize\"</span>: <span class=\"number\">4</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"[javascript]\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"editor.insertSpaces\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"editor.tabSize\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"[typescript]\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"editor.tabSize\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>\n<p>个别插件的配置比较特殊，需要配置后才能正常使用，譬如 csscomb, eslint, Easy LESS 等，注意查看文档。</p>\n</li>\n<li>\n<p>我的配置文件，借助 Settings Sync VSCode 插件，不定期修改会同步到 https://gist.github.com/xianshenglu</p>\n</li>\n</ol>\n<h2>相关插件</h2>\n<h4>HTML：</h4>\n<p>Auto Rename Tag 修改 HTML 标签时，自动修改匹配的标签</p>\n<p>Open in Browser</p>\n<p>HTML CSS Class Completion: CSS class 提示</p>\n<p>HTMLHint: HTML 格式提示</p>\n<h4>CSS：</h4>\n<p>Can I Use: HTML5、CSS3、SVG 的浏览器兼容性检查</p>\n<p>Color Highlight: 颜色值在代码中高亮显示</p>\n<p>Color Picker: 拾色器</p>\n<p>csscomb: css 排序，格式化，支持 .vue，<strong>但对于嵌入式样式缩进有问题</strong></p>\n<p>HTML CSS Support: css 提示，支持 .vue</p>\n<h4>JS</h4>\n<p>ESLint: ESLint 语法校验，自动格式化，修改等</p>\n<p>Version Lens package.json: 文件显示模块当前版本和最新版本</p>\n<p>View Node Package: 快速打开选中模块的主页和代码仓库</p>\n<p>JavaScript (ES6) code snippets: ES6 语法代码段</p>\n<p>Version Lens: 在 package.json 里显示包最新版本号</p>\n<h4>HTML/CSS/JS</h4>\n<p>Emmet: html,css,js 提示</p>\n<h4>框架</h4>\n<p>vetur: 目前比较好的 Vue 语法高亮</p>\n<p>VueHelper: Vue2 代码段（包括 Vue2 api、vue-router2、vuex2）</p>\n<p>vue-peek: vue 文件内查找速览声明</p>\n<p>vue-format: vue 格式化插件</p>\n<h4>非语言类</h4>\n<p>Bracket Pair Colorizer: 不同层级括号上色</p>\n<p>Code Spelling Checker: 单词拼写检查</p>\n<p>Output Colorizer: 彩色输出信息</p>\n<p>Partial Diff: 对比两段代码或文件</p>\n<p>Path Autocomplete: 路径补全</p>\n<p>Path Intellisense: 路径提示</p>\n<p>Project Manager: 快速切换项目</p>\n<p>Settings Sync VSCode: 设置同步到 Gist</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>配置</h2>\n<ol>\n<li>vscode 支持特定语言的设置，比如，为不同的语言设置不同的配置：</li>\n</ol>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"[html]\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"editor.tabSize\"</span>: <span class=\"number\">4</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"[css]\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"editor.tabSize\"</span>: <span class=\"number\">4</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"[javascript]\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"editor.insertSpaces\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"editor.tabSize\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"[typescript]\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"editor.tabSize\"</span>: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>\n<p>个别插件的配置比较特殊，需要配置后才能正常使用，譬如 csscomb, eslint, Easy LESS 等，注意查看文档。</p>\n</li>\n<li>\n<p>我的配置文件，借助 Settings Sync VSCode 插件，不定期修改会同步到 https://gist.github.com/xianshenglu</p>\n</li>\n</ol>\n<h2>相关插件</h2>\n<h4>HTML：</h4>\n<p>Auto Rename Tag 修改 HTML 标签时，自动修改匹配的标签</p>\n<p>Open in Browser</p>\n<p>HTML CSS Class Completion: CSS class 提示</p>\n<p>HTMLHint: HTML 格式提示</p>\n<h4>CSS：</h4>\n<p>Can I Use: HTML5、CSS3、SVG 的浏览器兼容性检查</p>\n<p>Color Highlight: 颜色值在代码中高亮显示</p>\n<p>Color Picker: 拾色器</p>\n<p>csscomb: css 排序，格式化，支持 .vue，<strong>但对于嵌入式样式缩进有问题</strong></p>\n<p>HTML CSS Support: css 提示，支持 .vue</p>\n<h4>JS</h4>\n<p>ESLint: ESLint 语法校验，自动格式化，修改等</p>\n<p>Version Lens package.json: 文件显示模块当前版本和最新版本</p>\n<p>View Node Package: 快速打开选中模块的主页和代码仓库</p>\n<p>JavaScript (ES6) code snippets: ES6 语法代码段</p>\n<p>Version Lens: 在 package.json 里显示包最新版本号</p>\n<h4>HTML/CSS/JS</h4>\n<p>Emmet: html,css,js 提示</p>\n<h4>框架</h4>\n<p>vetur: 目前比较好的 Vue 语法高亮</p>\n<p>VueHelper: Vue2 代码段（包括 Vue2 api、vue-router2、vuex2）</p>\n<p>vue-peek: vue 文件内查找速览声明</p>\n<p>vue-format: vue 格式化插件</p>\n<h4>非语言类</h4>\n<p>Bracket Pair Colorizer: 不同层级括号上色</p>\n<p>Code Spelling Checker: 单词拼写检查</p>\n<p>Output Colorizer: 彩色输出信息</p>\n<p>Partial Diff: 对比两段代码或文件</p>\n<p>Path Autocomplete: 路径补全</p>\n<p>Path Intellisense: 路径提示</p>\n<p>Project Manager: 快速切换项目</p>\n<p>Settings Sync VSCode: 设置同步到 Gist</p>\n"},{"title":"TCP Connection Reuse on HTTP/1.1 and 2.0","comments":1,"date":"2019-04-27T11:18:49.000Z","_content":"\nI saw the introduction of http/2.0 in [developers.google.com](https://developers.google.com/web/fundamentals/performance/http2/#request_and_response_multiplexing). However, I feel confused about the request and response multiplexing. So I decided to make a demo or an example for better understanding.\n\n## TCP Connection Reuse\n\nWhen I saw the TCP connection reuse, I had a lot of questions in my head. For instances,\n\n- how do I know if the TCP was reused?\n- What would the network be if the TCP wasn't reused?\n- It seems that HTTP 1.1 also supports TCP connection reuse. So, what's the difference?\n- ....\n\nAfter searching, I found that there is a **Connection ID** column in the chrome dev tool **Network** panel. For example, here is the network image of **baidu.com** :\n\n![image](../images/截图20190427204954.png)\n\nAccording to this [question](https://stackoverflow.com/questions/34184994/chrome-developer-tools-connection-id/43520092#43520092)\n\n> The new Connection ID Network Panel column in Canary can help indicate to you that a TCP connection was reused instead of handshaking and establishing a new one.\n\nCombined with the above image, we can say that in the network panel of **baidu.com**\n\n- Requests to **ss1.bdstatic.com** are based on H2 (http/2.0.) and share the same TCP connection because there is only one connection ID.\n- Requests to **www.baidu.com** are based on http/1.1 and 6 requests share two TCP connections because there are two connection IDs.\n\nIt seems http/1.1 also support TCP connection Reuse. So, how can I prove the advantages of H2 or what's the difference between the connection reuse of http/1.1 and 2.0? That confused me in the past.\n\n## Prove The Advantages of H2\n\nI pick two requests from the network record and then fetch it at the console. The code of requests to http/1.1 is:\n\n```js\nArray(13)\n  .fill()\n  .forEach(() => {\n    fetch('https://www.baidu.com/favicon.ico', {\n      credentials: 'omit',\n      referrer: 'https://www.baidu.com/',\n      referrerPolicy: 'unsafe-url',\n      body: null,\n      method: 'GET',\n      mode: 'cors'\n    })\n  })\n```\n\nAnd the code of requests to http/2.0 is:\n\n```js\nArray(13)\n  .fill()\n  .forEach(() => {\n    fetch(\n      'https://ss3.baidu.com/6ONWsjip0QIZ8tyhnq/ps_default.gif?_t=1556369856347',\n      {\n        credentials: 'omit',\n        referrer: 'https://www.baidu.com/',\n        referrerPolicy: 'unsafe-url',\n        body: null,\n        method: 'GET',\n        mode: 'cors'\n      }\n    )\n  })\n```\n\nHere are the results:\n\n![](../images/截图20190428205446.png)\n\n![](../images/截图20190427210224.png)\n\nTake a closer look at the pictures, we can find that\n\n- On http/1.1 connections, chrome would open up to 6 TCP connections per host and reuse the connections. While on http/2.0 connections, chrome would open **only one** TCP connection per host on http/2.0 connections.\n- Also, on http/1.1 connections chrome would send the requests **one by one** when the requests are using the same TCP connection. Just as the [developers.google.com](https://developers.google.com/web/tools/chrome-devtools/network/understanding-resource-timing) said:\n\n> On HTTP 1.0/1.1 connections, Chrome enforces a maximum of six TCP connections per host. If you are requesting twelve items at once, the first six will begin and the last half will be queued. Once one of the original half is finished, the first item in the queue will begin its request process.\n\nThis would bring more delay when sending more requests.\n\n- While on http/2 connections, chrome would send all the requests to the same origin simultaneously without delay.\n\n## Differences of TCP Connection Reuse between HTTP/1.1 and 2.0\n\nOn http/1.1 connections, chrome would reuse TCP connection by default and you can find\n\n```\nConnection: keep-alive\n```\n\nin the response headers. But according to [docs in mdn](https://developer.mozilla.org/en-US/docs/Web/HTTP/Connection_management_in_HTTP_1.x)\n\n> This connection will not stay open forever: idle connections are closed after some time (a server may use the Keep-Alive header to specify a minimum time the connection should be kept open).\n\nAnd for http/2.0, according to [developers.google.com](https://developers.google.com/web/fundamentals/performance/http2/#one_connection_per_origin)\n\n> all HTTP/2 connections are persistent, and only one connection per origin is required, which offers numerous performance benefits.\n\n[**Source**](https://github.com/xianshenglu/blog/issues/85)\n\n## Reference\n","source":"_posts/tcp-connection-reuse-in-http-1-1-and-2-0.md","raw":"---\ntitle: TCP Connection Reuse on HTTP/1.1 and 2.0\ncategories: http\ntags:\n  - TCP\n  - http/1.1\n  - http/2.0\ncomments: true\ndate: 2019-04-27 19:18:49\n---\n\nI saw the introduction of http/2.0 in [developers.google.com](https://developers.google.com/web/fundamentals/performance/http2/#request_and_response_multiplexing). However, I feel confused about the request and response multiplexing. So I decided to make a demo or an example for better understanding.\n\n## TCP Connection Reuse\n\nWhen I saw the TCP connection reuse, I had a lot of questions in my head. For instances,\n\n- how do I know if the TCP was reused?\n- What would the network be if the TCP wasn't reused?\n- It seems that HTTP 1.1 also supports TCP connection reuse. So, what's the difference?\n- ....\n\nAfter searching, I found that there is a **Connection ID** column in the chrome dev tool **Network** panel. For example, here is the network image of **baidu.com** :\n\n![image](../images/截图20190427204954.png)\n\nAccording to this [question](https://stackoverflow.com/questions/34184994/chrome-developer-tools-connection-id/43520092#43520092)\n\n> The new Connection ID Network Panel column in Canary can help indicate to you that a TCP connection was reused instead of handshaking and establishing a new one.\n\nCombined with the above image, we can say that in the network panel of **baidu.com**\n\n- Requests to **ss1.bdstatic.com** are based on H2 (http/2.0.) and share the same TCP connection because there is only one connection ID.\n- Requests to **www.baidu.com** are based on http/1.1 and 6 requests share two TCP connections because there are two connection IDs.\n\nIt seems http/1.1 also support TCP connection Reuse. So, how can I prove the advantages of H2 or what's the difference between the connection reuse of http/1.1 and 2.0? That confused me in the past.\n\n## Prove The Advantages of H2\n\nI pick two requests from the network record and then fetch it at the console. The code of requests to http/1.1 is:\n\n```js\nArray(13)\n  .fill()\n  .forEach(() => {\n    fetch('https://www.baidu.com/favicon.ico', {\n      credentials: 'omit',\n      referrer: 'https://www.baidu.com/',\n      referrerPolicy: 'unsafe-url',\n      body: null,\n      method: 'GET',\n      mode: 'cors'\n    })\n  })\n```\n\nAnd the code of requests to http/2.0 is:\n\n```js\nArray(13)\n  .fill()\n  .forEach(() => {\n    fetch(\n      'https://ss3.baidu.com/6ONWsjip0QIZ8tyhnq/ps_default.gif?_t=1556369856347',\n      {\n        credentials: 'omit',\n        referrer: 'https://www.baidu.com/',\n        referrerPolicy: 'unsafe-url',\n        body: null,\n        method: 'GET',\n        mode: 'cors'\n      }\n    )\n  })\n```\n\nHere are the results:\n\n![](../images/截图20190428205446.png)\n\n![](../images/截图20190427210224.png)\n\nTake a closer look at the pictures, we can find that\n\n- On http/1.1 connections, chrome would open up to 6 TCP connections per host and reuse the connections. While on http/2.0 connections, chrome would open **only one** TCP connection per host on http/2.0 connections.\n- Also, on http/1.1 connections chrome would send the requests **one by one** when the requests are using the same TCP connection. Just as the [developers.google.com](https://developers.google.com/web/tools/chrome-devtools/network/understanding-resource-timing) said:\n\n> On HTTP 1.0/1.1 connections, Chrome enforces a maximum of six TCP connections per host. If you are requesting twelve items at once, the first six will begin and the last half will be queued. Once one of the original half is finished, the first item in the queue will begin its request process.\n\nThis would bring more delay when sending more requests.\n\n- While on http/2 connections, chrome would send all the requests to the same origin simultaneously without delay.\n\n## Differences of TCP Connection Reuse between HTTP/1.1 and 2.0\n\nOn http/1.1 connections, chrome would reuse TCP connection by default and you can find\n\n```\nConnection: keep-alive\n```\n\nin the response headers. But according to [docs in mdn](https://developer.mozilla.org/en-US/docs/Web/HTTP/Connection_management_in_HTTP_1.x)\n\n> This connection will not stay open forever: idle connections are closed after some time (a server may use the Keep-Alive header to specify a minimum time the connection should be kept open).\n\nAnd for http/2.0, according to [developers.google.com](https://developers.google.com/web/fundamentals/performance/http2/#one_connection_per_origin)\n\n> all HTTP/2 connections are persistent, and only one connection per origin is required, which offers numerous performance benefits.\n\n[**Source**](https://github.com/xianshenglu/blog/issues/85)\n\n## Reference\n","slug":"tcp-connection-reuse-in-http-1-1-and-2-0","published":1,"updated":"2019-04-28T12:56:01.628Z","layout":"post","photos":[],"link":"","_id":"cjv0yvirz002iborpvq01it4m","content":"<p>I saw the introduction of http/2.0 in <a href=\"https://developers.google.com/web/fundamentals/performance/http2/#request_and_response_multiplexing\" target=\"_blank\" rel=\"noopener\">developers.google.com</a>. However, I feel confused about the request and response multiplexing. So I decided to make a demo or an example for better understanding.</p>\n<h2>TCP Connection Reuse</h2>\n<p>When I saw the TCP connection reuse, I had a lot of questions in my head. For instances,</p>\n<ul>\n<li>how do I know if the TCP was reused?</li>\n<li>What would the network be if the TCP wasn't reused?</li>\n<li>It seems that HTTP 1.1 also supports TCP connection reuse. So, what's the difference?</li>\n<li>....</li>\n</ul>\n<p>After searching, I found that there is a <strong>Connection ID</strong> column in the chrome dev tool <strong>Network</strong> panel. For example, here is the network image of <strong>baidu.com</strong> :</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20190427204954.png\" alt=\"image\"></p>\n<p>According to this <a href=\"https://stackoverflow.com/questions/34184994/chrome-developer-tools-connection-id/43520092#43520092\" target=\"_blank\" rel=\"noopener\">question</a></p>\n<blockquote>\n<p>The new Connection ID Network Panel column in Canary can help indicate to you that a TCP connection was reused instead of handshaking and establishing a new one.</p>\n</blockquote>\n<p>Combined with the above image, we can say that in the network panel of <strong>baidu.com</strong></p>\n<ul>\n<li>Requests to <strong>ss1.bdstatic.com</strong> are based on H2 (http/2.0.) and share the same TCP connection because there is only one connection ID.</li>\n<li>Requests to <strong>www.baidu.com</strong> are based on http/1.1 and 6 requests share two TCP connections because there are two connection IDs.</li>\n</ul>\n<p>It seems http/1.1 also support TCP connection Reuse. So, how can I prove the advantages of H2 or what's the difference between the connection reuse of http/1.1 and 2.0? That confused me in the past.</p>\n<h2>Prove The Advantages of H2</h2>\n<p>I pick two requests from the network record and then fetch it at the console. The code of requests to http/1.1 is:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">13</span>)</span><br><span class=\"line\">  .fill()</span><br><span class=\"line\">  .forEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fetch(<span class=\"string\">'https://www.baidu.com/favicon.ico'</span>, &#123;</span><br><span class=\"line\">      credentials: <span class=\"string\">'omit'</span>,</span><br><span class=\"line\">      referrer: <span class=\"string\">'https://www.baidu.com/'</span>,</span><br><span class=\"line\">      referrerPolicy: <span class=\"string\">'unsafe-url'</span>,</span><br><span class=\"line\">      body: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">      mode: <span class=\"string\">'cors'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>And the code of requests to http/2.0 is:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">13</span>)</span><br><span class=\"line\">  .fill()</span><br><span class=\"line\">  .forEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fetch(</span><br><span class=\"line\">      <span class=\"string\">'https://ss3.baidu.com/6ONWsjip0QIZ8tyhnq/ps_default.gif?_t=1556369856347'</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        credentials: <span class=\"string\">'omit'</span>,</span><br><span class=\"line\">        referrer: <span class=\"string\">'https://www.baidu.com/'</span>,</span><br><span class=\"line\">        referrerPolicy: <span class=\"string\">'unsafe-url'</span>,</span><br><span class=\"line\">        body: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">        mode: <span class=\"string\">'cors'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Here are the results:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20190428205446.png\" alt=\"\"></p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20190427210224.png\" alt=\"\"></p>\n<p>Take a closer look at the pictures, we can find that</p>\n<ul>\n<li>On http/1.1 connections, chrome would open up to 6 TCP connections per host and reuse the connections. While on http/2.0 connections, chrome would open <strong>only one</strong> TCP connection per host on http/2.0 connections.</li>\n<li>Also, on http/1.1 connections chrome would send the requests <strong>one by one</strong> when the requests are using the same TCP connection. Just as the <a href=\"https://developers.google.com/web/tools/chrome-devtools/network/understanding-resource-timing\" target=\"_blank\" rel=\"noopener\">developers.google.com</a> said:</li>\n</ul>\n<blockquote>\n<p>On HTTP 1.0/1.1 connections, Chrome enforces a maximum of six TCP connections per host. If you are requesting twelve items at once, the first six will begin and the last half will be queued. Once one of the original half is finished, the first item in the queue will begin its request process.</p>\n</blockquote>\n<p>This would bring more delay when sending more requests.</p>\n<ul>\n<li>While on http/2 connections, chrome would send all the requests to the same origin simultaneously without delay.</li>\n</ul>\n<h2>Differences of TCP Connection Reuse between HTTP/1.1 and 2.0</h2>\n<p>On http/1.1 connections, chrome would reuse TCP connection by default and you can find</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Connection: keep-alive</span><br></pre></td></tr></table></figure></p>\n<p>in the response headers. But according to <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Connection_management_in_HTTP_1.x\" target=\"_blank\" rel=\"noopener\">docs in mdn</a></p>\n<blockquote>\n<p>This connection will not stay open forever: idle connections are closed after some time (a server may use the Keep-Alive header to specify a minimum time the connection should be kept open).</p>\n</blockquote>\n<p>And for http/2.0, according to <a href=\"https://developers.google.com/web/fundamentals/performance/http2/#one_connection_per_origin\" target=\"_blank\" rel=\"noopener\">developers.google.com</a></p>\n<blockquote>\n<p>all HTTP/2 connections are persistent, and only one connection per origin is required, which offers numerous performance benefits.</p>\n</blockquote>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/85\"><strong>Source</strong></a></p>\n<h2>Reference</h2>\n","site":{"data":{}},"excerpt":"","more":"<p>I saw the introduction of http/2.0 in <a href=\"https://developers.google.com/web/fundamentals/performance/http2/#request_and_response_multiplexing\" target=\"_blank\" rel=\"noopener\">developers.google.com</a>. However, I feel confused about the request and response multiplexing. So I decided to make a demo or an example for better understanding.</p>\n<h2>TCP Connection Reuse</h2>\n<p>When I saw the TCP connection reuse, I had a lot of questions in my head. For instances,</p>\n<ul>\n<li>how do I know if the TCP was reused?</li>\n<li>What would the network be if the TCP wasn't reused?</li>\n<li>It seems that HTTP 1.1 also supports TCP connection reuse. So, what's the difference?</li>\n<li>....</li>\n</ul>\n<p>After searching, I found that there is a <strong>Connection ID</strong> column in the chrome dev tool <strong>Network</strong> panel. For example, here is the network image of <strong>baidu.com</strong> :</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20190427204954.png\" alt=\"image\"></p>\n<p>According to this <a href=\"https://stackoverflow.com/questions/34184994/chrome-developer-tools-connection-id/43520092#43520092\" target=\"_blank\" rel=\"noopener\">question</a></p>\n<blockquote>\n<p>The new Connection ID Network Panel column in Canary can help indicate to you that a TCP connection was reused instead of handshaking and establishing a new one.</p>\n</blockquote>\n<p>Combined with the above image, we can say that in the network panel of <strong>baidu.com</strong></p>\n<ul>\n<li>Requests to <strong>ss1.bdstatic.com</strong> are based on H2 (http/2.0.) and share the same TCP connection because there is only one connection ID.</li>\n<li>Requests to <strong>www.baidu.com</strong> are based on http/1.1 and 6 requests share two TCP connections because there are two connection IDs.</li>\n</ul>\n<p>It seems http/1.1 also support TCP connection Reuse. So, how can I prove the advantages of H2 or what's the difference between the connection reuse of http/1.1 and 2.0? That confused me in the past.</p>\n<h2>Prove The Advantages of H2</h2>\n<p>I pick two requests from the network record and then fetch it at the console. The code of requests to http/1.1 is:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">13</span>)</span><br><span class=\"line\">  .fill()</span><br><span class=\"line\">  .forEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fetch(<span class=\"string\">'https://www.baidu.com/favicon.ico'</span>, &#123;</span><br><span class=\"line\">      credentials: <span class=\"string\">'omit'</span>,</span><br><span class=\"line\">      referrer: <span class=\"string\">'https://www.baidu.com/'</span>,</span><br><span class=\"line\">      referrerPolicy: <span class=\"string\">'unsafe-url'</span>,</span><br><span class=\"line\">      body: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">      mode: <span class=\"string\">'cors'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>And the code of requests to http/2.0 is:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">13</span>)</span><br><span class=\"line\">  .fill()</span><br><span class=\"line\">  .forEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fetch(</span><br><span class=\"line\">      <span class=\"string\">'https://ss3.baidu.com/6ONWsjip0QIZ8tyhnq/ps_default.gif?_t=1556369856347'</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        credentials: <span class=\"string\">'omit'</span>,</span><br><span class=\"line\">        referrer: <span class=\"string\">'https://www.baidu.com/'</span>,</span><br><span class=\"line\">        referrerPolicy: <span class=\"string\">'unsafe-url'</span>,</span><br><span class=\"line\">        body: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">        mode: <span class=\"string\">'cors'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Here are the results:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20190428205446.png\" alt=\"\"></p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20190427210224.png\" alt=\"\"></p>\n<p>Take a closer look at the pictures, we can find that</p>\n<ul>\n<li>On http/1.1 connections, chrome would open up to 6 TCP connections per host and reuse the connections. While on http/2.0 connections, chrome would open <strong>only one</strong> TCP connection per host on http/2.0 connections.</li>\n<li>Also, on http/1.1 connections chrome would send the requests <strong>one by one</strong> when the requests are using the same TCP connection. Just as the <a href=\"https://developers.google.com/web/tools/chrome-devtools/network/understanding-resource-timing\" target=\"_blank\" rel=\"noopener\">developers.google.com</a> said:</li>\n</ul>\n<blockquote>\n<p>On HTTP 1.0/1.1 connections, Chrome enforces a maximum of six TCP connections per host. If you are requesting twelve items at once, the first six will begin and the last half will be queued. Once one of the original half is finished, the first item in the queue will begin its request process.</p>\n</blockquote>\n<p>This would bring more delay when sending more requests.</p>\n<ul>\n<li>While on http/2 connections, chrome would send all the requests to the same origin simultaneously without delay.</li>\n</ul>\n<h2>Differences of TCP Connection Reuse between HTTP/1.1 and 2.0</h2>\n<p>On http/1.1 connections, chrome would reuse TCP connection by default and you can find</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Connection: keep-alive</span><br></pre></td></tr></table></figure></p>\n<p>in the response headers. But according to <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Connection_management_in_HTTP_1.x\" target=\"_blank\" rel=\"noopener\">docs in mdn</a></p>\n<blockquote>\n<p>This connection will not stay open forever: idle connections are closed after some time (a server may use the Keep-Alive header to specify a minimum time the connection should be kept open).</p>\n</blockquote>\n<p>And for http/2.0, according to <a href=\"https://developers.google.com/web/fundamentals/performance/http2/#one_connection_per_origin\" target=\"_blank\" rel=\"noopener\">developers.google.com</a></p>\n<blockquote>\n<p>all HTTP/2 connections are persistent, and only one connection per origin is required, which offers numerous performance benefits.</p>\n</blockquote>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/85\"><strong>Source</strong></a></p>\n<h2>Reference</h2>\n"},{"title":"Understand .sync in Vue","comments":1,"date":"2018-10-05T01:54:17.000Z","_content":"\n## Preface\n\nThe first time I met `.sync` modifier, I didn't know it very well. So, I seldom use that. Today, I am going to get it.\n\n## Main\n\nIn the past, I use “two-way binding” like this:\n\n```html\n<div class=\"app\" id=\"app\">\n  <button-counter :child-count=\"parCount\" @add=\"add\"></button-counter>\n  <p>parent component {{parCount}}</p>\n</div>\n```\n\n```js\nlet app = new Vue({\n  el: '#app',\n  data: {\n    parCount: 0\n  },\n  methods: {\n    add() {\n      this.parCount++\n    }\n  },\n  components: {\n    'button-counter': {\n      template:\n        '<button @click=\"add\">You clicked me {{ childCount }} times.</button>',\n      props: ['childCount'],\n      methods: {\n        add() {\n          this.$emit('add')\n        }\n      }\n    }\n  }\n})\n```\n\nIt was easy to understand except a little inconvenient. I need to listen and handle event in child and parent component. Also\n\n_true two-way binding can create maintenance issues, because child components can mutate the parent without the source of that mutation being obvious in both the parent and the child._\n\nSo, Vue recommends emitting events in the pattern of `update:myPropName`. For example:\n\n```html\n<div class=\"app\" id=\"app\">\n  <button-counter\n    :child-count=\"parCount\"\n    @update:child-count=\"parCount=$event\"\n  ></button-counter>\n  <p>parent component {{parCount}}</p>\n</div>\n```\n\n```js\nlet app = new Vue({\n  el: '#app',\n  data: {\n    parCount: 0\n  },\n  methods: {},\n  components: {\n    'button-counter': {\n      template:\n        '<button @click=\"add\">You clicked me {{ childCount }} times.</button>',\n      props: ['childCount'],\n      methods: {\n        add() {\n          this.$emit('update:child-count', this.childCount + 1) // child-count is right while childCount won't work\n        }\n      }\n    }\n  }\n})\n```\n\nSee? In this case, we don't have to add event callback in parent component because vue have done that. And this is the principle of `.sync`. For convenience, Vue offers a shorthand for this pattern with the `.sync` modifier which would make the code above like:\n\n```html\n<div class=\"app\" id=\"app\">\n  <button-counter :child-count.sync=\"parCount\"></button-counter>\n  <p>parent component {{parCount}}</p>\n</div>\n```\n\n```js\nlet app = new Vue({\n  el: '#app',\n  data: {\n    parCount: 0\n  },\n  methods: {},\n  components: {\n    'button-counter': {\n      template:\n        '<button @click=\"add\">You clicked me {{ childCount }} times.</button>',\n      props: ['childCount'],\n      methods: {\n        add() {\n          this.$emit('update:childCount', this.childCount + 1) // childCount is right while child-count won't work\n        }\n      }\n    }\n  }\n})\n```\n\nAlso,\n\n_The .sync modifier can also be used with v-bind when using an object to set multiple props at once:_\n\n```html\n<text-document v-bind.sync=\"doc\"></text-document>\n```\n\n_This passes each property in the `doc` object (e.g. `title`) as an individual prop, then adds `v-on` update listeners for each one._\n\nFor more information, go [Vue.js](https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier)\n\n## Ending\n\n## Reference\n","source":"_posts/understand-sync-in-vue.md","raw":"---\ntitle: Understand .sync in Vue\ncategories: frame\ntags:\n  - vue\n  - sync\ncomments: true\ndate: 2018-10-05 09:54:17\n---\n\n## Preface\n\nThe first time I met `.sync` modifier, I didn't know it very well. So, I seldom use that. Today, I am going to get it.\n\n## Main\n\nIn the past, I use “two-way binding” like this:\n\n```html\n<div class=\"app\" id=\"app\">\n  <button-counter :child-count=\"parCount\" @add=\"add\"></button-counter>\n  <p>parent component {{parCount}}</p>\n</div>\n```\n\n```js\nlet app = new Vue({\n  el: '#app',\n  data: {\n    parCount: 0\n  },\n  methods: {\n    add() {\n      this.parCount++\n    }\n  },\n  components: {\n    'button-counter': {\n      template:\n        '<button @click=\"add\">You clicked me {{ childCount }} times.</button>',\n      props: ['childCount'],\n      methods: {\n        add() {\n          this.$emit('add')\n        }\n      }\n    }\n  }\n})\n```\n\nIt was easy to understand except a little inconvenient. I need to listen and handle event in child and parent component. Also\n\n_true two-way binding can create maintenance issues, because child components can mutate the parent without the source of that mutation being obvious in both the parent and the child._\n\nSo, Vue recommends emitting events in the pattern of `update:myPropName`. For example:\n\n```html\n<div class=\"app\" id=\"app\">\n  <button-counter\n    :child-count=\"parCount\"\n    @update:child-count=\"parCount=$event\"\n  ></button-counter>\n  <p>parent component {{parCount}}</p>\n</div>\n```\n\n```js\nlet app = new Vue({\n  el: '#app',\n  data: {\n    parCount: 0\n  },\n  methods: {},\n  components: {\n    'button-counter': {\n      template:\n        '<button @click=\"add\">You clicked me {{ childCount }} times.</button>',\n      props: ['childCount'],\n      methods: {\n        add() {\n          this.$emit('update:child-count', this.childCount + 1) // child-count is right while childCount won't work\n        }\n      }\n    }\n  }\n})\n```\n\nSee? In this case, we don't have to add event callback in parent component because vue have done that. And this is the principle of `.sync`. For convenience, Vue offers a shorthand for this pattern with the `.sync` modifier which would make the code above like:\n\n```html\n<div class=\"app\" id=\"app\">\n  <button-counter :child-count.sync=\"parCount\"></button-counter>\n  <p>parent component {{parCount}}</p>\n</div>\n```\n\n```js\nlet app = new Vue({\n  el: '#app',\n  data: {\n    parCount: 0\n  },\n  methods: {},\n  components: {\n    'button-counter': {\n      template:\n        '<button @click=\"add\">You clicked me {{ childCount }} times.</button>',\n      props: ['childCount'],\n      methods: {\n        add() {\n          this.$emit('update:childCount', this.childCount + 1) // childCount is right while child-count won't work\n        }\n      }\n    }\n  }\n})\n```\n\nAlso,\n\n_The .sync modifier can also be used with v-bind when using an object to set multiple props at once:_\n\n```html\n<text-document v-bind.sync=\"doc\"></text-document>\n```\n\n_This passes each property in the `doc` object (e.g. `title`) as an individual prop, then adds `v-on` update listeners for each one._\n\nFor more information, go [Vue.js](https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier)\n\n## Ending\n\n## Reference\n","slug":"understand-sync-in-vue","published":1,"updated":"2018-11-18T10:08:40.949Z","layout":"post","photos":[],"link":"","_id":"cjv0yvis3002kborp8andtx6m","content":"<h2>Preface</h2>\n<p>The first time I met <code>.sync</code> modifier, I didn't know it very well. So, I seldom use that. Today, I am going to get it.</p>\n<h2>Main</h2>\n<p>In the past, I use “two-way binding” like this:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">:child-count</span>=<span class=\"string\">\"parCount\"</span> @<span class=\"attr\">add</span>=<span class=\"string\">\"add\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component &#123;&#123;parCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    parCount: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    add() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.parCount++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">'button-counter'</span>: &#123;</span><br><span class=\"line\">      template:</span><br><span class=\"line\">        <span class=\"string\">'&lt;button @click=\"add\"&gt;You clicked me &#123;&#123; childCount &#125;&#125; times.&lt;/button&gt;'</span>,</span><br><span class=\"line\">      props: [<span class=\"string\">'childCount'</span>],</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        add() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'add'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>It was easy to understand except a little inconvenient. I need to listen and handle event in child and parent component. Also</p>\n<p><em>true two-way binding can create maintenance issues, because child components can mutate the parent without the source of that mutation being obvious in both the parent and the child.</em></p>\n<p>So, Vue recommends emitting events in the pattern of <code>update:myPropName</code>. For example:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:child-count</span>=<span class=\"string\">\"parCount\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">update:child-count</span>=<span class=\"string\">\"parCount=$event\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component &#123;&#123;parCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    parCount: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;&#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">'button-counter'</span>: &#123;</span><br><span class=\"line\">      template:</span><br><span class=\"line\">        <span class=\"string\">'&lt;button @click=\"add\"&gt;You clicked me &#123;&#123; childCount &#125;&#125; times.&lt;/button&gt;'</span>,</span><br><span class=\"line\">      props: [<span class=\"string\">'childCount'</span>],</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        add() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'update:child-count'</span>, <span class=\"keyword\">this</span>.childCount + <span class=\"number\">1</span>) <span class=\"comment\">// child-count is right while childCount won't work</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>See? In this case, we don't have to add event callback in parent component because vue have done that. And this is the principle of <code>.sync</code>. For convenience, Vue offers a shorthand for this pattern with the <code>.sync</code> modifier which would make the code above like:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">:child-count.sync</span>=<span class=\"string\">\"parCount\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component &#123;&#123;parCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    parCount: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;&#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">'button-counter'</span>: &#123;</span><br><span class=\"line\">      template:</span><br><span class=\"line\">        <span class=\"string\">'&lt;button @click=\"add\"&gt;You clicked me &#123;&#123; childCount &#125;&#125; times.&lt;/button&gt;'</span>,</span><br><span class=\"line\">      props: [<span class=\"string\">'childCount'</span>],</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        add() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'update:childCount'</span>, <span class=\"keyword\">this</span>.childCount + <span class=\"number\">1</span>) <span class=\"comment\">// childCount is right while child-count won't work</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Also,</p>\n<p><em>The .sync modifier can also be used with v-bind when using an object to set multiple props at once:</em></p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span> <span class=\"attr\">v-bind.sync</span>=<span class=\"string\">\"doc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><em>This passes each property in the <code>doc</code> object (e.g. <code>title</code>) as an individual prop, then adds <code>v-on</code> update listeners for each one.</em></p>\n<p>For more information, go <a href=\"https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier\" target=\"_blank\" rel=\"noopener\">Vue.js</a></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>The first time I met <code>.sync</code> modifier, I didn't know it very well. So, I seldom use that. Today, I am going to get it.</p>\n<h2>Main</h2>\n<p>In the past, I use “two-way binding” like this:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">:child-count</span>=<span class=\"string\">\"parCount\"</span> @<span class=\"attr\">add</span>=<span class=\"string\">\"add\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component &#123;&#123;parCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    parCount: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    add() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.parCount++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">'button-counter'</span>: &#123;</span><br><span class=\"line\">      template:</span><br><span class=\"line\">        <span class=\"string\">'&lt;button @click=\"add\"&gt;You clicked me &#123;&#123; childCount &#125;&#125; times.&lt;/button&gt;'</span>,</span><br><span class=\"line\">      props: [<span class=\"string\">'childCount'</span>],</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        add() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'add'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>It was easy to understand except a little inconvenient. I need to listen and handle event in child and parent component. Also</p>\n<p><em>true two-way binding can create maintenance issues, because child components can mutate the parent without the source of that mutation being obvious in both the parent and the child.</em></p>\n<p>So, Vue recommends emitting events in the pattern of <code>update:myPropName</code>. For example:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:child-count</span>=<span class=\"string\">\"parCount\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">update:child-count</span>=<span class=\"string\">\"parCount=$event\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component &#123;&#123;parCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    parCount: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;&#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">'button-counter'</span>: &#123;</span><br><span class=\"line\">      template:</span><br><span class=\"line\">        <span class=\"string\">'&lt;button @click=\"add\"&gt;You clicked me &#123;&#123; childCount &#125;&#125; times.&lt;/button&gt;'</span>,</span><br><span class=\"line\">      props: [<span class=\"string\">'childCount'</span>],</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        add() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'update:child-count'</span>, <span class=\"keyword\">this</span>.childCount + <span class=\"number\">1</span>) <span class=\"comment\">// child-count is right while childCount won't work</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>See? In this case, we don't have to add event callback in parent component because vue have done that. And this is the principle of <code>.sync</code>. For convenience, Vue offers a shorthand for this pattern with the <code>.sync</code> modifier which would make the code above like:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> <span class=\"attr\">:child-count.sync</span>=<span class=\"string\">\"parCount\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>parent component &#123;&#123;parCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    parCount: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;&#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    <span class=\"string\">'button-counter'</span>: &#123;</span><br><span class=\"line\">      template:</span><br><span class=\"line\">        <span class=\"string\">'&lt;button @click=\"add\"&gt;You clicked me &#123;&#123; childCount &#125;&#125; times.&lt;/button&gt;'</span>,</span><br><span class=\"line\">      props: [<span class=\"string\">'childCount'</span>],</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        add() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'update:childCount'</span>, <span class=\"keyword\">this</span>.childCount + <span class=\"number\">1</span>) <span class=\"comment\">// childCount is right while child-count won't work</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Also,</p>\n<p><em>The .sync modifier can also be used with v-bind when using an object to set multiple props at once:</em></p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text-document</span> <span class=\"attr\">v-bind.sync</span>=<span class=\"string\">\"doc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><em>This passes each property in the <code>doc</code> object (e.g. <code>title</code>) as an individual prop, then adds <code>v-on</code> update listeners for each one.</em></p>\n<p>For more information, go <a href=\"https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier\" target=\"_blank\" rel=\"noopener\">Vue.js</a></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n"},{"title":"Tricks in Vue","comments":1,"date":"2019-01-25T11:12:07.000Z","_content":"\nThere are some tricks which can't be found easily in [Vue.js homepage](https://vuejs.org/index.html). So, for convenient, I summarized them here.\n\n### Vue\n\n#### Access Global Variable in Template\n\nHave you ever done something like this in lots of components?\n\n```vue\n<template>\n  <a @click=\"window.open('...')\"></a>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  data() {\n    return {\n      window: window\n    }\n  }\n}\n</script>\n```\n\nor\n\n```vue\n<template>\n  <a @click=\"bus.$emit('some-event')\"></a>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  data() {\n    return {\n      bus: bus\n    }\n  }\n}\n</script>\n```\n\nActually, you don't have to, you can register `window` or `bus` in `Vue.prototype` like:\n\n```js\nVue.prototype.window = window\nVue.prototype.bus = bus\n```\n\nin the _main.js_ or the entry file. Then you can use `bus` or `window` in `template` directly. Also, this usage prevents Vue watching the attributes of `bus` or `window` which would bring a waste of performance.\n\n#### Reactive or Not Reactive\n\nAlways, if we want a data reactive, we have to do something like this:\n\n```js\ndata: {\n  newTodoText: '',\n  visitCount: 0,\n  hideCompletedTodos: false,\n  todos: [],\n  error: null\n}\n```\n\nSet some initial value to adds **all the properties found in its data object** to Vue's reactivity system.\n\nThings we need to take care about is:\n\n- If we want to add reactive attributes dynamically, we have to use something like `Vue.set` or `this.$set`. Otherwise, they might not be reactive.\n- If we definitely don't want some data to participate in Vue's reactivity system even we initialize it in `data`. We can use something like `Object.freeze()`. For example, freeze a **huge** array to improve **performance**.\n\n#### Scoped Style Won't Work on Dynamically Inserted Elements\n\nI always use the `<style scoped>` tag in _.vue_ files. It is always good except when we want to insert elements dynamically. For example:\n\n```vue\n<template>\n  <div id=\"app\" ref=\"app\"></div>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  mounted() {\n    this.$refs.app.innerHTML = `<h1 class=\"App__title\">App__title</h1>`\n  }\n}\n</script>\n\n<style scoped>\n.App__title {\n  color: red;\n}\n</style>\n```\n\n`color: red` won't work on `.App__title` because of `scoped`. The actual style is rendered with a unique attribute like:\n\n![](../images/微信截图_20190126215103.png)\n\nSo, how do we solve this? `/deep/` or `>>>`.\n\n```vue\n<style scoped>\n/deep/ .App__title {\n  color: red;\n}\n</style>\n```\n\nThey can be used to override child component style. Here is the [doc](https://vue-loader.vuejs.org/guide/scoped-css.html#deep-selectors).\n\n#### Smarter Watchers\n\nHave you ever written code like this:\n\n```js\n{\n  // ...\n  created() {\n    this.fetchPostList()\n  },\n  watch: {\n    searchInputValue() {\n      this.fetchPostList()\n    }\n  }\n  // ...\n}\n```\n\nActually, you can simplify it by\n\n```js\n{\n  // ...\n  watch: {\n    searchInputValue:{\n      handler: 'fetchPostList',\n      immediate: true\n    }\n  }\n  // ...\n}\n\n```\n\nAs the [doc](https://vuejs.org/v2/api/#vm-watch) said:\n\n> Passing in immediate: true in the option will trigger the callback immediately with the current value of the expression.\n\n#### $attrs and $listeners\n\nI don't know if you have used `$attrs` and `$listeners` from `this`. However, I never used those until I met this situation. For example:\n\n```html\n<div id=\"app\">\n  <base-input\n    :value=\"value\"\n    placeholder=\"parentPlaceholder\"\n    otherAttrs=\"otherAttrs\"\n    @input=\"inputCb\"\n    @click=\"clickCb\"\n  ></base-input>\n</div>\n<script>\n  let BaseInput = {\n    name: 'base-input',\n    template: `\n    <div>\n    <input type=\"text\" :value=\"value\" :placeholder=\"placeholder\"  :otherAttrs=\"otherAttrs\" @input=\"$emit('input',$event)\" @click=\"$emit('click',$event)\" @focus=\"focusCb\" />\n    </div>`,\n    props: {\n      value: {\n        type: String\n      }\n    },\n    computed: {\n      listeners() {\n        const listeners = {\n          ...this.$listeners,\n          focus: this.focusCb\n        }\n        return listeners\n      }\n    },\n    methods: {\n      focusCb(event) {\n        console.log('child', event)\n      }\n    }\n  }\n  window.app = new Vue({\n    el: '#app',\n    components: {\n      BaseInput\n    },\n    data: {\n      value: '',\n      parentPlaceholder: 'parentPlaceholder'\n    },\n    methods: {\n      inputCb(event) {\n        console.log(event)\n      },\n      clickCb(event) {\n        console.log(event)\n      }\n    }\n  })\n</script>\n```\n\nIt's obviously tedious to bind every attribute and listener by hand. Actually, this is where `$attrs` and `$listeners` will help us. We can write the `BaseInput` `template` like:\n\n```js\nlet BaseInput = {\n  name: 'base-input',\n  template: `<div><input type=\"text\" :value=\"value\"  v-bind=\"$attrs\" v-on=\"listeners\" /></div>`,\n  props: {\n    value: {\n      type: String\n    }\n  },\n  computed: {\n    listeners() {\n      const listeners = {\n        ...this.$listeners,\n        // move `focus` in to `listeners` instead of adding one more `focus` listener.\n        focus: this.focusCb\n      }\n      return listeners\n    }\n  },\n  methods: {\n    focusCb(event) {\n      console.log('child', event)\n    }\n  }\n}\n```\n\n### Vue-Router\n\n#### $router and $route\n\nHave you ever wonder about the relationship between `$router` and `$route`? I give you a hint:\n\n```js\nthis.$router.currentRoute === this.$route //true\n```\n\n### Vuex\n\n#### Commit Data by One Mutation\n\nWe can't directly mutate `state` in Vuex. Instead, we have to `commit` a `mutation` to mutate the data. However, it would be tedious to write lots of similar mutations like this:\n\n```js\nlet store = new Vuex.Store({\n  modules: {\n    // ...\n  },\n  mutations: {\n    updateName(state, data) {\n      state.name = data\n    },\n    updateChildrenCount(state, data) {\n      state.children.count = data\n    }\n    // other similar mutations\n  }\n})\n```\n\nWe can write a public mutation to do this like:\n\n```js\nlet store = new Vuex.Store({\n  modules: {\n    // ...\n  },\n  mutations: {\n    replaceProperty(state, { path, data }) {\n      if (typeof path !== 'string') {\n        return\n      }\n      path = path.split('.')\n      let targetObj = path.slice(0, -1).reduce((re, key) => re[key], state)\n      targetObj[path.pop()] = data\n    }\n  }\n})\n```\n\nThen we can mutate `state` in anywhere with only one mutation like:\n\n```js\ncommit(\n  'replaceProperty',\n  {\n    path: 'name',\n    data: name\n  },\n  { root: true }\n)\ncommit(\n  'replaceProperty',\n  {\n    path: 'children.count',\n    data: data\n  },\n  { root: true }\n)\ncommit(\n  'replaceProperty',\n  {\n    path: 'some.other.deep.path.in.state',\n    data: data\n  },\n  { root: true }\n)\n```\n\nIt would also work for modules!\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/52)\n\n## Reference\n\n- [7 Secret Patterns Vue Consultants Don’t Want You to Know - Chris Fritz](https://www.youtube.com/watch?v=7lpemgMhi0k)\n- [vue-loader/issues/749](https://github.com/vuejs/vue-loader/issues/749)\n","source":"_posts/tricks-in-vue.md","raw":"---\ntitle: Tricks in Vue\ncategories: js\ntags:\n  - vue\ncomments: true\ndate: 2019-01-25 19:12:07\n---\n\nThere are some tricks which can't be found easily in [Vue.js homepage](https://vuejs.org/index.html). So, for convenient, I summarized them here.\n\n### Vue\n\n#### Access Global Variable in Template\n\nHave you ever done something like this in lots of components?\n\n```vue\n<template>\n  <a @click=\"window.open('...')\"></a>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  data() {\n    return {\n      window: window\n    }\n  }\n}\n</script>\n```\n\nor\n\n```vue\n<template>\n  <a @click=\"bus.$emit('some-event')\"></a>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  data() {\n    return {\n      bus: bus\n    }\n  }\n}\n</script>\n```\n\nActually, you don't have to, you can register `window` or `bus` in `Vue.prototype` like:\n\n```js\nVue.prototype.window = window\nVue.prototype.bus = bus\n```\n\nin the _main.js_ or the entry file. Then you can use `bus` or `window` in `template` directly. Also, this usage prevents Vue watching the attributes of `bus` or `window` which would bring a waste of performance.\n\n#### Reactive or Not Reactive\n\nAlways, if we want a data reactive, we have to do something like this:\n\n```js\ndata: {\n  newTodoText: '',\n  visitCount: 0,\n  hideCompletedTodos: false,\n  todos: [],\n  error: null\n}\n```\n\nSet some initial value to adds **all the properties found in its data object** to Vue's reactivity system.\n\nThings we need to take care about is:\n\n- If we want to add reactive attributes dynamically, we have to use something like `Vue.set` or `this.$set`. Otherwise, they might not be reactive.\n- If we definitely don't want some data to participate in Vue's reactivity system even we initialize it in `data`. We can use something like `Object.freeze()`. For example, freeze a **huge** array to improve **performance**.\n\n#### Scoped Style Won't Work on Dynamically Inserted Elements\n\nI always use the `<style scoped>` tag in _.vue_ files. It is always good except when we want to insert elements dynamically. For example:\n\n```vue\n<template>\n  <div id=\"app\" ref=\"app\"></div>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  mounted() {\n    this.$refs.app.innerHTML = `<h1 class=\"App__title\">App__title</h1>`\n  }\n}\n</script>\n\n<style scoped>\n.App__title {\n  color: red;\n}\n</style>\n```\n\n`color: red` won't work on `.App__title` because of `scoped`. The actual style is rendered with a unique attribute like:\n\n![](../images/微信截图_20190126215103.png)\n\nSo, how do we solve this? `/deep/` or `>>>`.\n\n```vue\n<style scoped>\n/deep/ .App__title {\n  color: red;\n}\n</style>\n```\n\nThey can be used to override child component style. Here is the [doc](https://vue-loader.vuejs.org/guide/scoped-css.html#deep-selectors).\n\n#### Smarter Watchers\n\nHave you ever written code like this:\n\n```js\n{\n  // ...\n  created() {\n    this.fetchPostList()\n  },\n  watch: {\n    searchInputValue() {\n      this.fetchPostList()\n    }\n  }\n  // ...\n}\n```\n\nActually, you can simplify it by\n\n```js\n{\n  // ...\n  watch: {\n    searchInputValue:{\n      handler: 'fetchPostList',\n      immediate: true\n    }\n  }\n  // ...\n}\n\n```\n\nAs the [doc](https://vuejs.org/v2/api/#vm-watch) said:\n\n> Passing in immediate: true in the option will trigger the callback immediately with the current value of the expression.\n\n#### $attrs and $listeners\n\nI don't know if you have used `$attrs` and `$listeners` from `this`. However, I never used those until I met this situation. For example:\n\n```html\n<div id=\"app\">\n  <base-input\n    :value=\"value\"\n    placeholder=\"parentPlaceholder\"\n    otherAttrs=\"otherAttrs\"\n    @input=\"inputCb\"\n    @click=\"clickCb\"\n  ></base-input>\n</div>\n<script>\n  let BaseInput = {\n    name: 'base-input',\n    template: `\n    <div>\n    <input type=\"text\" :value=\"value\" :placeholder=\"placeholder\"  :otherAttrs=\"otherAttrs\" @input=\"$emit('input',$event)\" @click=\"$emit('click',$event)\" @focus=\"focusCb\" />\n    </div>`,\n    props: {\n      value: {\n        type: String\n      }\n    },\n    computed: {\n      listeners() {\n        const listeners = {\n          ...this.$listeners,\n          focus: this.focusCb\n        }\n        return listeners\n      }\n    },\n    methods: {\n      focusCb(event) {\n        console.log('child', event)\n      }\n    }\n  }\n  window.app = new Vue({\n    el: '#app',\n    components: {\n      BaseInput\n    },\n    data: {\n      value: '',\n      parentPlaceholder: 'parentPlaceholder'\n    },\n    methods: {\n      inputCb(event) {\n        console.log(event)\n      },\n      clickCb(event) {\n        console.log(event)\n      }\n    }\n  })\n</script>\n```\n\nIt's obviously tedious to bind every attribute and listener by hand. Actually, this is where `$attrs` and `$listeners` will help us. We can write the `BaseInput` `template` like:\n\n```js\nlet BaseInput = {\n  name: 'base-input',\n  template: `<div><input type=\"text\" :value=\"value\"  v-bind=\"$attrs\" v-on=\"listeners\" /></div>`,\n  props: {\n    value: {\n      type: String\n    }\n  },\n  computed: {\n    listeners() {\n      const listeners = {\n        ...this.$listeners,\n        // move `focus` in to `listeners` instead of adding one more `focus` listener.\n        focus: this.focusCb\n      }\n      return listeners\n    }\n  },\n  methods: {\n    focusCb(event) {\n      console.log('child', event)\n    }\n  }\n}\n```\n\n### Vue-Router\n\n#### $router and $route\n\nHave you ever wonder about the relationship between `$router` and `$route`? I give you a hint:\n\n```js\nthis.$router.currentRoute === this.$route //true\n```\n\n### Vuex\n\n#### Commit Data by One Mutation\n\nWe can't directly mutate `state` in Vuex. Instead, we have to `commit` a `mutation` to mutate the data. However, it would be tedious to write lots of similar mutations like this:\n\n```js\nlet store = new Vuex.Store({\n  modules: {\n    // ...\n  },\n  mutations: {\n    updateName(state, data) {\n      state.name = data\n    },\n    updateChildrenCount(state, data) {\n      state.children.count = data\n    }\n    // other similar mutations\n  }\n})\n```\n\nWe can write a public mutation to do this like:\n\n```js\nlet store = new Vuex.Store({\n  modules: {\n    // ...\n  },\n  mutations: {\n    replaceProperty(state, { path, data }) {\n      if (typeof path !== 'string') {\n        return\n      }\n      path = path.split('.')\n      let targetObj = path.slice(0, -1).reduce((re, key) => re[key], state)\n      targetObj[path.pop()] = data\n    }\n  }\n})\n```\n\nThen we can mutate `state` in anywhere with only one mutation like:\n\n```js\ncommit(\n  'replaceProperty',\n  {\n    path: 'name',\n    data: name\n  },\n  { root: true }\n)\ncommit(\n  'replaceProperty',\n  {\n    path: 'children.count',\n    data: data\n  },\n  { root: true }\n)\ncommit(\n  'replaceProperty',\n  {\n    path: 'some.other.deep.path.in.state',\n    data: data\n  },\n  { root: true }\n)\n```\n\nIt would also work for modules!\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/52)\n\n## Reference\n\n- [7 Secret Patterns Vue Consultants Don’t Want You to Know - Chris Fritz](https://www.youtube.com/watch?v=7lpemgMhi0k)\n- [vue-loader/issues/749](https://github.com/vuejs/vue-loader/issues/749)\n","slug":"tricks-in-vue","published":1,"updated":"2019-01-27T02:52:01.666Z","layout":"post","photos":[],"link":"","_id":"cjv0yvis9002nborpq8s9l23w","content":"<p>There are some tricks which can't be found easily in <a href=\"https://vuejs.org/index.html\" target=\"_blank\" rel=\"noopener\">Vue.js homepage</a>. So, for convenient, I summarized them here.</p>\n<h3>Vue</h3>\n<h4>Access Global Variable in Template</h4>\n<p>Have you ever done something like this in lots of components?</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;a @click=&quot;window.open(&apos;...&apos;)&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;App&apos;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      window: window</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>or</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;a @click=&quot;bus.$emit(&apos;some-event&apos;)&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;App&apos;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      bus: bus</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Actually, you don't have to, you can register <code>window</code> or <code>bus</code> in <code>Vue.prototype</code> like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype.window = <span class=\"built_in\">window</span></span><br><span class=\"line\">Vue.prototype.bus = bus</span><br></pre></td></tr></table></figure></p>\n<p>in the <em>main.js</em> or the entry file. Then you can use <code>bus</code> or <code>window</code> in <code>template</code> directly. Also, this usage prevents Vue watching the attributes of <code>bus</code> or <code>window</code> which would bring a waste of performance.</p>\n<h4>Reactive or Not Reactive</h4>\n<p>Always, if we want a data reactive, we have to do something like this:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  newTodoText: <span class=\"string\">''</span>,</span><br><span class=\"line\">  visitCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  hideCompletedTodos: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  todos: [],</span><br><span class=\"line\">  error: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Set some initial value to adds <strong>all the properties found in its data object</strong> to Vue's reactivity system.</p>\n<p>Things we need to take care about is:</p>\n<ul>\n<li>If we want to add reactive attributes dynamically, we have to use something like <code>Vue.set</code> or <code>this.$set</code>. Otherwise, they might not be reactive.</li>\n<li>If we definitely don't want some data to participate in Vue's reactivity system even we initialize it in <code>data</code>. We can use something like <code>Object.freeze()</code>. For example, freeze a <strong>huge</strong> array to improve <strong>performance</strong>.</li>\n</ul>\n<h4>Scoped Style Won't Work on Dynamically Inserted Elements</h4>\n<p>I always use the <code>&lt;style scoped&gt;</code> tag in <em>.vue</em> files. It is always good except when we want to insert elements dynamically. For example:</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot; ref=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;App&apos;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    this.$refs.app.innerHTML = `&lt;h1 class=&quot;App__title&quot;&gt;App__title&lt;/h1&gt;`</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.App__title &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>color: red</code> won't work on <code>.App__title</code> because of <code>scoped</code>. The actual style is rendered with a unique attribute like:</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190126215103.png\" alt=\"\"></p>\n<p>So, how do we solve this? <code>/deep/</code> or <code>&gt;&gt;&gt;</code>.</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">/deep/ .App__title &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>They can be used to override child component style. Here is the <a href=\"https://vue-loader.vuejs.org/guide/scoped-css.html#deep-selectors\" target=\"_blank\" rel=\"noopener\">doc</a>.</p>\n<h4>Smarter Watchers</h4>\n<p>Have you ever written code like this:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fetchPostList()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    searchInputValue() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fetchPostList()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Actually, you can simplify it by</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    searchInputValue:&#123;</span><br><span class=\"line\">      handler: <span class=\"string\">'fetchPostList'</span>,</span><br><span class=\"line\">      immediate: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>As the <a href=\"https://vuejs.org/v2/api/#vm-watch\" target=\"_blank\" rel=\"noopener\">doc</a> said:</p>\n<blockquote>\n<p>Passing in immediate: true in the option will trigger the callback immediately with the current value of the expression.</p>\n</blockquote>\n<h4>$attrs and $listeners</h4>\n<p>I don't know if you have used <code>$attrs</code> and <code>$listeners</code> from <code>this</code>. However, I never used those until I met this situation. For example:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base-input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:value</span>=<span class=\"string\">\"value\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">placeholder</span>=<span class=\"string\">\"parentPlaceholder\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">otherAttrs</span>=<span class=\"string\">\"otherAttrs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">input</span>=<span class=\"string\">\"inputCb\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">click</span>=<span class=\"string\">\"clickCb\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">base-input</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> BaseInput = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">'base-input'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    template: `</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"value\"</span> <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"placeholder\"</span>  <span class=\"attr\">:otherAttrs</span>=<span class=\"string\">\"otherAttrs\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"$emit('input',$event)\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"$emit('click',$event)\"</span> @<span class=\"attr\">focus</span>=<span class=\"string\">\"focusCb\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>`,</span></span><br><span class=\"line\"><span class=\"undefined\">    props: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      value: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        type: <span class=\"built_in\">String</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      listeners() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> listeners = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          ...this.$listeners,</span></span><br><span class=\"line\"><span class=\"javascript\">          focus: <span class=\"keyword\">this</span>.focusCb</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> listeners</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      focusCb(event) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'child'</span>, event)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      BaseInput</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      value: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      parentPlaceholder: <span class=\"string\">'parentPlaceholder'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      inputCb(event) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(event)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      clickCb(event) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(event)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>It's obviously tedious to bind every attribute and listener by hand. Actually, this is where <code>$attrs</code> and <code>$listeners</code> will help us. We can write the <code>BaseInput</code> <code>template</code> like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> BaseInput = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'base-input'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;div&gt;&lt;input type=\"text\" :value=\"value\"  v-bind=\"$attrs\" v-on=\"listeners\" /&gt;&lt;/div&gt;`</span>,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    value: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    listeners() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listeners = &#123;</span><br><span class=\"line\">        ...this.$listeners,</span><br><span class=\"line\">        <span class=\"comment\">// move `focus` in to `listeners` instead of adding one more `focus` listener.</span></span><br><span class=\"line\">        focus: <span class=\"keyword\">this</span>.focusCb</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> listeners</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    focusCb(event) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'child'</span>, event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3>Vue-Router</h3>\n<h4>$router and $route</h4>\n<p>Have you ever wonder about the relationship between <code>$router</code> and <code>$route</code>? I give you a hint:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$router.currentRoute === <span class=\"keyword\">this</span>.$route <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<h3>Vuex</h3>\n<h4>Commit Data by One Mutation</h4>\n<p>We can't directly mutate <code>state</code> in Vuex. Instead, we have to <code>commit</code> a <code>mutation</code> to mutate the data. However, it would be tedious to write lots of similar mutations like this:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    updateName(state, data) &#123;</span><br><span class=\"line\">      state.name = data</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updateChildrenCount(state, data) &#123;</span><br><span class=\"line\">      state.children.count = data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// other similar mutations</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>We can write a public mutation to do this like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    replaceProperty(state, &#123; path, data &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> path !== <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      path = path.split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> targetObj = path.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>).reduce(<span class=\"function\">(<span class=\"params\">re, key</span>) =&gt;</span> re[key], state)</span><br><span class=\"line\">      targetObj[path.pop()] = data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Then we can mutate <code>state</code> in anywhere with only one mutation like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">commit(</span><br><span class=\"line\">  <span class=\"string\">'replaceProperty'</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'name'</span>,</span><br><span class=\"line\">    data: name</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">commit(</span><br><span class=\"line\">  <span class=\"string\">'replaceProperty'</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'children.count'</span>,</span><br><span class=\"line\">    data: data</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">commit(</span><br><span class=\"line\">  <span class=\"string\">'replaceProperty'</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'some.other.deep.path.in.state'</span>,</span><br><span class=\"line\">    data: data</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>It would also work for modules!</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/52\"><strong>Original Post</strong></a></p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=7lpemgMhi0k\" target=\"_blank\" rel=\"noopener\">7 Secret Patterns Vue Consultants Don’t Want You to Know - Chris Fritz</a></li>\n<li><a href=\"https://github.com/vuejs/vue-loader/issues/749\">vue-loader/issues/749</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>There are some tricks which can't be found easily in <a href=\"https://vuejs.org/index.html\" target=\"_blank\" rel=\"noopener\">Vue.js homepage</a>. So, for convenient, I summarized them here.</p>\n<h3>Vue</h3>\n<h4>Access Global Variable in Template</h4>\n<p>Have you ever done something like this in lots of components?</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;a @click=&quot;window.open(&apos;...&apos;)&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;App&apos;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      window: window</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>or</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;a @click=&quot;bus.$emit(&apos;some-event&apos;)&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;App&apos;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      bus: bus</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Actually, you don't have to, you can register <code>window</code> or <code>bus</code> in <code>Vue.prototype</code> like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype.window = <span class=\"built_in\">window</span></span><br><span class=\"line\">Vue.prototype.bus = bus</span><br></pre></td></tr></table></figure></p>\n<p>in the <em>main.js</em> or the entry file. Then you can use <code>bus</code> or <code>window</code> in <code>template</code> directly. Also, this usage prevents Vue watching the attributes of <code>bus</code> or <code>window</code> which would bring a waste of performance.</p>\n<h4>Reactive or Not Reactive</h4>\n<p>Always, if we want a data reactive, we have to do something like this:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  newTodoText: <span class=\"string\">''</span>,</span><br><span class=\"line\">  visitCount: <span class=\"number\">0</span>,</span><br><span class=\"line\">  hideCompletedTodos: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  todos: [],</span><br><span class=\"line\">  error: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Set some initial value to adds <strong>all the properties found in its data object</strong> to Vue's reactivity system.</p>\n<p>Things we need to take care about is:</p>\n<ul>\n<li>If we want to add reactive attributes dynamically, we have to use something like <code>Vue.set</code> or <code>this.$set</code>. Otherwise, they might not be reactive.</li>\n<li>If we definitely don't want some data to participate in Vue's reactivity system even we initialize it in <code>data</code>. We can use something like <code>Object.freeze()</code>. For example, freeze a <strong>huge</strong> array to improve <strong>performance</strong>.</li>\n</ul>\n<h4>Scoped Style Won't Work on Dynamically Inserted Elements</h4>\n<p>I always use the <code>&lt;style scoped&gt;</code> tag in <em>.vue</em> files. It is always good except when we want to insert elements dynamically. For example:</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot; ref=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;App&apos;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    this.$refs.app.innerHTML = `&lt;h1 class=&quot;App__title&quot;&gt;App__title&lt;/h1&gt;`</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.App__title &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>color: red</code> won't work on <code>.App__title</code> because of <code>scoped</code>. The actual style is rendered with a unique attribute like:</p>\n<p><img src=\"../images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190126215103.png\" alt=\"\"></p>\n<p>So, how do we solve this? <code>/deep/</code> or <code>&gt;&gt;&gt;</code>.</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">/deep/ .App__title &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>They can be used to override child component style. Here is the <a href=\"https://vue-loader.vuejs.org/guide/scoped-css.html#deep-selectors\" target=\"_blank\" rel=\"noopener\">doc</a>.</p>\n<h4>Smarter Watchers</h4>\n<p>Have you ever written code like this:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fetchPostList()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    searchInputValue() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fetchPostList()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Actually, you can simplify it by</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    searchInputValue:&#123;</span><br><span class=\"line\">      handler: <span class=\"string\">'fetchPostList'</span>,</span><br><span class=\"line\">      immediate: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>As the <a href=\"https://vuejs.org/v2/api/#vm-watch\" target=\"_blank\" rel=\"noopener\">doc</a> said:</p>\n<blockquote>\n<p>Passing in immediate: true in the option will trigger the callback immediately with the current value of the expression.</p>\n</blockquote>\n<h4>$attrs and $listeners</h4>\n<p>I don't know if you have used <code>$attrs</code> and <code>$listeners</code> from <code>this</code>. However, I never used those until I met this situation. For example:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base-input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:value</span>=<span class=\"string\">\"value\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">placeholder</span>=<span class=\"string\">\"parentPlaceholder\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">otherAttrs</span>=<span class=\"string\">\"otherAttrs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">input</span>=<span class=\"string\">\"inputCb\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">click</span>=<span class=\"string\">\"clickCb\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">base-input</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> BaseInput = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">'base-input'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    template: `</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"value\"</span> <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"placeholder\"</span>  <span class=\"attr\">:otherAttrs</span>=<span class=\"string\">\"otherAttrs\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"$emit('input',$event)\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"$emit('click',$event)\"</span> @<span class=\"attr\">focus</span>=<span class=\"string\">\"focusCb\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>`,</span></span><br><span class=\"line\"><span class=\"undefined\">    props: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      value: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        type: <span class=\"built_in\">String</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      listeners() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> listeners = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          ...this.$listeners,</span></span><br><span class=\"line\"><span class=\"javascript\">          focus: <span class=\"keyword\">this</span>.focusCb</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> listeners</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      focusCb(event) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'child'</span>, event)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">window</span>.app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      BaseInput</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    data: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      value: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      parentPlaceholder: <span class=\"string\">'parentPlaceholder'</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      inputCb(event) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(event)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      clickCb(event) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(event)</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>It's obviously tedious to bind every attribute and listener by hand. Actually, this is where <code>$attrs</code> and <code>$listeners</code> will help us. We can write the <code>BaseInput</code> <code>template</code> like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> BaseInput = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'base-input'</span>,</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;div&gt;&lt;input type=\"text\" :value=\"value\"  v-bind=\"$attrs\" v-on=\"listeners\" /&gt;&lt;/div&gt;`</span>,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    value: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    listeners() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> listeners = &#123;</span><br><span class=\"line\">        ...this.$listeners,</span><br><span class=\"line\">        <span class=\"comment\">// move `focus` in to `listeners` instead of adding one more `focus` listener.</span></span><br><span class=\"line\">        focus: <span class=\"keyword\">this</span>.focusCb</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> listeners</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    focusCb(event) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'child'</span>, event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3>Vue-Router</h3>\n<h4>$router and $route</h4>\n<p>Have you ever wonder about the relationship between <code>$router</code> and <code>$route</code>? I give you a hint:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$router.currentRoute === <span class=\"keyword\">this</span>.$route <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<h3>Vuex</h3>\n<h4>Commit Data by One Mutation</h4>\n<p>We can't directly mutate <code>state</code> in Vuex. Instead, we have to <code>commit</code> a <code>mutation</code> to mutate the data. However, it would be tedious to write lots of similar mutations like this:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    updateName(state, data) &#123;</span><br><span class=\"line\">      state.name = data</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updateChildrenCount(state, data) &#123;</span><br><span class=\"line\">      state.children.count = data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// other similar mutations</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>We can write a public mutation to do this like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    replaceProperty(state, &#123; path, data &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> path !== <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      path = path.split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> targetObj = path.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>).reduce(<span class=\"function\">(<span class=\"params\">re, key</span>) =&gt;</span> re[key], state)</span><br><span class=\"line\">      targetObj[path.pop()] = data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Then we can mutate <code>state</code> in anywhere with only one mutation like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">commit(</span><br><span class=\"line\">  <span class=\"string\">'replaceProperty'</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'name'</span>,</span><br><span class=\"line\">    data: name</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">commit(</span><br><span class=\"line\">  <span class=\"string\">'replaceProperty'</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'children.count'</span>,</span><br><span class=\"line\">    data: data</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">commit(</span><br><span class=\"line\">  <span class=\"string\">'replaceProperty'</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'some.other.deep.path.in.state'</span>,</span><br><span class=\"line\">    data: data</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">root</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>It would also work for modules!</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/52\"><strong>Original Post</strong></a></p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=7lpemgMhi0k\" target=\"_blank\" rel=\"noopener\">7 Secret Patterns Vue Consultants Don’t Want You to Know - Chris Fritz</a></li>\n<li><a href=\"https://github.com/vuejs/vue-loader/issues/749\">vue-loader/issues/749</a></li>\n</ul>\n"},{"title":"Use Custom Font on Web","comments":1,"date":"2018-08-04T10:39:01.000Z","_content":"\n## Preface\n\nCSS3 can set custom `font-family` with src pointing to the specific font file. We can use it for some cool font or use it when there is no specific font on the user's computer.\n\nHowever, when I try to use it I find something blocking my way.\n\n## Main\n\nWell, it's about the language problem.\n\nAs we all know, if I try to use some font for Non-English language the font file may not be small enough. For example, I am trying to use some kind of Chinese font and I find the font file. However, the file is more than 5M and I haven't handled the compatibility problem.\n\nSo, I am trying to find a solution about this. And I find [fontmin][fontmin]!\n\n[fontmin][fontmin] will extract the text you files used and generate the corresponding font file which is much smaller than your original font file.\n\nFor example:\n\n```js\nvar Fontmin = require('fontmin')\nvar srcPath = 'src/font/*.ttf'\nvar destPath = 'asset/font'\nvar text = '我说你是人间的四月天；笑响点亮了四面风；轻灵在春的光艳中交舞着变。'\n\n// initial\nvar fontmin = new Fontmin()\n  .src(srcPath) // font file you want to simplify\n  .use(\n    Fontmin.glyph({\n      // extract glyph\n      text: text // all the text you will use\n    })\n  )\n  .use(Fontmin.ttf2eot()) // eot transform plugin\n  .use(Fontmin.ttf2woff()) // woff transform plugin\n  .use(Fontmin.ttf2svg()) // svg transform plugin\n  .use(Fontmin.css()) // css generation plugin\n  .dest(destPath) // output the simplified font file\n\n// run\nfontmin.run(function(err, files, stream) {\n  if (err) {\n    console.error(err)\n  }\n\n  console.log('done')\n})\n```\n\nIn my case, I need to extract text from some file. So, I do it like this:\n\n```js\nvar text\nvar fs = require('fs')\nfs.readFile('data.js', 'utf8', function(er, data) {\n  if (er) {\n    return console.log(er)\n  }\n  text = data\n\n  var Fontmin = require('fontmin')\n  var srcPath = 'font/*.ttf'\n  var destPath = 'font/'\n  // initial\n  var fontmin = new Fontmin()\n    .src(srcPath) // font file you want to simplify\n    .use(\n      Fontmin.glyph({\n        // extract glyph\n        text: text // all the text you will use\n      })\n    )\n    .use(Fontmin.ttf2eot()) // eot transform plugin\n    .use(Fontmin.ttf2woff()) // woff transform plugin\n    .use(Fontmin.ttf2svg()) // svg transform plugin\n    .use(Fontmin.css()) // css generation plugin\n    .dest(destPath) // output the simplified font file\n\n  // run\n  fontmin.run(function(err, files, stream) {\n    if (err) {\n      console.error(err)\n    }\n\n    console.log('done')\n  })\n})\n```\n\nAnd here is what I got:\n\n![截图20180804204452.png](../images/截图20180804204452.png)\n\nwhich is much smaller than origin Microsoft YaHei UI Light.ttf(**11M**).\n\nHowever, here is a little tip I want to give you.\n\nAfter you run the script above, **the original font file _\\*.ttf_ has been replaced.** So, you had better back up the original font file before you run the script. Then if you need to run the script again, you should use the original font file, not the file which has been updated.\n\n[fontmin]: https://github.com/ecomfe/fontmin/\n","source":"_posts/use-custom-font-on-web.md","raw":"---\ntitle: Use Custom Font on Web\ntags:\n  - font\n  - fontmin\ncategories: css\ncomments: true\ndate: 2018-08-04 18:39:01\n---\n\n## Preface\n\nCSS3 can set custom `font-family` with src pointing to the specific font file. We can use it for some cool font or use it when there is no specific font on the user's computer.\n\nHowever, when I try to use it I find something blocking my way.\n\n## Main\n\nWell, it's about the language problem.\n\nAs we all know, if I try to use some font for Non-English language the font file may not be small enough. For example, I am trying to use some kind of Chinese font and I find the font file. However, the file is more than 5M and I haven't handled the compatibility problem.\n\nSo, I am trying to find a solution about this. And I find [fontmin][fontmin]!\n\n[fontmin][fontmin] will extract the text you files used and generate the corresponding font file which is much smaller than your original font file.\n\nFor example:\n\n```js\nvar Fontmin = require('fontmin')\nvar srcPath = 'src/font/*.ttf'\nvar destPath = 'asset/font'\nvar text = '我说你是人间的四月天；笑响点亮了四面风；轻灵在春的光艳中交舞着变。'\n\n// initial\nvar fontmin = new Fontmin()\n  .src(srcPath) // font file you want to simplify\n  .use(\n    Fontmin.glyph({\n      // extract glyph\n      text: text // all the text you will use\n    })\n  )\n  .use(Fontmin.ttf2eot()) // eot transform plugin\n  .use(Fontmin.ttf2woff()) // woff transform plugin\n  .use(Fontmin.ttf2svg()) // svg transform plugin\n  .use(Fontmin.css()) // css generation plugin\n  .dest(destPath) // output the simplified font file\n\n// run\nfontmin.run(function(err, files, stream) {\n  if (err) {\n    console.error(err)\n  }\n\n  console.log('done')\n})\n```\n\nIn my case, I need to extract text from some file. So, I do it like this:\n\n```js\nvar text\nvar fs = require('fs')\nfs.readFile('data.js', 'utf8', function(er, data) {\n  if (er) {\n    return console.log(er)\n  }\n  text = data\n\n  var Fontmin = require('fontmin')\n  var srcPath = 'font/*.ttf'\n  var destPath = 'font/'\n  // initial\n  var fontmin = new Fontmin()\n    .src(srcPath) // font file you want to simplify\n    .use(\n      Fontmin.glyph({\n        // extract glyph\n        text: text // all the text you will use\n      })\n    )\n    .use(Fontmin.ttf2eot()) // eot transform plugin\n    .use(Fontmin.ttf2woff()) // woff transform plugin\n    .use(Fontmin.ttf2svg()) // svg transform plugin\n    .use(Fontmin.css()) // css generation plugin\n    .dest(destPath) // output the simplified font file\n\n  // run\n  fontmin.run(function(err, files, stream) {\n    if (err) {\n      console.error(err)\n    }\n\n    console.log('done')\n  })\n})\n```\n\nAnd here is what I got:\n\n![截图20180804204452.png](../images/截图20180804204452.png)\n\nwhich is much smaller than origin Microsoft YaHei UI Light.ttf(**11M**).\n\nHowever, here is a little tip I want to give you.\n\nAfter you run the script above, **the original font file _\\*.ttf_ has been replaced.** So, you had better back up the original font file before you run the script. Then if you need to run the script again, you should use the original font file, not the file which has been updated.\n\n[fontmin]: https://github.com/ecomfe/fontmin/\n","slug":"use-custom-font-on-web","published":1,"updated":"2019-02-01T11:38:56.795Z","layout":"post","photos":[],"link":"","_id":"cjv0yvisf002qborpf23f7m3a","content":"<h2>Preface</h2>\n<p>CSS3 can set custom <code>font-family</code> with src pointing to the specific font file. We can use it for some cool font or use it when there is no specific font on the user's computer.</p>\n<p>However, when I try to use it I find something blocking my way.</p>\n<h2>Main</h2>\n<p>Well, it's about the language problem.</p>\n<p>As we all know, if I try to use some font for Non-English language the font file may not be small enough. For example, I am trying to use some kind of Chinese font and I find the font file. However, the file is more than 5M and I haven't handled the compatibility problem.</p>\n<p>So, I am trying to find a solution about this. And I find <a href=\"https://github.com/ecomfe/fontmin/\">fontmin</a>!</p>\n<p><a href=\"https://github.com/ecomfe/fontmin/\">fontmin</a> will extract the text you files used and generate the corresponding font file which is much smaller than your original font file.</p>\n<p>For example:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Fontmin = <span class=\"built_in\">require</span>(<span class=\"string\">'fontmin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> srcPath = <span class=\"string\">'src/font/*.ttf'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> destPath = <span class=\"string\">'asset/font'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'我说你是人间的四月天；笑响点亮了四面风；轻灵在春的光艳中交舞着变。'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// initial</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fontmin = <span class=\"keyword\">new</span> Fontmin()</span><br><span class=\"line\">  .src(srcPath) <span class=\"comment\">// font file you want to simplify</span></span><br><span class=\"line\">  .use(</span><br><span class=\"line\">    Fontmin.glyph(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// extract glyph</span></span><br><span class=\"line\">      text: text <span class=\"comment\">// all the text you will use</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .use(Fontmin.ttf2eot()) <span class=\"comment\">// eot transform plugin</span></span><br><span class=\"line\">  .use(Fontmin.ttf2woff()) <span class=\"comment\">// woff transform plugin</span></span><br><span class=\"line\">  .use(Fontmin.ttf2svg()) <span class=\"comment\">// svg transform plugin</span></span><br><span class=\"line\">  .use(Fontmin.css()) <span class=\"comment\">// css generation plugin</span></span><br><span class=\"line\">  .dest(destPath) <span class=\"comment\">// output the simplified font file</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// run</span></span><br><span class=\"line\">fontmin.run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, files, stream</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>In my case, I need to extract text from some file. So, I do it like this:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">fs.readFile(<span class=\"string\">'data.js'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">er, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (er) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(er)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  text = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Fontmin = <span class=\"built_in\">require</span>(<span class=\"string\">'fontmin'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> srcPath = <span class=\"string\">'font/*.ttf'</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> destPath = <span class=\"string\">'font/'</span></span><br><span class=\"line\">  <span class=\"comment\">// initial</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fontmin = <span class=\"keyword\">new</span> Fontmin()</span><br><span class=\"line\">    .src(srcPath) <span class=\"comment\">// font file you want to simplify</span></span><br><span class=\"line\">    .use(</span><br><span class=\"line\">      Fontmin.glyph(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// extract glyph</span></span><br><span class=\"line\">        text: text <span class=\"comment\">// all the text you will use</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .use(Fontmin.ttf2eot()) <span class=\"comment\">// eot transform plugin</span></span><br><span class=\"line\">    .use(Fontmin.ttf2woff()) <span class=\"comment\">// woff transform plugin</span></span><br><span class=\"line\">    .use(Fontmin.ttf2svg()) <span class=\"comment\">// svg transform plugin</span></span><br><span class=\"line\">    .use(Fontmin.css()) <span class=\"comment\">// css generation plugin</span></span><br><span class=\"line\">    .dest(destPath) <span class=\"comment\">// output the simplified font file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// run</span></span><br><span class=\"line\">  fontmin.run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, files, stream</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>And here is what I got:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180804204452.png\" alt=\"截图20180804204452.png\"></p>\n<p>which is much smaller than origin Microsoft YaHei UI Light.ttf(<strong>11M</strong>).</p>\n<p>However, here is a little tip I want to give you.</p>\n<p>After you run the script above, <strong>the original font file <em>*.ttf</em> has been replaced.</strong> So, you had better back up the original font file before you run the script. Then if you need to run the script again, you should use the original font file, not the file which has been updated.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>CSS3 can set custom <code>font-family</code> with src pointing to the specific font file. We can use it for some cool font or use it when there is no specific font on the user's computer.</p>\n<p>However, when I try to use it I find something blocking my way.</p>\n<h2>Main</h2>\n<p>Well, it's about the language problem.</p>\n<p>As we all know, if I try to use some font for Non-English language the font file may not be small enough. For example, I am trying to use some kind of Chinese font and I find the font file. However, the file is more than 5M and I haven't handled the compatibility problem.</p>\n<p>So, I am trying to find a solution about this. And I find <a href=\"https://github.com/ecomfe/fontmin/\">fontmin</a>!</p>\n<p><a href=\"https://github.com/ecomfe/fontmin/\">fontmin</a> will extract the text you files used and generate the corresponding font file which is much smaller than your original font file.</p>\n<p>For example:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Fontmin = <span class=\"built_in\">require</span>(<span class=\"string\">'fontmin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> srcPath = <span class=\"string\">'src/font/*.ttf'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> destPath = <span class=\"string\">'asset/font'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'我说你是人间的四月天；笑响点亮了四面风；轻灵在春的光艳中交舞着变。'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// initial</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fontmin = <span class=\"keyword\">new</span> Fontmin()</span><br><span class=\"line\">  .src(srcPath) <span class=\"comment\">// font file you want to simplify</span></span><br><span class=\"line\">  .use(</span><br><span class=\"line\">    Fontmin.glyph(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// extract glyph</span></span><br><span class=\"line\">      text: text <span class=\"comment\">// all the text you will use</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .use(Fontmin.ttf2eot()) <span class=\"comment\">// eot transform plugin</span></span><br><span class=\"line\">  .use(Fontmin.ttf2woff()) <span class=\"comment\">// woff transform plugin</span></span><br><span class=\"line\">  .use(Fontmin.ttf2svg()) <span class=\"comment\">// svg transform plugin</span></span><br><span class=\"line\">  .use(Fontmin.css()) <span class=\"comment\">// css generation plugin</span></span><br><span class=\"line\">  .dest(destPath) <span class=\"comment\">// output the simplified font file</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// run</span></span><br><span class=\"line\">fontmin.run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, files, stream</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>In my case, I need to extract text from some file. So, I do it like this:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">fs.readFile(<span class=\"string\">'data.js'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">er, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (er) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(er)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  text = data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> Fontmin = <span class=\"built_in\">require</span>(<span class=\"string\">'fontmin'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> srcPath = <span class=\"string\">'font/*.ttf'</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> destPath = <span class=\"string\">'font/'</span></span><br><span class=\"line\">  <span class=\"comment\">// initial</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fontmin = <span class=\"keyword\">new</span> Fontmin()</span><br><span class=\"line\">    .src(srcPath) <span class=\"comment\">// font file you want to simplify</span></span><br><span class=\"line\">    .use(</span><br><span class=\"line\">      Fontmin.glyph(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// extract glyph</span></span><br><span class=\"line\">        text: text <span class=\"comment\">// all the text you will use</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .use(Fontmin.ttf2eot()) <span class=\"comment\">// eot transform plugin</span></span><br><span class=\"line\">    .use(Fontmin.ttf2woff()) <span class=\"comment\">// woff transform plugin</span></span><br><span class=\"line\">    .use(Fontmin.ttf2svg()) <span class=\"comment\">// svg transform plugin</span></span><br><span class=\"line\">    .use(Fontmin.css()) <span class=\"comment\">// css generation plugin</span></span><br><span class=\"line\">    .dest(destPath) <span class=\"comment\">// output the simplified font file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// run</span></span><br><span class=\"line\">  fontmin.run(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, files, stream</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>And here is what I got:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180804204452.png\" alt=\"截图20180804204452.png\"></p>\n<p>which is much smaller than origin Microsoft YaHei UI Light.ttf(<strong>11M</strong>).</p>\n<p>However, here is a little tip I want to give you.</p>\n<p>After you run the script above, <strong>the original font file <em>*.ttf</em> has been replaced.</strong> So, you had better back up the original font file before you run the script. Then if you need to run the script again, you should use the original font file, not the file which has been updated.</p>\n"},{"title":"Vue Form Input Bindings Fail?","comments":1,"date":"2018-10-04T12:36:32.000Z","_content":"\n## Preface\n\nWhen I was using form validate in Vue, I found sometimes vue doesn't render data which was modified by me. I even thought it was a bug. Anyway, let's take a look.\n\n## Main\n\nHere is a simple demo:\n\n```css\nhtml,\nbody {\n  width: 100%;\n  height: 100%;\n}\n\n.app {\n  width: 100%;\n  height: 100%;\n}\n```\n\n```html\n<div class=\"app\" id=\"app\">\n  <form>\n    <input\n      type=\"text\"\n      id=\"positive-num\"\n      :value.trim=\"positiveNum\"\n      @input=\"oldValidate\"\n      :placeholder=\"positiveNumTip\"\n    />\n    <p>{{positiveNumResTip}}{{positiveNum}}</p>\n  </form>\n</div>\n```\n\n```js\nlet app = new Vue({\n  el: '#app',\n  data: {\n    positiveNumTip: 'please enter a positive num',\n    positiveNum: '',\n    positiveNumResTip: 'validated and modified result: '\n  },\n  methods: {\n    oldValidate(event) {\n      let value = event.target.value\n      let reg = /^[\\d]+[.]?[\\d]*$/\n      let newVal = Number.parseFloat(value)\n      if (!value.match(reg)) {\n        if (!isNaN(newVal) || newVal > 0) {\n          this.positiveNum = newVal\n        } else {\n          this.positiveNum = 1\n        }\n      } else {\n        this.positiveNum = value\n      }\n    }\n  }\n})\n```\n\nWhen I was pressing _dddddddddd_, what did I got?\n\n![截图20181004204524.png](../images/截图20181004204524.png)\n\nThe first letter was replaced to 1 but the others not. And the most important is the result I got is always 1 which means `this.positiveNum` is 1 while the value in the `input` is not 1.\n\nWhy?\n\nI even thought it was a bug until one day I met a similar problem which was solved in SO.\n\nThe key is the Lifecycle. The guide mentions it before but I didn't understand it until now. Let's see the picture again:\n\n![截图20181004205221.png](../images/截图20181004205221.png)\n\nSee?\n\nThe first time we change `positiveNum` to 1 and then we always change `positiveNum` to 1. So, vue wouldn't re-render because the data doesn't change. So, the connection between `input` and `positiveNum` was cut off until `positiveNum` isn't equal to 1.\n\nWe can add `updated` to see how many times data has changed:\n\n```js\nlet app = new Vue({\n  el: '#app',\n  data: {\n    positiveNumTip: 'please enter a positive num',\n    positiveNum: '',\n    positiveNumResTip: 'validated and modified result: '\n  },\n  methods: {\n    oldValidate(event) {\n      let value = event.target.value\n      let reg = /^[\\d]+[.]?[\\d]*$/\n      let newVal = Number.parseFloat(value)\n      if (!value.match(reg)) {\n        if (!isNaN(newVal) || newVal > 0) {\n          this.positiveNum = newVal\n        } else {\n          this.positiveNum = 1\n        }\n      } else {\n        this.positiveNum = value\n      }\n    }\n  },\n  updated() {\n    console.log('data updated') //only triggered once\n  }\n})\n```\n\nAs explained before, you can only see `'data updated'` once.\n\nSo, how can we solved this problem?\n\nThe key is still the Lifecycle. Vue wouldn't re-render because data doesn't change. So, we can update data after data has been changed and rendered. Understood? See code below:\n\n```html\n<div class=\"app\" id=\"app\">\n  <form>\n    <input\n      type=\"text\"\n      id=\"positive-num\"\n      :value.trim=\"positiveNum\"\n      @input=\"newValidate\"\n      :placeholder=\"positiveNumTip\"\n    />\n    <p>{{positiveNumResTip}}{{positiveNum}}</p>\n  </form>\n</div>\n```\n\n```js\nlet app = new Vue({\n  el: '#app',\n  data: {\n    positiveNumTip: 'please enter a positive num',\n    positiveNum: '',\n    positiveNumResTip: 'validated and modified result: '\n  },\n  methods: {\n    oldValidate(event) {\n      let value = event.target.value\n      let reg = /^[\\d]+[.]?[\\d]*$/\n      let newVal = Number.parseFloat(value)\n      if (!value.match(reg)) {\n        if (!isNaN(newVal) || newVal > 0) {\n          this.positiveNum = newVal\n        } else {\n          this.positiveNum = 1\n        }\n      } else {\n        this.positiveNum = value\n      }\n    },\n    newValidate(event) {\n      let value = event.target.value\n      let reg = /^[\\d]+[.]?[\\d]*$/\n      this.positiveNum = value\n      this.$nextTick(() => {\n        if (!this.positiveNum.match(reg)) {\n          let newVal = Number.parseFloat(this.positiveNum)\n          if (!isNaN(newVal) || newVal > 0) {\n            this.positiveNum = newVal\n          } else {\n            this.positiveNum = '' //for better use I changed the wrong value to ''\n          }\n        }\n      })\n    }\n  },\n  updated() {\n    console.log('data updated')\n  }\n})\n```\n\nSee? I move the origin logic to the `this.$nextTick(callback)`. Every time you press the wrong button, it will pass the wrong value to `positiveNum` and will be corrected in `this.$nextTick(callback)` which will make the logic run correctly. Also, you can see the updated log at the console.\n\n## Ending\n\n## Reference\n\n- [change child-component checked state from parent-component synchronously fail](https://stackoverflow.com/questions/49920790/change-child-component-checked-state-from-parent-component-synchronously-fail)\n","source":"_posts/vue-form-input-bindings-fail.md","raw":"---\ntitle: Vue Form Input Bindings Fail?\ncategories: frame\ntags:\n  - vue\ncomments: true\ndate: 2018-10-04 20:36:32\n---\n\n## Preface\n\nWhen I was using form validate in Vue, I found sometimes vue doesn't render data which was modified by me. I even thought it was a bug. Anyway, let's take a look.\n\n## Main\n\nHere is a simple demo:\n\n```css\nhtml,\nbody {\n  width: 100%;\n  height: 100%;\n}\n\n.app {\n  width: 100%;\n  height: 100%;\n}\n```\n\n```html\n<div class=\"app\" id=\"app\">\n  <form>\n    <input\n      type=\"text\"\n      id=\"positive-num\"\n      :value.trim=\"positiveNum\"\n      @input=\"oldValidate\"\n      :placeholder=\"positiveNumTip\"\n    />\n    <p>{{positiveNumResTip}}{{positiveNum}}</p>\n  </form>\n</div>\n```\n\n```js\nlet app = new Vue({\n  el: '#app',\n  data: {\n    positiveNumTip: 'please enter a positive num',\n    positiveNum: '',\n    positiveNumResTip: 'validated and modified result: '\n  },\n  methods: {\n    oldValidate(event) {\n      let value = event.target.value\n      let reg = /^[\\d]+[.]?[\\d]*$/\n      let newVal = Number.parseFloat(value)\n      if (!value.match(reg)) {\n        if (!isNaN(newVal) || newVal > 0) {\n          this.positiveNum = newVal\n        } else {\n          this.positiveNum = 1\n        }\n      } else {\n        this.positiveNum = value\n      }\n    }\n  }\n})\n```\n\nWhen I was pressing _dddddddddd_, what did I got?\n\n![截图20181004204524.png](../images/截图20181004204524.png)\n\nThe first letter was replaced to 1 but the others not. And the most important is the result I got is always 1 which means `this.positiveNum` is 1 while the value in the `input` is not 1.\n\nWhy?\n\nI even thought it was a bug until one day I met a similar problem which was solved in SO.\n\nThe key is the Lifecycle. The guide mentions it before but I didn't understand it until now. Let's see the picture again:\n\n![截图20181004205221.png](../images/截图20181004205221.png)\n\nSee?\n\nThe first time we change `positiveNum` to 1 and then we always change `positiveNum` to 1. So, vue wouldn't re-render because the data doesn't change. So, the connection between `input` and `positiveNum` was cut off until `positiveNum` isn't equal to 1.\n\nWe can add `updated` to see how many times data has changed:\n\n```js\nlet app = new Vue({\n  el: '#app',\n  data: {\n    positiveNumTip: 'please enter a positive num',\n    positiveNum: '',\n    positiveNumResTip: 'validated and modified result: '\n  },\n  methods: {\n    oldValidate(event) {\n      let value = event.target.value\n      let reg = /^[\\d]+[.]?[\\d]*$/\n      let newVal = Number.parseFloat(value)\n      if (!value.match(reg)) {\n        if (!isNaN(newVal) || newVal > 0) {\n          this.positiveNum = newVal\n        } else {\n          this.positiveNum = 1\n        }\n      } else {\n        this.positiveNum = value\n      }\n    }\n  },\n  updated() {\n    console.log('data updated') //only triggered once\n  }\n})\n```\n\nAs explained before, you can only see `'data updated'` once.\n\nSo, how can we solved this problem?\n\nThe key is still the Lifecycle. Vue wouldn't re-render because data doesn't change. So, we can update data after data has been changed and rendered. Understood? See code below:\n\n```html\n<div class=\"app\" id=\"app\">\n  <form>\n    <input\n      type=\"text\"\n      id=\"positive-num\"\n      :value.trim=\"positiveNum\"\n      @input=\"newValidate\"\n      :placeholder=\"positiveNumTip\"\n    />\n    <p>{{positiveNumResTip}}{{positiveNum}}</p>\n  </form>\n</div>\n```\n\n```js\nlet app = new Vue({\n  el: '#app',\n  data: {\n    positiveNumTip: 'please enter a positive num',\n    positiveNum: '',\n    positiveNumResTip: 'validated and modified result: '\n  },\n  methods: {\n    oldValidate(event) {\n      let value = event.target.value\n      let reg = /^[\\d]+[.]?[\\d]*$/\n      let newVal = Number.parseFloat(value)\n      if (!value.match(reg)) {\n        if (!isNaN(newVal) || newVal > 0) {\n          this.positiveNum = newVal\n        } else {\n          this.positiveNum = 1\n        }\n      } else {\n        this.positiveNum = value\n      }\n    },\n    newValidate(event) {\n      let value = event.target.value\n      let reg = /^[\\d]+[.]?[\\d]*$/\n      this.positiveNum = value\n      this.$nextTick(() => {\n        if (!this.positiveNum.match(reg)) {\n          let newVal = Number.parseFloat(this.positiveNum)\n          if (!isNaN(newVal) || newVal > 0) {\n            this.positiveNum = newVal\n          } else {\n            this.positiveNum = '' //for better use I changed the wrong value to ''\n          }\n        }\n      })\n    }\n  },\n  updated() {\n    console.log('data updated')\n  }\n})\n```\n\nSee? I move the origin logic to the `this.$nextTick(callback)`. Every time you press the wrong button, it will pass the wrong value to `positiveNum` and will be corrected in `this.$nextTick(callback)` which will make the logic run correctly. Also, you can see the updated log at the console.\n\n## Ending\n\n## Reference\n\n- [change child-component checked state from parent-component synchronously fail](https://stackoverflow.com/questions/49920790/change-child-component-checked-state-from-parent-component-synchronously-fail)\n","slug":"vue-form-input-bindings-fail","published":1,"updated":"2018-12-07T14:08:57.883Z","layout":"post","photos":[],"link":"","_id":"cjv0yvisk002tborpv6a45bn7","content":"<h2>Preface</h2>\n<p>When I was using form validate in Vue, I found sometimes vue doesn't render data which was modified by me. I even thought it was a bug. Anyway, let's take a look.</p>\n<h2>Main</h2>\n<p>Here is a simple demo:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.app</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">\"positive-num\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:value.trim</span>=<span class=\"string\">\"positiveNum\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">input</span>=<span class=\"string\">\"oldValidate\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"positiveNumTip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;positiveNumResTip&#125;&#125;&#123;&#123;positiveNum&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    positiveNumTip: <span class=\"string\">'please enter a positive num'</span>,</span><br><span class=\"line\">    positiveNum: <span class=\"string\">''</span>,</span><br><span class=\"line\">    positiveNumResTip: <span class=\"string\">'validated and modified result: '</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    oldValidate(event) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value = event.target.value</span><br><span class=\"line\">      <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^[\\d]+[.]?[\\d]*$/</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> newVal = <span class=\"built_in\">Number</span>.parseFloat(value)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!value.match(reg)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">isNaN</span>(newVal) || newVal &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.positiveNum = newVal</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.positiveNum = <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.positiveNum = value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>When I was pressing <em>dddddddddd</em>, what did I got?</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181004204524.png\" alt=\"截图20181004204524.png\"></p>\n<p>The first letter was replaced to 1 but the others not. And the most important is the result I got is always 1 which means <code>this.positiveNum</code> is 1 while the value in the <code>input</code> is not 1.</p>\n<p>Why?</p>\n<p>I even thought it was a bug until one day I met a similar problem which was solved in SO.</p>\n<p>The key is the Lifecycle. The guide mentions it before but I didn't understand it until now. Let's see the picture again:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181004205221.png\" alt=\"截图20181004205221.png\"></p>\n<p>See?</p>\n<p>The first time we change <code>positiveNum</code> to 1 and then we always change <code>positiveNum</code> to 1. So, vue wouldn't re-render because the data doesn't change. So, the connection between <code>input</code> and <code>positiveNum</code> was cut off until <code>positiveNum</code> isn't equal to 1.</p>\n<p>We can add <code>updated</code> to see how many times data has changed:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    positiveNumTip: <span class=\"string\">'please enter a positive num'</span>,</span><br><span class=\"line\">    positiveNum: <span class=\"string\">''</span>,</span><br><span class=\"line\">    positiveNumResTip: <span class=\"string\">'validated and modified result: '</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    oldValidate(event) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value = event.target.value</span><br><span class=\"line\">      <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^[\\d]+[.]?[\\d]*$/</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> newVal = <span class=\"built_in\">Number</span>.parseFloat(value)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!value.match(reg)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">isNaN</span>(newVal) || newVal &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.positiveNum = newVal</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.positiveNum = <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.positiveNum = value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  updated() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'data updated'</span>) <span class=\"comment\">//only triggered once</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>As explained before, you can only see <code>'data updated'</code> once.</p>\n<p>So, how can we solved this problem?</p>\n<p>The key is still the Lifecycle. Vue wouldn't re-render because data doesn't change. So, we can update data after data has been changed and rendered. Understood? See code below:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">\"positive-num\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:value.trim</span>=<span class=\"string\">\"positiveNum\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">input</span>=<span class=\"string\">\"newValidate\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"positiveNumTip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;positiveNumResTip&#125;&#125;&#123;&#123;positiveNum&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    positiveNumTip: <span class=\"string\">'please enter a positive num'</span>,</span><br><span class=\"line\">    positiveNum: <span class=\"string\">''</span>,</span><br><span class=\"line\">    positiveNumResTip: <span class=\"string\">'validated and modified result: '</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    oldValidate(event) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value = event.target.value</span><br><span class=\"line\">      <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^[\\d]+[.]?[\\d]*$/</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> newVal = <span class=\"built_in\">Number</span>.parseFloat(value)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!value.match(reg)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">isNaN</span>(newVal) || newVal &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.positiveNum = newVal</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.positiveNum = <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.positiveNum = value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    newValidate(event) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value = event.target.value</span><br><span class=\"line\">      <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^[\\d]+[.]?[\\d]*$/</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.positiveNum = value</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.positiveNum.match(reg)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> newVal = <span class=\"built_in\">Number</span>.parseFloat(<span class=\"keyword\">this</span>.positiveNum)</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!<span class=\"built_in\">isNaN</span>(newVal) || newVal &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.positiveNum = newVal</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.positiveNum = <span class=\"string\">''</span> <span class=\"comment\">//for better use I changed the wrong value to ''</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  updated() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'data updated'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>See? I move the origin logic to the <code>this.$nextTick(callback)</code>. Every time you press the wrong button, it will pass the wrong value to <code>positiveNum</code> and will be corrected in <code>this.$nextTick(callback)</code> which will make the logic run correctly. Also, you can see the updated log at the console.</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/49920790/change-child-component-checked-state-from-parent-component-synchronously-fail\" target=\"_blank\" rel=\"noopener\">change child-component checked state from parent-component synchronously fail</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>When I was using form validate in Vue, I found sometimes vue doesn't render data which was modified by me. I even thought it was a bug. Anyway, let's take a look.</p>\n<h2>Main</h2>\n<p>Here is a simple demo:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.app</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">\"positive-num\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:value.trim</span>=<span class=\"string\">\"positiveNum\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">input</span>=<span class=\"string\">\"oldValidate\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"positiveNumTip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;positiveNumResTip&#125;&#125;&#123;&#123;positiveNum&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    positiveNumTip: <span class=\"string\">'please enter a positive num'</span>,</span><br><span class=\"line\">    positiveNum: <span class=\"string\">''</span>,</span><br><span class=\"line\">    positiveNumResTip: <span class=\"string\">'validated and modified result: '</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    oldValidate(event) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value = event.target.value</span><br><span class=\"line\">      <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^[\\d]+[.]?[\\d]*$/</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> newVal = <span class=\"built_in\">Number</span>.parseFloat(value)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!value.match(reg)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">isNaN</span>(newVal) || newVal &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.positiveNum = newVal</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.positiveNum = <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.positiveNum = value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>When I was pressing <em>dddddddddd</em>, what did I got?</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181004204524.png\" alt=\"截图20181004204524.png\"></p>\n<p>The first letter was replaced to 1 but the others not. And the most important is the result I got is always 1 which means <code>this.positiveNum</code> is 1 while the value in the <code>input</code> is not 1.</p>\n<p>Why?</p>\n<p>I even thought it was a bug until one day I met a similar problem which was solved in SO.</p>\n<p>The key is the Lifecycle. The guide mentions it before but I didn't understand it until now. Let's see the picture again:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181004205221.png\" alt=\"截图20181004205221.png\"></p>\n<p>See?</p>\n<p>The first time we change <code>positiveNum</code> to 1 and then we always change <code>positiveNum</code> to 1. So, vue wouldn't re-render because the data doesn't change. So, the connection between <code>input</code> and <code>positiveNum</code> was cut off until <code>positiveNum</code> isn't equal to 1.</p>\n<p>We can add <code>updated</code> to see how many times data has changed:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    positiveNumTip: <span class=\"string\">'please enter a positive num'</span>,</span><br><span class=\"line\">    positiveNum: <span class=\"string\">''</span>,</span><br><span class=\"line\">    positiveNumResTip: <span class=\"string\">'validated and modified result: '</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    oldValidate(event) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value = event.target.value</span><br><span class=\"line\">      <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^[\\d]+[.]?[\\d]*$/</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> newVal = <span class=\"built_in\">Number</span>.parseFloat(value)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!value.match(reg)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">isNaN</span>(newVal) || newVal &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.positiveNum = newVal</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.positiveNum = <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.positiveNum = value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  updated() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'data updated'</span>) <span class=\"comment\">//only triggered once</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>As explained before, you can only see <code>'data updated'</code> once.</p>\n<p>So, how can we solved this problem?</p>\n<p>The key is still the Lifecycle. Vue wouldn't re-render because data doesn't change. So, we can update data after data has been changed and rendered. Understood? See code below:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">id</span>=<span class=\"string\">\"positive-num\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:value.trim</span>=<span class=\"string\">\"positiveNum\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">input</span>=<span class=\"string\">\"newValidate\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:placeholder</span>=<span class=\"string\">\"positiveNumTip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;positiveNumResTip&#125;&#125;&#123;&#123;positiveNum&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    positiveNumTip: <span class=\"string\">'please enter a positive num'</span>,</span><br><span class=\"line\">    positiveNum: <span class=\"string\">''</span>,</span><br><span class=\"line\">    positiveNumResTip: <span class=\"string\">'validated and modified result: '</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    oldValidate(event) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value = event.target.value</span><br><span class=\"line\">      <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^[\\d]+[.]?[\\d]*$/</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> newVal = <span class=\"built_in\">Number</span>.parseFloat(value)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!value.match(reg)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">isNaN</span>(newVal) || newVal &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.positiveNum = newVal</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.positiveNum = <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.positiveNum = value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    newValidate(event) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value = event.target.value</span><br><span class=\"line\">      <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/^[\\d]+[.]?[\\d]*$/</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.positiveNum = value</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.positiveNum.match(reg)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> newVal = <span class=\"built_in\">Number</span>.parseFloat(<span class=\"keyword\">this</span>.positiveNum)</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!<span class=\"built_in\">isNaN</span>(newVal) || newVal &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.positiveNum = newVal</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.positiveNum = <span class=\"string\">''</span> <span class=\"comment\">//for better use I changed the wrong value to ''</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  updated() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'data updated'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>See? I move the origin logic to the <code>this.$nextTick(callback)</code>. Every time you press the wrong button, it will pass the wrong value to <code>positiveNum</code> and will be corrected in <code>this.$nextTick(callback)</code> which will make the logic run correctly. Also, you can see the updated log at the console.</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/49920790/change-child-component-checked-state-from-parent-component-synchronously-fail\" target=\"_blank\" rel=\"noopener\">change child-component checked state from parent-component synchronously fail</a></li>\n</ul>\n"},{"title":"Web Performance Optimization Summary in 2019.3","comments":1,"date":"2019-03-25T13:02:15.000Z","_content":"\n## Where to Learn Web Performance Optimization(WPO)\n\nAbout one month ago, I started to learn and summarize the knowledge about web performance optimization. However, beyond my expectations, there is too many things need to know. After thinking, I chose [developers.google.com][developers.google.com] to start to learn. And other resources are listed [**here**](https://github.com/xianshenglu/blog/issues/70) with this article.\n\nThe reasons that I chose [developers.google.com][developers.google.com] can be listed below:\n\n- Articles will update when some methods or workarounds is outdated. This is extremely important for me to check it out when I need to update my knowledge about WPO. Also, it lets me know that I am learning something which can be tested and applied right now. For me, a blog is not better than a real-time updated document.\n- All the knowledge about WPO was listed systematically which is easy to understand, remember and use.\n\n## Summary About WPO\n\nThere are too many things for me to remember or test according to the doc. So, I am trying to summarize and abstract to make it simple to deduce and remember. Well, let's start with the questions.\n\n### What Is the Target of WPO\n\nTo make the page load as quickly as possible, also in a progressive way if possible.\n\n### How Can We Do That\n\nGenerally, we can analyze from the following aspects.\n\n<!-- #### Loading Performance -->\n\n- Use as much **cache** as possible.\n\n  - For a better control of cache in the front end, we may need to learn something about `PWA` or `Service Worker`.\n  - Or we might need some knowledge about offline storage like `Indexed DB`, `Web SQL`, `localStorage` and so on.\n\n- For those content that we can't use the cache, we need to take other measures.\n\n  - Send the content **as closely as possible** which\n\n    - may need the help of `CDN`.\n\n  - Send **as little content as possible** which\n\n    - needs `code compression`, `GZIP`, `code split`, `tree shake`, `image compression` and remove or replace the bigger resources with smaller ones if possible.\n\n  - Load the resource **in a more efficient way** which\n\n    - needs to put `script` at the bottom of `body`\n\n    - or use the `async` according to the situation\n\n<!-- #### Rendering Performance -->\n\n- **Render the page in a more efficient way** which requires more efficient practice in our daily code. For examples,\n\n  - Use `requestAnimationFrame` to change the UI instead of `setTimeout` or `setInterval`.\n\n  - Implement lazy load with `Intersection Observer` instead of calculating the position of each target element by `getBoundingClientRect`.\n\n  - Stick to compositor-only properties like `transform` and `opacity` to avoid re-layout and re-paint.\n\n  - Reduce the complexity of selectors.\n\n  - ....\n\n### How Can We Prove That Our Optimization Is Work\n\nWe need some tools like below to collect the result each time we did an optimization.\n\n- [Lighthouse](https://developers.google.com/web/tools/lighthouse/)\n- [WebPageTest](https://www.webpagetest.org/easy)\n- [PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/)\n- ......\n\n### Strictly\n\nStrictly speaking, if we want to do WPO seriously for a long time, we still need to do something like:\n\n- Set a performance budget\n- Use `performance` or google analysis tool to get the performance data in the real scene.\n- ...\n\n## Last Words\n\nHere is just a summary about WPO. More accurate information is in [developers.google.com][developers.google.com].\n\n[**Source**](https://github.com/xianshenglu/blog/issues/70)\n\n## Reference\n\n[developers.google.com]: https://developers.google.com/web/fundamentals/performance/why-performance-matters/\n","source":"_posts/web-performance-optimization-summary-in-2019-3.md","raw":"---\ntitle: Web Performance Optimization Summary in 2019.3\ncategories: Web Performance Optimization\ntags:\n  - browser\n  - LightHouse\n  - performance\ncomments: true\ndate: 2019-03-25 21:02:15\n---\n\n## Where to Learn Web Performance Optimization(WPO)\n\nAbout one month ago, I started to learn and summarize the knowledge about web performance optimization. However, beyond my expectations, there is too many things need to know. After thinking, I chose [developers.google.com][developers.google.com] to start to learn. And other resources are listed [**here**](https://github.com/xianshenglu/blog/issues/70) with this article.\n\nThe reasons that I chose [developers.google.com][developers.google.com] can be listed below:\n\n- Articles will update when some methods or workarounds is outdated. This is extremely important for me to check it out when I need to update my knowledge about WPO. Also, it lets me know that I am learning something which can be tested and applied right now. For me, a blog is not better than a real-time updated document.\n- All the knowledge about WPO was listed systematically which is easy to understand, remember and use.\n\n## Summary About WPO\n\nThere are too many things for me to remember or test according to the doc. So, I am trying to summarize and abstract to make it simple to deduce and remember. Well, let's start with the questions.\n\n### What Is the Target of WPO\n\nTo make the page load as quickly as possible, also in a progressive way if possible.\n\n### How Can We Do That\n\nGenerally, we can analyze from the following aspects.\n\n<!-- #### Loading Performance -->\n\n- Use as much **cache** as possible.\n\n  - For a better control of cache in the front end, we may need to learn something about `PWA` or `Service Worker`.\n  - Or we might need some knowledge about offline storage like `Indexed DB`, `Web SQL`, `localStorage` and so on.\n\n- For those content that we can't use the cache, we need to take other measures.\n\n  - Send the content **as closely as possible** which\n\n    - may need the help of `CDN`.\n\n  - Send **as little content as possible** which\n\n    - needs `code compression`, `GZIP`, `code split`, `tree shake`, `image compression` and remove or replace the bigger resources with smaller ones if possible.\n\n  - Load the resource **in a more efficient way** which\n\n    - needs to put `script` at the bottom of `body`\n\n    - or use the `async` according to the situation\n\n<!-- #### Rendering Performance -->\n\n- **Render the page in a more efficient way** which requires more efficient practice in our daily code. For examples,\n\n  - Use `requestAnimationFrame` to change the UI instead of `setTimeout` or `setInterval`.\n\n  - Implement lazy load with `Intersection Observer` instead of calculating the position of each target element by `getBoundingClientRect`.\n\n  - Stick to compositor-only properties like `transform` and `opacity` to avoid re-layout and re-paint.\n\n  - Reduce the complexity of selectors.\n\n  - ....\n\n### How Can We Prove That Our Optimization Is Work\n\nWe need some tools like below to collect the result each time we did an optimization.\n\n- [Lighthouse](https://developers.google.com/web/tools/lighthouse/)\n- [WebPageTest](https://www.webpagetest.org/easy)\n- [PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/)\n- ......\n\n### Strictly\n\nStrictly speaking, if we want to do WPO seriously for a long time, we still need to do something like:\n\n- Set a performance budget\n- Use `performance` or google analysis tool to get the performance data in the real scene.\n- ...\n\n## Last Words\n\nHere is just a summary about WPO. More accurate information is in [developers.google.com][developers.google.com].\n\n[**Source**](https://github.com/xianshenglu/blog/issues/70)\n\n## Reference\n\n[developers.google.com]: https://developers.google.com/web/fundamentals/performance/why-performance-matters/\n","slug":"web-performance-optimization-summary-in-2019-3","published":1,"updated":"2019-03-30T12:03:29.059Z","layout":"post","photos":[],"link":"","_id":"cjv0yvisp002wborp09j498u4","content":"<h2>Where to Learn Web Performance Optimization(WPO)</h2>\n<p>About one month ago, I started to learn and summarize the knowledge about web performance optimization. However, beyond my expectations, there is too many things need to know. After thinking, I chose <a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">developers.google.com</a> to start to learn. And other resources are listed <a href=\"https://github.com/xianshenglu/blog/issues/70\"><strong>here</strong></a> with this article.</p>\n<p>The reasons that I chose <a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">developers.google.com</a> can be listed below:</p>\n<ul>\n<li>Articles will update when some methods or workarounds is outdated. This is extremely important for me to check it out when I need to update my knowledge about WPO. Also, it lets me know that I am learning something which can be tested and applied right now. For me, a blog is not better than a real-time updated document.</li>\n<li>All the knowledge about WPO was listed systematically which is easy to understand, remember and use.</li>\n</ul>\n<h2>Summary About WPO</h2>\n<p>There are too many things for me to remember or test according to the doc. So, I am trying to summarize and abstract to make it simple to deduce and remember. Well, let's start with the questions.</p>\n<h3>What Is the Target of WPO</h3>\n<p>To make the page load as quickly as possible, also in a progressive way if possible.</p>\n<h3>How Can We Do That</h3>\n<p>Generally, we can analyze from the following aspects.</p>\n<p>&lt;!-- #### Loading Performance --&gt;</p>\n<ul>\n<li>\n<p>Use as much <strong>cache</strong> as possible.</p>\n<ul>\n<li>For a better control of cache in the front end, we may need to learn something about <code>PWA</code> or <code>Service Worker</code>.</li>\n<li>Or we might need some knowledge about offline storage like <code>Indexed DB</code>, <code>Web SQL</code>, <code>localStorage</code> and so on.</li>\n</ul>\n</li>\n<li>\n<p>For those content that we can't use the cache, we need to take other measures.</p>\n<ul>\n<li>\n<p>Send the content <strong>as closely as possible</strong> which</p>\n<ul>\n<li>may need the help of <code>CDN</code>.</li>\n</ul>\n</li>\n<li>\n<p>Send <strong>as little content as possible</strong> which</p>\n<ul>\n<li>needs <code>code compression</code>, <code>GZIP</code>, <code>code split</code>, <code>tree shake</code>, <code>image compression</code> and remove or replace the bigger resources with smaller ones if possible.</li>\n</ul>\n</li>\n<li>\n<p>Load the resource <strong>in a more efficient way</strong> which</p>\n<ul>\n<li>\n<p>needs to put <code>script</code> at the bottom of <code>body</code></p>\n</li>\n<li>\n<p>or use the <code>async</code> according to the situation</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;!-- #### Rendering Performance --&gt;</p>\n<ul>\n<li>\n<p><strong>Render the page in a more efficient way</strong> which requires more efficient practice in our daily code. For examples,</p>\n<ul>\n<li>\n<p>Use <code>requestAnimationFrame</code> to change the UI instead of <code>setTimeout</code> or <code>setInterval</code>.</p>\n</li>\n<li>\n<p>Implement lazy load with <code>Intersection Observer</code> instead of calculating the position of each target element by <code>getBoundingClientRect</code>.</p>\n</li>\n<li>\n<p>Stick to compositor-only properties like <code>transform</code> and <code>opacity</code> to avoid re-layout and re-paint.</p>\n</li>\n<li>\n<p>Reduce the complexity of selectors.</p>\n</li>\n<li>\n<p>....</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3>How Can We Prove That Our Optimization Is Work</h3>\n<p>We need some tools like below to collect the result each time we did an optimization.</p>\n<ul>\n<li><a href=\"https://developers.google.com/web/tools/lighthouse/\" target=\"_blank\" rel=\"noopener\">Lighthouse</a></li>\n<li><a href=\"https://www.webpagetest.org/easy\" target=\"_blank\" rel=\"noopener\">WebPageTest</a></li>\n<li><a href=\"https://developers.google.com/speed/pagespeed/insights/\" target=\"_blank\" rel=\"noopener\">PageSpeed Insights</a></li>\n<li>......</li>\n</ul>\n<h3>Strictly</h3>\n<p>Strictly speaking, if we want to do WPO seriously for a long time, we still need to do something like:</p>\n<ul>\n<li>Set a performance budget</li>\n<li>Use <code>performance</code> or google analysis tool to get the performance data in the real scene.</li>\n<li>...</li>\n</ul>\n<h2>Last Words</h2>\n<p>Here is just a summary about WPO. More accurate information is in <a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">developers.google.com</a>.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/70\"><strong>Source</strong></a></p>\n<h2>Reference</h2>\n","site":{"data":{}},"excerpt":"","more":"<h2>Where to Learn Web Performance Optimization(WPO)</h2>\n<p>About one month ago, I started to learn and summarize the knowledge about web performance optimization. However, beyond my expectations, there is too many things need to know. After thinking, I chose <a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">developers.google.com</a> to start to learn. And other resources are listed <a href=\"https://github.com/xianshenglu/blog/issues/70\"><strong>here</strong></a> with this article.</p>\n<p>The reasons that I chose <a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">developers.google.com</a> can be listed below:</p>\n<ul>\n<li>Articles will update when some methods or workarounds is outdated. This is extremely important for me to check it out when I need to update my knowledge about WPO. Also, it lets me know that I am learning something which can be tested and applied right now. For me, a blog is not better than a real-time updated document.</li>\n<li>All the knowledge about WPO was listed systematically which is easy to understand, remember and use.</li>\n</ul>\n<h2>Summary About WPO</h2>\n<p>There are too many things for me to remember or test according to the doc. So, I am trying to summarize and abstract to make it simple to deduce and remember. Well, let's start with the questions.</p>\n<h3>What Is the Target of WPO</h3>\n<p>To make the page load as quickly as possible, also in a progressive way if possible.</p>\n<h3>How Can We Do That</h3>\n<p>Generally, we can analyze from the following aspects.</p>\n<p>&lt;!-- #### Loading Performance --&gt;</p>\n<ul>\n<li>\n<p>Use as much <strong>cache</strong> as possible.</p>\n<ul>\n<li>For a better control of cache in the front end, we may need to learn something about <code>PWA</code> or <code>Service Worker</code>.</li>\n<li>Or we might need some knowledge about offline storage like <code>Indexed DB</code>, <code>Web SQL</code>, <code>localStorage</code> and so on.</li>\n</ul>\n</li>\n<li>\n<p>For those content that we can't use the cache, we need to take other measures.</p>\n<ul>\n<li>\n<p>Send the content <strong>as closely as possible</strong> which</p>\n<ul>\n<li>may need the help of <code>CDN</code>.</li>\n</ul>\n</li>\n<li>\n<p>Send <strong>as little content as possible</strong> which</p>\n<ul>\n<li>needs <code>code compression</code>, <code>GZIP</code>, <code>code split</code>, <code>tree shake</code>, <code>image compression</code> and remove or replace the bigger resources with smaller ones if possible.</li>\n</ul>\n</li>\n<li>\n<p>Load the resource <strong>in a more efficient way</strong> which</p>\n<ul>\n<li>\n<p>needs to put <code>script</code> at the bottom of <code>body</code></p>\n</li>\n<li>\n<p>or use the <code>async</code> according to the situation</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;!-- #### Rendering Performance --&gt;</p>\n<ul>\n<li>\n<p><strong>Render the page in a more efficient way</strong> which requires more efficient practice in our daily code. For examples,</p>\n<ul>\n<li>\n<p>Use <code>requestAnimationFrame</code> to change the UI instead of <code>setTimeout</code> or <code>setInterval</code>.</p>\n</li>\n<li>\n<p>Implement lazy load with <code>Intersection Observer</code> instead of calculating the position of each target element by <code>getBoundingClientRect</code>.</p>\n</li>\n<li>\n<p>Stick to compositor-only properties like <code>transform</code> and <code>opacity</code> to avoid re-layout and re-paint.</p>\n</li>\n<li>\n<p>Reduce the complexity of selectors.</p>\n</li>\n<li>\n<p>....</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3>How Can We Prove That Our Optimization Is Work</h3>\n<p>We need some tools like below to collect the result each time we did an optimization.</p>\n<ul>\n<li><a href=\"https://developers.google.com/web/tools/lighthouse/\" target=\"_blank\" rel=\"noopener\">Lighthouse</a></li>\n<li><a href=\"https://www.webpagetest.org/easy\" target=\"_blank\" rel=\"noopener\">WebPageTest</a></li>\n<li><a href=\"https://developers.google.com/speed/pagespeed/insights/\" target=\"_blank\" rel=\"noopener\">PageSpeed Insights</a></li>\n<li>......</li>\n</ul>\n<h3>Strictly</h3>\n<p>Strictly speaking, if we want to do WPO seriously for a long time, we still need to do something like:</p>\n<ul>\n<li>Set a performance budget</li>\n<li>Use <code>performance</code> or google analysis tool to get the performance data in the real scene.</li>\n<li>...</li>\n</ul>\n<h2>Last Words</h2>\n<p>Here is just a summary about WPO. More accurate information is in <a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">developers.google.com</a>.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/70\"><strong>Source</strong></a></p>\n<h2>Reference</h2>\n"},{"title":"Easier Way to Understand apply and call in JS","comments":1,"date":"2018-12-04T12:18:18.000Z","_content":"\nThe first time I know `apply` was when I met this code:\n\n```js\nMath.max.apply(null, [1, 2, 3, 4])\n```\n\nAs the [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) shows, the syntax is:\n\n> function.apply( thisArg , [argsArray] )\n\nActually, in case above, thisArg has no influence which means code below also works:\n\n```js\nMath.max.apply(undefined, [1, 2, 3, 4])\nMath.max.apply(Math, [1, 2, 3, 4])\n```\n\nThe only effect of `apply` in the code above is that it can pass the values in array to the function `max`. So, code above equal\n\n```js\nMath.max(1, 2, 3, 4)\n```\n\nWhy would I mention this? Because we don't need this anymore because we already have `...` which works like:\n\n```js\nMath.max(...[1, 2, 3, 4])\n```\n\nThe reason that we still need `apply` and `call` is the thisArg. They can help us call some powerful methods.\n\n#### thisArg in apply and call\n\nI guess you might have seen this code:\n\n```js\nArray.prototype.slice.call({ length: 2 })\nfunction fn() {\n  console.log(Array.prototype.slice.call(arguments))\n}\nfn(1, 2, 3, 4) //[1,2,3,4]\n```\n\nToday, we don't need this either because of `Array.from`. But I still want to talk about it for explanation. In the case above, `call` was used because we want to do something like:\n\n```js\nlet obj = { length: 2 }\nobj.slice() //Uncaught TypeError: obj.slice is not a function\n```\n\nIt would cause error because slice was defined in `Array.prototype`. Only `Array` instance can call that method. **But actually in the [implementation](http://es5.github.io/#x15.4.4.10) of `slice`, it doesn't need to be called by `Array` instance** and there is a lot of methods like this. So, in this case, `call` or `apply` would let non `Array` instance call these methods which means\n\n```js\nArray.prototype.slice.call({ length: 2 })\n//help you do something like this\nlet obj = { length: 2 }\nobj.slice = Array.prototype.slice\nobj.slice()\n```\n\n**And to help it easier to understand , you can remember it like:**\n\n```js\nmethod.call(thisArg, ...args)\n//works like in most cases\nthisArg.method = method\n// or this way, if thisArg is a primitive value\nObject.getPrototypeOf(thisArg).method = method\nthisArg.method(...args)\n//for apply\nmethod.apply(thisArg, args)\n//works like in most cases\nthisArg.method = method\n// or this way\nObject.getPrototypeOf(thisArg).method = method\nthisArg.method(...args)\n```\n\nWasn't that easy ?\n\nSo, let get back to `Math.max.apply({}, [1, 2, 3, 4])`. You can remember it like:\n\n```js\nlet thisArg = {}\nthisArg.max = Math.max\nthisArg.max(...[1, 2, 3, 4])\n```\n\nAnd more cases:\n\n```js\nObject.prototype.toString.call([]) //\"[object Array]\"\n//help you do this\nlet thisArg = []\nthisArg.toString = Object.prototype.toString\nthisArg.toString() //\"[object Array]\"\n//while\n[].toString()//\"\"\n```\n\nOr\n\n```js\n;[' sd ', 1, 3].map(Function.prototype.call, String.prototype.trim) //['sd','1','3']\n//help you do\n;[' sd ', 1, 3].map(function(...args) {\n  return String.prototype.trim.call(...args)\n})\n//help you do\n;[' sd ', 1, 3].map(function(...args) {\n  let thisArg = args[0]\n  thisArg.trim = String.prototype.trim\n  // way above wouldn't work because thisArg is a Primitive value, so we use way below instead.\n  Object.getPrototypeOf(thisArg).trim = String.prototype.trim\n  return thisArg.trim(...args.slice(1))\n})\n```\n\n#### More in apply\n\nAs `apply` can accept an array-like object. So, what would happen if coding like:\n\n```js\nArray.apply(null, { length: 2 })\n```\n\nActually, it equals\n\n```js\nArray.apply(null, [undefined, undefined])\n```\n\nSo, you can understand it like:\n\n```js\nlet thisArg = {} //set null would get error in code below, also thisArg in above case is not important\nthisArg.Array = Array\nthisArg.Array(undefined, undefined)\n```\n\nHope it's easier to understand `apply` and `call`.\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/50)\n","source":"_posts/easier-way-to-understand-apply-and-call-in-js.md","raw":"---\ntitle: Easier Way to Understand apply and call in JS\ncategories: js\ntags:\n  - apply\n  - call\ncomments: true\ndate: 2018-12-04 20:18:18\n---\n\nThe first time I know `apply` was when I met this code:\n\n```js\nMath.max.apply(null, [1, 2, 3, 4])\n```\n\nAs the [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) shows, the syntax is:\n\n> function.apply( thisArg , [argsArray] )\n\nActually, in case above, thisArg has no influence which means code below also works:\n\n```js\nMath.max.apply(undefined, [1, 2, 3, 4])\nMath.max.apply(Math, [1, 2, 3, 4])\n```\n\nThe only effect of `apply` in the code above is that it can pass the values in array to the function `max`. So, code above equal\n\n```js\nMath.max(1, 2, 3, 4)\n```\n\nWhy would I mention this? Because we don't need this anymore because we already have `...` which works like:\n\n```js\nMath.max(...[1, 2, 3, 4])\n```\n\nThe reason that we still need `apply` and `call` is the thisArg. They can help us call some powerful methods.\n\n#### thisArg in apply and call\n\nI guess you might have seen this code:\n\n```js\nArray.prototype.slice.call({ length: 2 })\nfunction fn() {\n  console.log(Array.prototype.slice.call(arguments))\n}\nfn(1, 2, 3, 4) //[1,2,3,4]\n```\n\nToday, we don't need this either because of `Array.from`. But I still want to talk about it for explanation. In the case above, `call` was used because we want to do something like:\n\n```js\nlet obj = { length: 2 }\nobj.slice() //Uncaught TypeError: obj.slice is not a function\n```\n\nIt would cause error because slice was defined in `Array.prototype`. Only `Array` instance can call that method. **But actually in the [implementation](http://es5.github.io/#x15.4.4.10) of `slice`, it doesn't need to be called by `Array` instance** and there is a lot of methods like this. So, in this case, `call` or `apply` would let non `Array` instance call these methods which means\n\n```js\nArray.prototype.slice.call({ length: 2 })\n//help you do something like this\nlet obj = { length: 2 }\nobj.slice = Array.prototype.slice\nobj.slice()\n```\n\n**And to help it easier to understand , you can remember it like:**\n\n```js\nmethod.call(thisArg, ...args)\n//works like in most cases\nthisArg.method = method\n// or this way, if thisArg is a primitive value\nObject.getPrototypeOf(thisArg).method = method\nthisArg.method(...args)\n//for apply\nmethod.apply(thisArg, args)\n//works like in most cases\nthisArg.method = method\n// or this way\nObject.getPrototypeOf(thisArg).method = method\nthisArg.method(...args)\n```\n\nWasn't that easy ?\n\nSo, let get back to `Math.max.apply({}, [1, 2, 3, 4])`. You can remember it like:\n\n```js\nlet thisArg = {}\nthisArg.max = Math.max\nthisArg.max(...[1, 2, 3, 4])\n```\n\nAnd more cases:\n\n```js\nObject.prototype.toString.call([]) //\"[object Array]\"\n//help you do this\nlet thisArg = []\nthisArg.toString = Object.prototype.toString\nthisArg.toString() //\"[object Array]\"\n//while\n[].toString()//\"\"\n```\n\nOr\n\n```js\n;[' sd ', 1, 3].map(Function.prototype.call, String.prototype.trim) //['sd','1','3']\n//help you do\n;[' sd ', 1, 3].map(function(...args) {\n  return String.prototype.trim.call(...args)\n})\n//help you do\n;[' sd ', 1, 3].map(function(...args) {\n  let thisArg = args[0]\n  thisArg.trim = String.prototype.trim\n  // way above wouldn't work because thisArg is a Primitive value, so we use way below instead.\n  Object.getPrototypeOf(thisArg).trim = String.prototype.trim\n  return thisArg.trim(...args.slice(1))\n})\n```\n\n#### More in apply\n\nAs `apply` can accept an array-like object. So, what would happen if coding like:\n\n```js\nArray.apply(null, { length: 2 })\n```\n\nActually, it equals\n\n```js\nArray.apply(null, [undefined, undefined])\n```\n\nSo, you can understand it like:\n\n```js\nlet thisArg = {} //set null would get error in code below, also thisArg in above case is not important\nthisArg.Array = Array\nthisArg.Array(undefined, undefined)\n```\n\nHope it's easier to understand `apply` and `call`.\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/50)\n","slug":"easier-way-to-understand-apply-and-call-in-js","published":1,"updated":"2018-12-18T13:07:33.698Z","layout":"post","photos":[],"link":"","_id":"cjv0yvisu002zborpidy8tmcv","content":"<p>The first time I know <code>apply</code> was when I met this code:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure></p>\n<p>As the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\">mdn</a> shows, the syntax is:</p>\n<blockquote>\n<p>function.apply( thisArg , [argsArray] )</p>\n</blockquote>\n<p>Actually, in case above, thisArg has no influence which means code below also works:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">undefined</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure></p>\n<p>The only effect of <code>apply</code> in the code above is that it can pass the values in array to the function <code>max</code>. So, code above equal</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Why would I mention this? Because we don't need this anymore because we already have <code>...</code> which works like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure></p>\n<p>The reason that we still need <code>apply</code> and <code>call</code> is the thisArg. They can help us call some powerful methods.</p>\n<h4>thisArg in apply and call</h4>\n<p>I guess you might have seen this code:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice.call(&#123; <span class=\"attr\">length</span>: <span class=\"number\">2</span> &#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure></p>\n<p>Today, we don't need this either because of <code>Array.from</code>. But I still want to talk about it for explanation. In the case above, <code>call</code> was used because we want to do something like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">length</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">obj.slice() <span class=\"comment\">//Uncaught TypeError: obj.slice is not a function</span></span><br></pre></td></tr></table></figure></p>\n<p>It would cause error because slice was defined in <code>Array.prototype</code>. Only <code>Array</code> instance can call that method. <strong>But actually in the <a href=\"http://es5.github.io/#x15.4.4.10\" target=\"_blank\" rel=\"noopener\">implementation</a> of <code>slice</code>, it doesn't need to be called by <code>Array</code> instance</strong> and there is a lot of methods like this. So, in this case, <code>call</code> or <code>apply</code> would let non <code>Array</code> instance call these methods which means</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice.call(&#123; <span class=\"attr\">length</span>: <span class=\"number\">2</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">//help you do something like this</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">length</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">obj.slice = <span class=\"built_in\">Array</span>.prototype.slice</span><br><span class=\"line\">obj.slice()</span><br></pre></td></tr></table></figure></p>\n<p><strong>And to help it easier to understand , you can remember it like:</strong></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">method.call(thisArg, ...args)</span><br><span class=\"line\"><span class=\"comment\">//works like in most cases</span></span><br><span class=\"line\">thisArg.method = method</span><br><span class=\"line\"><span class=\"comment\">// or this way, if thisArg is a primitive value</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(thisArg).method = method</span><br><span class=\"line\">thisArg.method(...args)</span><br><span class=\"line\"><span class=\"comment\">//for apply</span></span><br><span class=\"line\">method.apply(thisArg, args)</span><br><span class=\"line\"><span class=\"comment\">//works like in most cases</span></span><br><span class=\"line\">thisArg.method = method</span><br><span class=\"line\"><span class=\"comment\">// or this way</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(thisArg).method = method</span><br><span class=\"line\">thisArg.method(...args)</span><br></pre></td></tr></table></figure></p>\n<p>Wasn't that easy ?</p>\n<p>So, let get back to <code>Math.max.apply({}, [1, 2, 3, 4])</code>. You can remember it like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thisArg = &#123;&#125;</span><br><span class=\"line\">thisArg.max = <span class=\"built_in\">Math</span>.max</span><br><span class=\"line\">thisArg.max(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure></p>\n<p>And more cases:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([]) <span class=\"comment\">//\"[object Array]\"</span></span><br><span class=\"line\"><span class=\"comment\">//help you do this</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> thisArg = []</span><br><span class=\"line\">thisArg.toString = <span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\">thisArg.toString() <span class=\"comment\">//\"[object Array]\"</span></span><br><span class=\"line\"><span class=\"comment\">//while</span></span><br><span class=\"line\">[].toString()<span class=\"comment\">//\"\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Or</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">;[<span class=\"string\">' sd '</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>].map(<span class=\"built_in\">Function</span>.prototype.call, <span class=\"built_in\">String</span>.prototype.trim) <span class=\"comment\">//['sd','1','3']</span></span><br><span class=\"line\"><span class=\"comment\">//help you do</span></span><br><span class=\"line\">;[<span class=\"string\">' sd '</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">String</span>.prototype.trim.call(...args)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//help you do</span></span><br><span class=\"line\">;[<span class=\"string\">' sd '</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> thisArg = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">  thisArg.trim = <span class=\"built_in\">String</span>.prototype.trim</span><br><span class=\"line\">  <span class=\"comment\">// way above wouldn't work because thisArg is a Primitive value, so we use way below instead.</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.getPrototypeOf(thisArg).trim = <span class=\"built_in\">String</span>.prototype.trim</span><br><span class=\"line\">  <span class=\"keyword\">return</span> thisArg.trim(...args.slice(<span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4>More in apply</h4>\n<p>As <code>apply</code> can accept an array-like object. So, what would happen if coding like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">length</span>: <span class=\"number\">2</span> &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Actually, it equals</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, [<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>])</span><br></pre></td></tr></table></figure></p>\n<p>So, you can understand it like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thisArg = &#123;&#125; <span class=\"comment\">//set null would get error in code below, also thisArg in above case is not important</span></span><br><span class=\"line\">thisArg.Array = <span class=\"built_in\">Array</span></span><br><span class=\"line\">thisArg.Array(<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Hope it's easier to understand <code>apply</code> and <code>call</code>.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/50\"><strong>Original Post</strong></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>The first time I know <code>apply</code> was when I met this code:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure></p>\n<p>As the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\">mdn</a> shows, the syntax is:</p>\n<blockquote>\n<p>function.apply( thisArg , [argsArray] )</p>\n</blockquote>\n<p>Actually, in case above, thisArg has no influence which means code below also works:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">undefined</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"built_in\">Math</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure></p>\n<p>The only effect of <code>apply</code> in the code above is that it can pass the values in array to the function <code>max</code>. So, code above equal</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Why would I mention this? Because we don't need this anymore because we already have <code>...</code> which works like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure></p>\n<p>The reason that we still need <code>apply</code> and <code>call</code> is the thisArg. They can help us call some powerful methods.</p>\n<h4>thisArg in apply and call</h4>\n<p>I guess you might have seen this code:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice.call(&#123; <span class=\"attr\">length</span>: <span class=\"number\">2</span> &#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure></p>\n<p>Today, we don't need this either because of <code>Array.from</code>. But I still want to talk about it for explanation. In the case above, <code>call</code> was used because we want to do something like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">length</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">obj.slice() <span class=\"comment\">//Uncaught TypeError: obj.slice is not a function</span></span><br></pre></td></tr></table></figure></p>\n<p>It would cause error because slice was defined in <code>Array.prototype</code>. Only <code>Array</code> instance can call that method. <strong>But actually in the <a href=\"http://es5.github.io/#x15.4.4.10\" target=\"_blank\" rel=\"noopener\">implementation</a> of <code>slice</code>, it doesn't need to be called by <code>Array</code> instance</strong> and there is a lot of methods like this. So, in this case, <code>call</code> or <code>apply</code> would let non <code>Array</code> instance call these methods which means</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice.call(&#123; <span class=\"attr\">length</span>: <span class=\"number\">2</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">//help you do something like this</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">length</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">obj.slice = <span class=\"built_in\">Array</span>.prototype.slice</span><br><span class=\"line\">obj.slice()</span><br></pre></td></tr></table></figure></p>\n<p><strong>And to help it easier to understand , you can remember it like:</strong></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">method.call(thisArg, ...args)</span><br><span class=\"line\"><span class=\"comment\">//works like in most cases</span></span><br><span class=\"line\">thisArg.method = method</span><br><span class=\"line\"><span class=\"comment\">// or this way, if thisArg is a primitive value</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(thisArg).method = method</span><br><span class=\"line\">thisArg.method(...args)</span><br><span class=\"line\"><span class=\"comment\">//for apply</span></span><br><span class=\"line\">method.apply(thisArg, args)</span><br><span class=\"line\"><span class=\"comment\">//works like in most cases</span></span><br><span class=\"line\">thisArg.method = method</span><br><span class=\"line\"><span class=\"comment\">// or this way</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(thisArg).method = method</span><br><span class=\"line\">thisArg.method(...args)</span><br></pre></td></tr></table></figure></p>\n<p>Wasn't that easy ?</p>\n<p>So, let get back to <code>Math.max.apply({}, [1, 2, 3, 4])</code>. You can remember it like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thisArg = &#123;&#125;</span><br><span class=\"line\">thisArg.max = <span class=\"built_in\">Math</span>.max</span><br><span class=\"line\">thisArg.max(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure></p>\n<p>And more cases:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([]) <span class=\"comment\">//\"[object Array]\"</span></span><br><span class=\"line\"><span class=\"comment\">//help you do this</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> thisArg = []</span><br><span class=\"line\">thisArg.toString = <span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\">thisArg.toString() <span class=\"comment\">//\"[object Array]\"</span></span><br><span class=\"line\"><span class=\"comment\">//while</span></span><br><span class=\"line\">[].toString()<span class=\"comment\">//\"\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Or</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">;[<span class=\"string\">' sd '</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>].map(<span class=\"built_in\">Function</span>.prototype.call, <span class=\"built_in\">String</span>.prototype.trim) <span class=\"comment\">//['sd','1','3']</span></span><br><span class=\"line\"><span class=\"comment\">//help you do</span></span><br><span class=\"line\">;[<span class=\"string\">' sd '</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">String</span>.prototype.trim.call(...args)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//help you do</span></span><br><span class=\"line\">;[<span class=\"string\">' sd '</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> thisArg = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">  thisArg.trim = <span class=\"built_in\">String</span>.prototype.trim</span><br><span class=\"line\">  <span class=\"comment\">// way above wouldn't work because thisArg is a Primitive value, so we use way below instead.</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.getPrototypeOf(thisArg).trim = <span class=\"built_in\">String</span>.prototype.trim</span><br><span class=\"line\">  <span class=\"keyword\">return</span> thisArg.trim(...args.slice(<span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4>More in apply</h4>\n<p>As <code>apply</code> can accept an array-like object. So, what would happen if coding like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">length</span>: <span class=\"number\">2</span> &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Actually, it equals</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, [<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>])</span><br></pre></td></tr></table></figure></p>\n<p>So, you can understand it like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thisArg = &#123;&#125; <span class=\"comment\">//set null would get error in code below, also thisArg in above case is not important</span></span><br><span class=\"line\">thisArg.Array = <span class=\"built_in\">Array</span></span><br><span class=\"line\">thisArg.Array(<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Hope it's easier to understand <code>apply</code> and <code>call</code>.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/50\"><strong>Original Post</strong></a></p>\n"},{"title":"What Is the background-color's Height of Inline Non-Replaced Element?","date":"2018-05-17T16:00:00.000Z","comments":1,"_content":"\n## Preface\n\nAs we all know, when we set `background-color` in block-level non-replaced elements, the height of `background-color` is equal to `border-top`+`padding-top`+`height`+`padding-bottom`+`border-bottom` according to box-model which is very clear.\n\n## Question\n\nHowever, things get weird when we set `background-color` to inline non-replaced element because `height` doesn't apply to the element. For example:\n\n```html\n<div class=\"inline\">\n  inline non-replaced element\n</div>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\nhtml {\n  font-family: Microsoft YaHei;\n  font-size: 40px;\n}\n.inline {\n  display: inline;\n  background-color: pink;\n  line-height: 2;\n}\n```\n\n![20180517161430.png](../images/20180517161430.png)\n\nSo, here is the question,\n\n* Assume there is no `margin` and `padding`,how much is the size of the `background-color` area which is also the content area ?any rules?\n\nAnd here is the answer I figured out:\n\n* It depends.\n\nThen we are going to talk a lot about how it depends.\n\nIf we measured the direction as the screenshot above ,we can get some data below, called Case A :\n\n* font-size:40px\n* background-color's height : about 50px\n* top/bottom space : about 15px\n\nMay be you thought that those data should be like these, called Case B :\n\n* font-size:40px\n* background-color's height : about 40px\n* top/bottom space : about 20px, equals to half-leading\n\nIt seems Case B is more reasonable.\n\nHowever, the fact is that Case A is applied until Chrome-66.\n\nAnyway, `line-height` is definitive, always 80px.\n\nAfter reading [10.6.1 Inline, non-replaced elements][2] in CSS2.1 and SO, I think the point is below:\n\n> The 'height' property does not apply. The height of the content area should be based on the font, but this specification does not specify how. A UA may, e.g., use the em-box or the maximum ascender and descender of the font.\n\n> (The latter would ensure that glyphs with parts above or below the em-box still fall within the content area, but leads to differently sized boxes for different fonts; the former would ensure authors can control background styling relative to the 'line-height', but leads to glyphs painting outside their content area.)\n\nAccording to the specification above, I think that Case B means\n\n> A UA use the em-box which would ensure authors can control background styling relative to the 'line-height', but leads to glyphs painting outside their content area.\n\nwhile Case A means\n\n> A UA use the maximum ascender and descender of the font which would ensure that glyphs with parts above or below the em-box still fall within the content area, but leads to differently sized boxes for different fonts.\n\nThen, I try to prove it with different fonts which will lead differently sized boxes according to specification above.\n\nFor example, change `font-family`from `Microsoft YaHei`to`Georgia`:\n\n```html\n<div class=\"inline\">\n  inline non-replaced element <br>sss\n</div>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\nhtml {\n  font-size: 40px;\n  font-family: Georgia;\n}\n.inline {\n  display: inline;\n  background-color: pink;\n  line-height: 2;\n}\n```\n\n![20180517162130.png](../images/20180517162130.png)\n\nAs you can see ,these data becomes:\n\n* font-size:40px\n* background-color's height : about 46px\n* top space : about 15px\n* bottom space: about 19px\n\n## Conclusion\n\nSo, precisely, assuming that there is no `margin` and `padding`,we can say that background-color's height of inline non-replaced element is\n\n* determined by `font-size`\n* and modified partially by `font-family` which depends on the rules UA takes.\n\nAnd also the area outside of the `background-color` area isn't equal to half-leading.\n\nReference:\n\n[Inline elements and line-height][4]\n\n[2]: https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html#inline-non-replaced\n[4]: https://stackoverflow.com/questions/28363186/inline-elements-and-line-height\n","source":"_posts/what-is-the-background-color-height-of-inline-non-replaced-element.md","raw":"---\ntitle: What Is the background-color's Height of Inline Non-Replaced Element?\ndate: 2018-05-18\ncomments: true\ntags: \n- background-color\n- inline non-replaced element\n- content area\ncategories: css\n---\n\n## Preface\n\nAs we all know, when we set `background-color` in block-level non-replaced elements, the height of `background-color` is equal to `border-top`+`padding-top`+`height`+`padding-bottom`+`border-bottom` according to box-model which is very clear.\n\n## Question\n\nHowever, things get weird when we set `background-color` to inline non-replaced element because `height` doesn't apply to the element. For example:\n\n```html\n<div class=\"inline\">\n  inline non-replaced element\n</div>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\nhtml {\n  font-family: Microsoft YaHei;\n  font-size: 40px;\n}\n.inline {\n  display: inline;\n  background-color: pink;\n  line-height: 2;\n}\n```\n\n![20180517161430.png](../images/20180517161430.png)\n\nSo, here is the question,\n\n* Assume there is no `margin` and `padding`,how much is the size of the `background-color` area which is also the content area ?any rules?\n\nAnd here is the answer I figured out:\n\n* It depends.\n\nThen we are going to talk a lot about how it depends.\n\nIf we measured the direction as the screenshot above ,we can get some data below, called Case A :\n\n* font-size:40px\n* background-color's height : about 50px\n* top/bottom space : about 15px\n\nMay be you thought that those data should be like these, called Case B :\n\n* font-size:40px\n* background-color's height : about 40px\n* top/bottom space : about 20px, equals to half-leading\n\nIt seems Case B is more reasonable.\n\nHowever, the fact is that Case A is applied until Chrome-66.\n\nAnyway, `line-height` is definitive, always 80px.\n\nAfter reading [10.6.1 Inline, non-replaced elements][2] in CSS2.1 and SO, I think the point is below:\n\n> The 'height' property does not apply. The height of the content area should be based on the font, but this specification does not specify how. A UA may, e.g., use the em-box or the maximum ascender and descender of the font.\n\n> (The latter would ensure that glyphs with parts above or below the em-box still fall within the content area, but leads to differently sized boxes for different fonts; the former would ensure authors can control background styling relative to the 'line-height', but leads to glyphs painting outside their content area.)\n\nAccording to the specification above, I think that Case B means\n\n> A UA use the em-box which would ensure authors can control background styling relative to the 'line-height', but leads to glyphs painting outside their content area.\n\nwhile Case A means\n\n> A UA use the maximum ascender and descender of the font which would ensure that glyphs with parts above or below the em-box still fall within the content area, but leads to differently sized boxes for different fonts.\n\nThen, I try to prove it with different fonts which will lead differently sized boxes according to specification above.\n\nFor example, change `font-family`from `Microsoft YaHei`to`Georgia`:\n\n```html\n<div class=\"inline\">\n  inline non-replaced element <br>sss\n</div>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\nhtml {\n  font-size: 40px;\n  font-family: Georgia;\n}\n.inline {\n  display: inline;\n  background-color: pink;\n  line-height: 2;\n}\n```\n\n![20180517162130.png](../images/20180517162130.png)\n\nAs you can see ,these data becomes:\n\n* font-size:40px\n* background-color's height : about 46px\n* top space : about 15px\n* bottom space: about 19px\n\n## Conclusion\n\nSo, precisely, assuming that there is no `margin` and `padding`,we can say that background-color's height of inline non-replaced element is\n\n* determined by `font-size`\n* and modified partially by `font-family` which depends on the rules UA takes.\n\nAnd also the area outside of the `background-color` area isn't equal to half-leading.\n\nReference:\n\n[Inline elements and line-height][4]\n\n[2]: https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html#inline-non-replaced\n[4]: https://stackoverflow.com/questions/28363186/inline-elements-and-line-height\n","slug":"what-is-the-background-color-height-of-inline-non-replaced-element","published":1,"updated":"2018-05-23T02:25:13.243Z","layout":"post","photos":[],"link":"","_id":"cjv0yvit10034borpk783ao61","content":"<h2>Preface</h2>\n<p>As we all know, when we set <code>background-color</code> in block-level non-replaced elements, the height of <code>background-color</code> is equal to <code>border-top</code>+<code>padding-top</code>+<code>height</code>+<code>padding-bottom</code>+<code>border-bottom</code> according to box-model which is very clear.</p>\n<h2>Question</h2>\n<p>However, things get weird when we set <code>background-color</code> to inline non-replaced element because <code>height</code> doesn't apply to the element. For example:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline\"</span>&gt;</span></span><br><span class=\"line\">  inline non-replaced element</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: Microsoft YaHei;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.inline</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"../images/20180517161430.png\" alt=\"20180517161430.png\"></p>\n<p>So, here is the question,</p>\n<ul>\n<li>Assume there is no <code>margin</code> and <code>padding</code>,how much is the size of the <code>background-color</code> area which is also the content area ?any rules?</li>\n</ul>\n<p>And here is the answer I figured out:</p>\n<ul>\n<li>It depends.</li>\n</ul>\n<p>Then we are going to talk a lot about how it depends.</p>\n<p>If we measured the direction as the screenshot above ,we can get some data below, called Case A :</p>\n<ul>\n<li>font-size:40px</li>\n<li>background-color's height : about 50px</li>\n<li>top/bottom space : about 15px</li>\n</ul>\n<p>May be you thought that those data should be like these, called Case B :</p>\n<ul>\n<li>font-size:40px</li>\n<li>background-color's height : about 40px</li>\n<li>top/bottom space : about 20px, equals to half-leading</li>\n</ul>\n<p>It seems Case B is more reasonable.</p>\n<p>However, the fact is that Case A is applied until Chrome-66.</p>\n<p>Anyway, <code>line-height</code> is definitive, always 80px.</p>\n<p>After reading <a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html#inline-non-replaced\" target=\"_blank\" rel=\"noopener\">10.6.1 Inline, non-replaced elements</a> in CSS2.1 and SO, I think the point is below:</p>\n<blockquote>\n<p>The 'height' property does not apply. The height of the content area should be based on the font, but this specification does not specify how. A UA may, e.g., use the em-box or the maximum ascender and descender of the font.</p>\n</blockquote>\n<blockquote>\n<p>(The latter would ensure that glyphs with parts above or below the em-box still fall within the content area, but leads to differently sized boxes for different fonts; the former would ensure authors can control background styling relative to the 'line-height', but leads to glyphs painting outside their content area.)</p>\n</blockquote>\n<p>According to the specification above, I think that Case B means</p>\n<blockquote>\n<p>A UA use the em-box which would ensure authors can control background styling relative to the 'line-height', but leads to glyphs painting outside their content area.</p>\n</blockquote>\n<p>while Case A means</p>\n<blockquote>\n<p>A UA use the maximum ascender and descender of the font which would ensure that glyphs with parts above or below the em-box still fall within the content area, but leads to differently sized boxes for different fonts.</p>\n</blockquote>\n<p>Then, I try to prove it with different fonts which will lead differently sized boxes according to specification above.</p>\n<p>For example, change <code>font-family</code>from <code>Microsoft YaHei</code>to<code>Georgia</code>:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline\"</span>&gt;</span></span><br><span class=\"line\">  inline non-replaced element <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>sss</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: Georgia;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.inline</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"../images/20180517162130.png\" alt=\"20180517162130.png\"></p>\n<p>As you can see ,these data becomes:</p>\n<ul>\n<li>font-size:40px</li>\n<li>background-color's height : about 46px</li>\n<li>top space : about 15px</li>\n<li>bottom space: about 19px</li>\n</ul>\n<h2>Conclusion</h2>\n<p>So, precisely, assuming that there is no <code>margin</code> and <code>padding</code>,we can say that background-color's height of inline non-replaced element is</p>\n<ul>\n<li>determined by <code>font-size</code></li>\n<li>and modified partially by <code>font-family</code> which depends on the rules UA takes.</li>\n</ul>\n<p>And also the area outside of the <code>background-color</code> area isn't equal to half-leading.</p>\n<p>Reference:</p>\n<p><a href=\"https://stackoverflow.com/questions/28363186/inline-elements-and-line-height\" target=\"_blank\" rel=\"noopener\">Inline elements and line-height</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>As we all know, when we set <code>background-color</code> in block-level non-replaced elements, the height of <code>background-color</code> is equal to <code>border-top</code>+<code>padding-top</code>+<code>height</code>+<code>padding-bottom</code>+<code>border-bottom</code> according to box-model which is very clear.</p>\n<h2>Question</h2>\n<p>However, things get weird when we set <code>background-color</code> to inline non-replaced element because <code>height</code> doesn't apply to the element. For example:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline\"</span>&gt;</span></span><br><span class=\"line\">  inline non-replaced element</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: Microsoft YaHei;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.inline</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"../images/20180517161430.png\" alt=\"20180517161430.png\"></p>\n<p>So, here is the question,</p>\n<ul>\n<li>Assume there is no <code>margin</code> and <code>padding</code>,how much is the size of the <code>background-color</code> area which is also the content area ?any rules?</li>\n</ul>\n<p>And here is the answer I figured out:</p>\n<ul>\n<li>It depends.</li>\n</ul>\n<p>Then we are going to talk a lot about how it depends.</p>\n<p>If we measured the direction as the screenshot above ,we can get some data below, called Case A :</p>\n<ul>\n<li>font-size:40px</li>\n<li>background-color's height : about 50px</li>\n<li>top/bottom space : about 15px</li>\n</ul>\n<p>May be you thought that those data should be like these, called Case B :</p>\n<ul>\n<li>font-size:40px</li>\n<li>background-color's height : about 40px</li>\n<li>top/bottom space : about 20px, equals to half-leading</li>\n</ul>\n<p>It seems Case B is more reasonable.</p>\n<p>However, the fact is that Case A is applied until Chrome-66.</p>\n<p>Anyway, <code>line-height</code> is definitive, always 80px.</p>\n<p>After reading <a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html#inline-non-replaced\" target=\"_blank\" rel=\"noopener\">10.6.1 Inline, non-replaced elements</a> in CSS2.1 and SO, I think the point is below:</p>\n<blockquote>\n<p>The 'height' property does not apply. The height of the content area should be based on the font, but this specification does not specify how. A UA may, e.g., use the em-box or the maximum ascender and descender of the font.</p>\n</blockquote>\n<blockquote>\n<p>(The latter would ensure that glyphs with parts above or below the em-box still fall within the content area, but leads to differently sized boxes for different fonts; the former would ensure authors can control background styling relative to the 'line-height', but leads to glyphs painting outside their content area.)</p>\n</blockquote>\n<p>According to the specification above, I think that Case B means</p>\n<blockquote>\n<p>A UA use the em-box which would ensure authors can control background styling relative to the 'line-height', but leads to glyphs painting outside their content area.</p>\n</blockquote>\n<p>while Case A means</p>\n<blockquote>\n<p>A UA use the maximum ascender and descender of the font which would ensure that glyphs with parts above or below the em-box still fall within the content area, but leads to differently sized boxes for different fonts.</p>\n</blockquote>\n<p>Then, I try to prove it with different fonts which will lead differently sized boxes according to specification above.</p>\n<p>For example, change <code>font-family</code>from <code>Microsoft YaHei</code>to<code>Georgia</code>:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline\"</span>&gt;</span></span><br><span class=\"line\">  inline non-replaced element <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>sss</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: Georgia;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.inline</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"../images/20180517162130.png\" alt=\"20180517162130.png\"></p>\n<p>As you can see ,these data becomes:</p>\n<ul>\n<li>font-size:40px</li>\n<li>background-color's height : about 46px</li>\n<li>top space : about 15px</li>\n<li>bottom space: about 19px</li>\n</ul>\n<h2>Conclusion</h2>\n<p>So, precisely, assuming that there is no <code>margin</code> and <code>padding</code>,we can say that background-color's height of inline non-replaced element is</p>\n<ul>\n<li>determined by <code>font-size</code></li>\n<li>and modified partially by <code>font-family</code> which depends on the rules UA takes.</li>\n</ul>\n<p>And also the area outside of the <code>background-color</code> area isn't equal to half-leading.</p>\n<p>Reference:</p>\n<p><a href=\"https://stackoverflow.com/questions/28363186/inline-elements-and-line-height\" target=\"_blank\" rel=\"noopener\">Inline elements and line-height</a></p>\n"},{"title":"Use Text Align Last Except When I Have Only One Line Of Text","comments":1,"date":"2018-06-09T08:30:46.000Z","_content":"\n## Preface\n\nAs the title says, what I want is like image below:\n\n![](../images/截图20180609163513.png)\n\nIs that Possible, ha?\n\n## Steps\n\nAt the first, I thought that was impossible with css only. But I find an answer in SO. Here is the code:\n\n```html\n<div class=\"par\">\n  <span class=\"child child1\">box box box box box </span>\n  <span class=\"child child2\">box box</span>\n  <span class=\"child child3\">box box box box</span>\n</div>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\n.par {\n  background: pink;\n  width: 100px;\n  text-align: left;\n}\n.par .child {\n  display: inline-block;\n  text-align: center;\n}\n.par .child1 {\n  background: lightblue;\n}\n.par .child2 {\n  background: yellowgreen;\n}\n.par .child3 {\n  background: orange;\n}\n```\n\nThat is magic!\n\nBecause inline-blocks is an inline-level element. So, it will be in the left of the container `.par` built because of `text-align:left`. The width of `inline-block` is determined by the content which is only one line. So, `text-align:center` on the `.child` doesn't work because the width of `.child` is equal to the width of one line content in the `.child`.\n\nAlso, the `inline-block` is a block container. When there is more than one line, the width of `inline-block` will be equal to the width of `.par`. In this case, `text-align:center` will work on the last line because the width of last line is less than the width of the `inline-block`.\n\n## Ending\n\nAnyway, this solution is awesome. Thanks to the reference.\n\n## Reference\n\n[how-can-i-use-text-align-last-except-when-i-have-only-one-line-of-text](https://stackoverflow.com/questions/43556557/how-can-i-use-text-align-last-except-when-i-have-only-one-line-of-text/43556943#comment88476400_43556943)\n","source":"_posts/use-text-align-last-except-when-i-have-only-one-line-of-text.md","raw":"---\ntitle: Use Text Align Last Except When I Have Only One Line Of Text\ntags:\n- text-align\n- text-align-last\ncategories: css\ncomments: true\ndate: 2018-06-09 16:30:46\n---\n\n## Preface\n\nAs the title says, what I want is like image below:\n\n![](../images/截图20180609163513.png)\n\nIs that Possible, ha?\n\n## Steps\n\nAt the first, I thought that was impossible with css only. But I find an answer in SO. Here is the code:\n\n```html\n<div class=\"par\">\n  <span class=\"child child1\">box box box box box </span>\n  <span class=\"child child2\">box box</span>\n  <span class=\"child child3\">box box box box</span>\n</div>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\n.par {\n  background: pink;\n  width: 100px;\n  text-align: left;\n}\n.par .child {\n  display: inline-block;\n  text-align: center;\n}\n.par .child1 {\n  background: lightblue;\n}\n.par .child2 {\n  background: yellowgreen;\n}\n.par .child3 {\n  background: orange;\n}\n```\n\nThat is magic!\n\nBecause inline-blocks is an inline-level element. So, it will be in the left of the container `.par` built because of `text-align:left`. The width of `inline-block` is determined by the content which is only one line. So, `text-align:center` on the `.child` doesn't work because the width of `.child` is equal to the width of one line content in the `.child`.\n\nAlso, the `inline-block` is a block container. When there is more than one line, the width of `inline-block` will be equal to the width of `.par`. In this case, `text-align:center` will work on the last line because the width of last line is less than the width of the `inline-block`.\n\n## Ending\n\nAnyway, this solution is awesome. Thanks to the reference.\n\n## Reference\n\n[how-can-i-use-text-align-last-except-when-i-have-only-one-line-of-text](https://stackoverflow.com/questions/43556557/how-can-i-use-text-align-last-except-when-i-have-only-one-line-of-text/43556943#comment88476400_43556943)\n","slug":"use-text-align-last-except-when-i-have-only-one-line-of-text","published":1,"updated":"2018-06-09T12:39:07.579Z","layout":"post","photos":[],"link":"","_id":"cjv0yvit60037borptbcbbzmp","content":"<h2>Preface</h2>\n<p>As the title says, what I want is like image below:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180609163513.png\" alt=\"\"></p>\n<p>Is that Possible, ha?</p>\n<h2>Steps</h2>\n<p>At the first, I thought that was impossible with css only. But I find an answer in SO. Here is the code:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"par\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child child1\"</span>&gt;</span>box box box box box <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child child2\"</span>&gt;</span>box box<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child child3\"</span>&gt;</span>box box box box<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.par</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.par</span> <span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.par</span> <span class=\"selector-class\">.child1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.par</span> <span class=\"selector-class\">.child2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: yellowgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.par</span> <span class=\"selector-class\">.child3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>That is magic!</p>\n<p>Because inline-blocks is an inline-level element. So, it will be in the left of the container <code>.par</code> built because of <code>text-align:left</code>. The width of <code>inline-block</code> is determined by the content which is only one line. So, <code>text-align:center</code> on the <code>.child</code> doesn't work because the width of <code>.child</code> is equal to the width of one line content in the <code>.child</code>.</p>\n<p>Also, the <code>inline-block</code> is a block container. When there is more than one line, the width of <code>inline-block</code> will be equal to the width of <code>.par</code>. In this case, <code>text-align:center</code> will work on the last line because the width of last line is less than the width of the <code>inline-block</code>.</p>\n<h2>Ending</h2>\n<p>Anyway, this solution is awesome. Thanks to the reference.</p>\n<h2>Reference</h2>\n<p><a href=\"https://stackoverflow.com/questions/43556557/how-can-i-use-text-align-last-except-when-i-have-only-one-line-of-text/43556943#comment88476400_43556943\" target=\"_blank\" rel=\"noopener\">how-can-i-use-text-align-last-except-when-i-have-only-one-line-of-text</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>As the title says, what I want is like image below:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180609163513.png\" alt=\"\"></p>\n<p>Is that Possible, ha?</p>\n<h2>Steps</h2>\n<p>At the first, I thought that was impossible with css only. But I find an answer in SO. Here is the code:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"par\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child child1\"</span>&gt;</span>box box box box box <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child child2\"</span>&gt;</span>box box<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child child3\"</span>&gt;</span>box box box box<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.par</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.par</span> <span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.par</span> <span class=\"selector-class\">.child1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.par</span> <span class=\"selector-class\">.child2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: yellowgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.par</span> <span class=\"selector-class\">.child3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>That is magic!</p>\n<p>Because inline-blocks is an inline-level element. So, it will be in the left of the container <code>.par</code> built because of <code>text-align:left</code>. The width of <code>inline-block</code> is determined by the content which is only one line. So, <code>text-align:center</code> on the <code>.child</code> doesn't work because the width of <code>.child</code> is equal to the width of one line content in the <code>.child</code>.</p>\n<p>Also, the <code>inline-block</code> is a block container. When there is more than one line, the width of <code>inline-block</code> will be equal to the width of <code>.par</code>. In this case, <code>text-align:center</code> will work on the last line because the width of last line is less than the width of the <code>inline-block</code>.</p>\n<h2>Ending</h2>\n<p>Anyway, this solution is awesome. Thanks to the reference.</p>\n<h2>Reference</h2>\n<p><a href=\"https://stackoverflow.com/questions/43556557/how-can-i-use-text-align-last-except-when-i-have-only-one-line-of-text/43556943#comment88476400_43556943\" target=\"_blank\" rel=\"noopener\">how-can-i-use-text-align-last-except-when-i-have-only-one-line-of-text</a></p>\n"},{"title":"Event Capturing Vs Event Bubbling","comments":1,"date":"2018-05-23T07:40:02.000Z","_content":"\n## Preface\n\nWhen I am trying to delegate the `error` event of `img`, I find that those events won't bubble up to window. So,does that mean I have to bind so many events as many as images I have?\n\n## Main\n\nAfter a while, I think of something about event capturing which maybe can solve this question. So, I tried code below:\n\n```html\n<img id=\"img\" src=\"error.png\" alt=\"error.png\">\n```\n\n```javascript\nwindow.addEventListener('error', windowErrorCb, { capture: true }, true)\nfunction windowErrorCb(event) {\n  let target = event.target\n  let isImg = target.tagName.toLowerCase() === 'img'\n  if (isImg) {\n    imgErrorCb()\n    return\n  }\n  function imgErrorCb() {\n    let isImgErrorHandled = target.hasAttribute('data-src-error')\n    if (!isImgErrorHandled) {\n      target.setAttribute('data-src-error', 'handled')\n      target.src = 'backup.png'\n    }\n  }\n}\n```\n\nCode above works normally. If we change the `capture` and the last argument to `false`, it doesn't work.\n\nIn this case, we can find that event capturing seems have more applicable situations than event bubbling. Also it seems faster because I catch and handle the event earlier than event bubbling.\nSo, I got these questions:\n\n- Why would we use event bubbling not event capturing as default except for compatibility?\n\n- Does event capturing really faster than event bubbling as I thought?\n\n- Does event capturing really have more applicable situations?\n\nThe answers can be listed below:\n\n- Don't know yet.\n\n- Yes, you can see the demo [here][delegating-capture-vs-bubble]\n\n- Yes.\n\n## Ending\n\nAfter words above, I think we should use event capturing as default.\n\n## Reference\n\n[Event Capturing vs Event Bubbling](https://stackoverflow.com/questions/2661199/event-capturing-vs-event-bubbling/10335117)\n\n[delegating-capture-vs-bubble][delegating-capture-vs-bubble]\n\n[delegating-capture-vs-bubble]: https://jsperf.com/delegating-capture-vs-bubble/2\n","source":"_posts/event-capturing-vs-event-bubbling.md","raw":"---\ntitle: Event Capturing Vs Event Bubbling\ntags:\n  - event capturing\n  - event bubbling\n  - event delegate\n  - image load error\ncategories: js\ncomments: true\ndate: 2018-05-23 15:40:02\n---\n\n## Preface\n\nWhen I am trying to delegate the `error` event of `img`, I find that those events won't bubble up to window. So,does that mean I have to bind so many events as many as images I have?\n\n## Main\n\nAfter a while, I think of something about event capturing which maybe can solve this question. So, I tried code below:\n\n```html\n<img id=\"img\" src=\"error.png\" alt=\"error.png\">\n```\n\n```javascript\nwindow.addEventListener('error', windowErrorCb, { capture: true }, true)\nfunction windowErrorCb(event) {\n  let target = event.target\n  let isImg = target.tagName.toLowerCase() === 'img'\n  if (isImg) {\n    imgErrorCb()\n    return\n  }\n  function imgErrorCb() {\n    let isImgErrorHandled = target.hasAttribute('data-src-error')\n    if (!isImgErrorHandled) {\n      target.setAttribute('data-src-error', 'handled')\n      target.src = 'backup.png'\n    }\n  }\n}\n```\n\nCode above works normally. If we change the `capture` and the last argument to `false`, it doesn't work.\n\nIn this case, we can find that event capturing seems have more applicable situations than event bubbling. Also it seems faster because I catch and handle the event earlier than event bubbling.\nSo, I got these questions:\n\n- Why would we use event bubbling not event capturing as default except for compatibility?\n\n- Does event capturing really faster than event bubbling as I thought?\n\n- Does event capturing really have more applicable situations?\n\nThe answers can be listed below:\n\n- Don't know yet.\n\n- Yes, you can see the demo [here][delegating-capture-vs-bubble]\n\n- Yes.\n\n## Ending\n\nAfter words above, I think we should use event capturing as default.\n\n## Reference\n\n[Event Capturing vs Event Bubbling](https://stackoverflow.com/questions/2661199/event-capturing-vs-event-bubbling/10335117)\n\n[delegating-capture-vs-bubble][delegating-capture-vs-bubble]\n\n[delegating-capture-vs-bubble]: https://jsperf.com/delegating-capture-vs-bubble/2\n","slug":"event-capturing-vs-event-bubbling","published":1,"updated":"2018-10-04T13:26:48.887Z","layout":"post","photos":[],"link":"","_id":"cjv0yvitb003bborpoo84wjsm","content":"<h2>Preface</h2>\n<p>When I am trying to delegate the <code>error</code> event of <code>img</code>, I find that those events won't bubble up to window. So,does that mean I have to bind so many events as many as images I have?</p>\n<h2>Main</h2>\n<p>After a while, I think of something about event capturing which maybe can solve this question. So, I tried code below:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"error.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"error.png\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'error'</span>, windowErrorCb, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;, <span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">windowErrorCb</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = event.target</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isImg = target.tagName.toLowerCase() === <span class=\"string\">'img'</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isImg) &#123;</span><br><span class=\"line\">    imgErrorCb()</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imgErrorCb</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isImgErrorHandled = target.hasAttribute(<span class=\"string\">'data-src-error'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isImgErrorHandled) &#123;</span><br><span class=\"line\">      target.setAttribute(<span class=\"string\">'data-src-error'</span>, <span class=\"string\">'handled'</span>)</span><br><span class=\"line\">      target.src = <span class=\"string\">'backup.png'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Code above works normally. If we change the <code>capture</code> and the last argument to <code>false</code>, it doesn't work.</p>\n<p>In this case, we can find that event capturing seems have more applicable situations than event bubbling. Also it seems faster because I catch and handle the event earlier than event bubbling.\nSo, I got these questions:</p>\n<ul>\n<li>\n<p>Why would we use event bubbling not event capturing as default except for compatibility?</p>\n</li>\n<li>\n<p>Does event capturing really faster than event bubbling as I thought?</p>\n</li>\n<li>\n<p>Does event capturing really have more applicable situations?</p>\n</li>\n</ul>\n<p>The answers can be listed below:</p>\n<ul>\n<li>\n<p>Don't know yet.</p>\n</li>\n<li>\n<p>Yes, you can see the demo <a href=\"https://jsperf.com/delegating-capture-vs-bubble/2\" target=\"_blank\" rel=\"noopener\">here</a></p>\n</li>\n<li>\n<p>Yes.</p>\n</li>\n</ul>\n<h2>Ending</h2>\n<p>After words above, I think we should use event capturing as default.</p>\n<h2>Reference</h2>\n<p><a href=\"https://stackoverflow.com/questions/2661199/event-capturing-vs-event-bubbling/10335117\" target=\"_blank\" rel=\"noopener\">Event Capturing vs Event Bubbling</a></p>\n<p><a href=\"https://jsperf.com/delegating-capture-vs-bubble/2\" target=\"_blank\" rel=\"noopener\">delegating-capture-vs-bubble</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>When I am trying to delegate the <code>error</code> event of <code>img</code>, I find that those events won't bubble up to window. So,does that mean I have to bind so many events as many as images I have?</p>\n<h2>Main</h2>\n<p>After a while, I think of something about event capturing which maybe can solve this question. So, I tried code below:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"error.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"error.png\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'error'</span>, windowErrorCb, &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;, <span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">windowErrorCb</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = event.target</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isImg = target.tagName.toLowerCase() === <span class=\"string\">'img'</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isImg) &#123;</span><br><span class=\"line\">    imgErrorCb()</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">imgErrorCb</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isImgErrorHandled = target.hasAttribute(<span class=\"string\">'data-src-error'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isImgErrorHandled) &#123;</span><br><span class=\"line\">      target.setAttribute(<span class=\"string\">'data-src-error'</span>, <span class=\"string\">'handled'</span>)</span><br><span class=\"line\">      target.src = <span class=\"string\">'backup.png'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Code above works normally. If we change the <code>capture</code> and the last argument to <code>false</code>, it doesn't work.</p>\n<p>In this case, we can find that event capturing seems have more applicable situations than event bubbling. Also it seems faster because I catch and handle the event earlier than event bubbling.\nSo, I got these questions:</p>\n<ul>\n<li>\n<p>Why would we use event bubbling not event capturing as default except for compatibility?</p>\n</li>\n<li>\n<p>Does event capturing really faster than event bubbling as I thought?</p>\n</li>\n<li>\n<p>Does event capturing really have more applicable situations?</p>\n</li>\n</ul>\n<p>The answers can be listed below:</p>\n<ul>\n<li>\n<p>Don't know yet.</p>\n</li>\n<li>\n<p>Yes, you can see the demo <a href=\"https://jsperf.com/delegating-capture-vs-bubble/2\" target=\"_blank\" rel=\"noopener\">here</a></p>\n</li>\n<li>\n<p>Yes.</p>\n</li>\n</ul>\n<h2>Ending</h2>\n<p>After words above, I think we should use event capturing as default.</p>\n<h2>Reference</h2>\n<p><a href=\"https://stackoverflow.com/questions/2661199/event-capturing-vs-event-bubbling/10335117\" target=\"_blank\" rel=\"noopener\">Event Capturing vs Event Bubbling</a></p>\n<p><a href=\"https://jsperf.com/delegating-capture-vs-bubble/2\" target=\"_blank\" rel=\"noopener\">delegating-capture-vs-bubble</a></p>\n"},{"title":"WheelEvent Compatibility and Delta Handler","comments":1,"date":"2019-01-27T11:47:39.000Z","_content":"\nI have seen many times people talking about the compatibility problems of wheelEvent, something about `wheel`, `DOMMouseScroll`, `mousewheel` etc. But now, it seems we don't need to care about those compatibility problems anymore.\n\nAs [mdn](https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Browser_compatibility) shows, **IE9 support `wheel` event in `addEventListener` and `DOMMouseScroll` is only needed for Firefox 17-**. And for other major browsers, they all support `wheel` event.\n\nBut, there are other problems still need to take care.\n\n### `delta`\n\n`event.delta` returns different numbers in the major browsers. For instance, if you run the code below at your console in some page,\n\n```js\ndocument.body.addEventListener('wheel', function(event) {\n  console.log(event.deltaY)\n})\n```\n\nthen moving your mouse wheel, you will see the `deltaY` numbers.\n\n| browsers/win7 | deltaY |\n| ------------- | ------ |\n| Chrome 70     | 100    |\n| Firefox 64    | 3      |\n| IE 11         | 88.19  |\n\nWell, you can find a solution to unify the `deltaY`. But I think the easier way is to give up unifying and only do the accumulation job. For example, try the code below:\n\n```js\nlet wheelSize = 0\ndocument.body.addEventListener('wheel', function(event) {\n  wheelSize += event.deltaY > 0 ? 0.025 : -0.025\n  console.log(wheelSize, event.deltaY)\n})\n```\n\nIn this way, we will get the unified `wheelSize`.\n\n### More Situations Need to Watch Out\n\nWhen used in projects, there are more things we need to watch out. For example,\n\n- We might have `wheelSize` limit.\n- We might want to prevent calculating `wheelSize` when the page has been scrolled to the top or the bottom.\n- ...\n\nAnd the code would become more complicated. For instance,\n\n```js\nlet targetNode = document.body\nlet curWheelSize = 1\nlet minWheelSize = 1\nlet maxWheelSize = 10\nlet minScrollTop = 0\nlet maxScrollTop =\n  targetNode.parentNode.scrollHeight - targetNode.parentNode.offsetHeight\ntargetNode.addEventListener('wheel', wheelCb)\nfunction wheelCb(event) {\n  const isDeltaYPositive = event.deltaY > 0\n  let scrollTop = targetNode.parentNode.scrollTop\n  if (\n    (scrollTop <= minScrollTop && !isDeltaYPositive) ||\n    (scrollTop >= maxScrollTop && isDeltaYPositive)\n  ) {\n    return\n  }\n  let stepSize = isDeltaYPositive ? 0.025 : -0.025\n  let targetWheelSize = curWheelSize + stepSize\n  targetWheelSize = Math.max(targetWheelSize, minWheelSize)\n  targetWheelSize = Math.min(targetWheelSize, maxWheelSize)\n  curWheelSize = targetWheelSize\n}\n```\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/58)\n\n## Reference\n","source":"_posts/wheelevent-compatibility-and-delta-handler.md","raw":"---\ntitle: WheelEvent Compatibility and Delta Handler\ncategories: js\ntags:\n  - WheelEvent\n  - delta\n  - wheel\n  - DOMMouseScroll\n  - mousewheel\ncomments: true\ndate: 2019-01-27 19:47:39\n---\n\nI have seen many times people talking about the compatibility problems of wheelEvent, something about `wheel`, `DOMMouseScroll`, `mousewheel` etc. But now, it seems we don't need to care about those compatibility problems anymore.\n\nAs [mdn](https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Browser_compatibility) shows, **IE9 support `wheel` event in `addEventListener` and `DOMMouseScroll` is only needed for Firefox 17-**. And for other major browsers, they all support `wheel` event.\n\nBut, there are other problems still need to take care.\n\n### `delta`\n\n`event.delta` returns different numbers in the major browsers. For instance, if you run the code below at your console in some page,\n\n```js\ndocument.body.addEventListener('wheel', function(event) {\n  console.log(event.deltaY)\n})\n```\n\nthen moving your mouse wheel, you will see the `deltaY` numbers.\n\n| browsers/win7 | deltaY |\n| ------------- | ------ |\n| Chrome 70     | 100    |\n| Firefox 64    | 3      |\n| IE 11         | 88.19  |\n\nWell, you can find a solution to unify the `deltaY`. But I think the easier way is to give up unifying and only do the accumulation job. For example, try the code below:\n\n```js\nlet wheelSize = 0\ndocument.body.addEventListener('wheel', function(event) {\n  wheelSize += event.deltaY > 0 ? 0.025 : -0.025\n  console.log(wheelSize, event.deltaY)\n})\n```\n\nIn this way, we will get the unified `wheelSize`.\n\n### More Situations Need to Watch Out\n\nWhen used in projects, there are more things we need to watch out. For example,\n\n- We might have `wheelSize` limit.\n- We might want to prevent calculating `wheelSize` when the page has been scrolled to the top or the bottom.\n- ...\n\nAnd the code would become more complicated. For instance,\n\n```js\nlet targetNode = document.body\nlet curWheelSize = 1\nlet minWheelSize = 1\nlet maxWheelSize = 10\nlet minScrollTop = 0\nlet maxScrollTop =\n  targetNode.parentNode.scrollHeight - targetNode.parentNode.offsetHeight\ntargetNode.addEventListener('wheel', wheelCb)\nfunction wheelCb(event) {\n  const isDeltaYPositive = event.deltaY > 0\n  let scrollTop = targetNode.parentNode.scrollTop\n  if (\n    (scrollTop <= minScrollTop && !isDeltaYPositive) ||\n    (scrollTop >= maxScrollTop && isDeltaYPositive)\n  ) {\n    return\n  }\n  let stepSize = isDeltaYPositive ? 0.025 : -0.025\n  let targetWheelSize = curWheelSize + stepSize\n  targetWheelSize = Math.max(targetWheelSize, minWheelSize)\n  targetWheelSize = Math.min(targetWheelSize, maxWheelSize)\n  curWheelSize = targetWheelSize\n}\n```\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/58)\n\n## Reference\n","slug":"wheelevent-compatibility-and-delta-handler","published":1,"updated":"2019-01-27T14:39:09.925Z","layout":"post","photos":[],"link":"","_id":"cjv0yvitf003dborph86nlrlu","content":"<p>I have seen many times people talking about the compatibility problems of wheelEvent, something about <code>wheel</code>, <code>DOMMouseScroll</code>, <code>mousewheel</code> etc. But now, it seems we don't need to care about those compatibility problems anymore.</p>\n<p>As <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Browser_compatibility\" target=\"_blank\" rel=\"noopener\">mdn</a> shows, <strong>IE9 support <code>wheel</code> event in <code>addEventListener</code> and <code>DOMMouseScroll</code> is only needed for Firefox 17-</strong>. And for other major browsers, they all support <code>wheel</code> event.</p>\n<p>But, there are other problems still need to take care.</p>\n<h3><code>delta</code></h3>\n<p><code>event.delta</code> returns different numbers in the major browsers. For instance, if you run the code below at your console in some page,</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'wheel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.deltaY)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>then moving your mouse wheel, you will see the <code>deltaY</code> numbers.</p>\n<table>\n<thead>\n<tr>\n<th>browsers/win7</th>\n<th>deltaY</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chrome 70</td>\n<td>100</td>\n</tr>\n<tr>\n<td>Firefox 64</td>\n<td>3</td>\n</tr>\n<tr>\n<td>IE 11</td>\n<td>88.19</td>\n</tr>\n</tbody>\n</table>\n<p>Well, you can find a solution to unify the <code>deltaY</code>. But I think the easier way is to give up unifying and only do the accumulation job. For example, try the code below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> wheelSize = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'wheel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  wheelSize += event.deltaY &gt; <span class=\"number\">0</span> ? <span class=\"number\">0.025</span> : <span class=\"number\">-0.025</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(wheelSize, event.deltaY)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>In this way, we will get the unified <code>wheelSize</code>.</p>\n<h3>More Situations Need to Watch Out</h3>\n<p>When used in projects, there are more things we need to watch out. For example,</p>\n<ul>\n<li>We might have <code>wheelSize</code> limit.</li>\n<li>We might want to prevent calculating <code>wheelSize</code> when the page has been scrolled to the top or the bottom.</li>\n<li>...</li>\n</ul>\n<p>And the code would become more complicated. For instance,</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> targetNode = <span class=\"built_in\">document</span>.body</span><br><span class=\"line\"><span class=\"keyword\">let</span> curWheelSize = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> minWheelSize = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> maxWheelSize = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> minScrollTop = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> maxScrollTop =</span><br><span class=\"line\">  targetNode.parentNode.scrollHeight - targetNode.parentNode.offsetHeight</span><br><span class=\"line\">targetNode.addEventListener(<span class=\"string\">'wheel'</span>, wheelCb)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wheelCb</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isDeltaYPositive = event.deltaY &gt; <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> scrollTop = targetNode.parentNode.scrollTop</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    (scrollTop &lt;= minScrollTop &amp;&amp; !isDeltaYPositive) ||</span><br><span class=\"line\">    (scrollTop &gt;= maxScrollTop &amp;&amp; isDeltaYPositive)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stepSize = isDeltaYPositive ? <span class=\"number\">0.025</span> : <span class=\"number\">-0.025</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> targetWheelSize = curWheelSize + stepSize</span><br><span class=\"line\">  targetWheelSize = <span class=\"built_in\">Math</span>.max(targetWheelSize, minWheelSize)</span><br><span class=\"line\">  targetWheelSize = <span class=\"built_in\">Math</span>.min(targetWheelSize, maxWheelSize)</span><br><span class=\"line\">  curWheelSize = targetWheelSize</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/58\"><strong>Original Post</strong></a></p>\n<h2>Reference</h2>\n","site":{"data":{}},"excerpt":"","more":"<p>I have seen many times people talking about the compatibility problems of wheelEvent, something about <code>wheel</code>, <code>DOMMouseScroll</code>, <code>mousewheel</code> etc. But now, it seems we don't need to care about those compatibility problems anymore.</p>\n<p>As <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Browser_compatibility\" target=\"_blank\" rel=\"noopener\">mdn</a> shows, <strong>IE9 support <code>wheel</code> event in <code>addEventListener</code> and <code>DOMMouseScroll</code> is only needed for Firefox 17-</strong>. And for other major browsers, they all support <code>wheel</code> event.</p>\n<p>But, there are other problems still need to take care.</p>\n<h3><code>delta</code></h3>\n<p><code>event.delta</code> returns different numbers in the major browsers. For instance, if you run the code below at your console in some page,</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'wheel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.deltaY)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>then moving your mouse wheel, you will see the <code>deltaY</code> numbers.</p>\n<table>\n<thead>\n<tr>\n<th>browsers/win7</th>\n<th>deltaY</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Chrome 70</td>\n<td>100</td>\n</tr>\n<tr>\n<td>Firefox 64</td>\n<td>3</td>\n</tr>\n<tr>\n<td>IE 11</td>\n<td>88.19</td>\n</tr>\n</tbody>\n</table>\n<p>Well, you can find a solution to unify the <code>deltaY</code>. But I think the easier way is to give up unifying and only do the accumulation job. For example, try the code below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> wheelSize = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'wheel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  wheelSize += event.deltaY &gt; <span class=\"number\">0</span> ? <span class=\"number\">0.025</span> : <span class=\"number\">-0.025</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(wheelSize, event.deltaY)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>In this way, we will get the unified <code>wheelSize</code>.</p>\n<h3>More Situations Need to Watch Out</h3>\n<p>When used in projects, there are more things we need to watch out. For example,</p>\n<ul>\n<li>We might have <code>wheelSize</code> limit.</li>\n<li>We might want to prevent calculating <code>wheelSize</code> when the page has been scrolled to the top or the bottom.</li>\n<li>...</li>\n</ul>\n<p>And the code would become more complicated. For instance,</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> targetNode = <span class=\"built_in\">document</span>.body</span><br><span class=\"line\"><span class=\"keyword\">let</span> curWheelSize = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> minWheelSize = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> maxWheelSize = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> minScrollTop = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> maxScrollTop =</span><br><span class=\"line\">  targetNode.parentNode.scrollHeight - targetNode.parentNode.offsetHeight</span><br><span class=\"line\">targetNode.addEventListener(<span class=\"string\">'wheel'</span>, wheelCb)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wheelCb</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isDeltaYPositive = event.deltaY &gt; <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> scrollTop = targetNode.parentNode.scrollTop</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    (scrollTop &lt;= minScrollTop &amp;&amp; !isDeltaYPositive) ||</span><br><span class=\"line\">    (scrollTop &gt;= maxScrollTop &amp;&amp; isDeltaYPositive)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stepSize = isDeltaYPositive ? <span class=\"number\">0.025</span> : <span class=\"number\">-0.025</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> targetWheelSize = curWheelSize + stepSize</span><br><span class=\"line\">  targetWheelSize = <span class=\"built_in\">Math</span>.max(targetWheelSize, minWheelSize)</span><br><span class=\"line\">  targetWheelSize = <span class=\"built_in\">Math</span>.min(targetWheelSize, maxWheelSize)</span><br><span class=\"line\">  curWheelSize = targetWheelSize</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/58\"><strong>Original Post</strong></a></p>\n<h2>Reference</h2>\n"},{"title":"Difference Between mousemove and touchmove","comments":1,"date":"2018-10-05T05:08:58.000Z","_content":"\n## Preface\n\nIt is easy to know that `mousemove` on mobile should be `touchmove`. However, when you press the webpage by mouse it will trigger `mousedown` event for once and no `mousemove`. What if you touch the webpage with your hand?\n\nOne `touchstart` and no `touchmove`? No, No, No,,,\n\n## Main\n\nCompared with mobile, it's easy to control mouse. For example,\n\n## Ending\n\n## Reference\n","source":"_drafts/difference-between-mousemove-and-touchmove.md","raw":"---\ntitle: Difference Between mousemove and touchmove\ncategories: js\ntags:\n  - mobile\n  - mousemove\n  - touchmove\ncomments: true\ndate: 2018-10-05 13:08:58\n---\n\n## Preface\n\nIt is easy to know that `mousemove` on mobile should be `touchmove`. However, when you press the webpage by mouse it will trigger `mousedown` event for once and no `mousemove`. What if you touch the webpage with your hand?\n\nOne `touchstart` and no `touchmove`? No, No, No,,,\n\n## Main\n\nCompared with mobile, it's easy to control mouse. For example,\n\n## Ending\n\n## Reference\n","slug":"difference-between-mousemove-and-touchmove","published":0,"updated":"2018-10-05T06:53:55.900Z","layout":"post","photos":[],"link":"","_id":"cjv0yvitj003fborpw030oxb9","content":"<h2>Preface</h2>\n<p>It is easy to know that <code>mousemove</code> on mobile should be <code>touchmove</code>. However, when you press the webpage by mouse it will trigger <code>mousedown</code> event for once and no <code>mousemove</code>. What if you touch the webpage with your hand?</p>\n<p>One <code>touchstart</code> and no <code>touchmove</code>? No, No, No,,,</p>\n<h2>Main</h2>\n<p>Compared with mobile, it's easy to control mouse. For example,</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>It is easy to know that <code>mousemove</code> on mobile should be <code>touchmove</code>. However, when you press the webpage by mouse it will trigger <code>mousedown</code> event for once and no <code>mousemove</code>. What if you touch the webpage with your hand?</p>\n<p>One <code>touchstart</code> and no <code>touchmove</code>? No, No, No,,,</p>\n<h2>Main</h2>\n<p>Compared with mobile, it's easy to control mouse. For example,</p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n"},{"title":"When and How to Use Frame?","comments":1,"date":"2018-06-08T07:14:02.000Z","_content":"\n## Preface\n\nThere has been a long time that I don't know whether should I use frame like `jQuery` or still stick to pure js. So, I decided to summarize some principles for future reference.\n\n## Main\n\n#### Before using\n\n1.  Figure out the problem that the frame solved?\n2.  Figure out what kind of situation the frame would be useful, similar with above.\n3.  Why would so many people use this not other similar frames?\n4.  How many parts in the frame?\n5.  What is the relationship between those parts?\n\n#### When should use\n\n- Needed in work.\n- Emancipate the productive forces based on the fact that you can solve this with ease by pure js.\n\n#### When shouldn't use\n\n- Don't need in work and you don't know how to implement it with pure js and use it just for laze.\n- Need it in work and just use it without understanding the principle.\n\n## Recommendation\n\n- You can implement it with pure js easily so that you want to use it to emancipate the productive forces.\n- In need of other situation, you have to implement it immediately so you use it and figure out the principle as soon as possible in case of bugs.\n","source":"_posts/when-and-how-to-use-frame.md","raw":"---\ntitle: When and How to Use Frame?\ntags:\ncategories: frame\ncomments: true\ndate: 2018-06-08 15:14:02\n---\n\n## Preface\n\nThere has been a long time that I don't know whether should I use frame like `jQuery` or still stick to pure js. So, I decided to summarize some principles for future reference.\n\n## Main\n\n#### Before using\n\n1.  Figure out the problem that the frame solved?\n2.  Figure out what kind of situation the frame would be useful, similar with above.\n3.  Why would so many people use this not other similar frames?\n4.  How many parts in the frame?\n5.  What is the relationship between those parts?\n\n#### When should use\n\n- Needed in work.\n- Emancipate the productive forces based on the fact that you can solve this with ease by pure js.\n\n#### When shouldn't use\n\n- Don't need in work and you don't know how to implement it with pure js and use it just for laze.\n- Need it in work and just use it without understanding the principle.\n\n## Recommendation\n\n- You can implement it with pure js easily so that you want to use it to emancipate the productive forces.\n- In need of other situation, you have to implement it immediately so you use it and figure out the principle as soon as possible in case of bugs.\n","slug":"when-and-how-to-use-frame","published":1,"updated":"2018-06-08T07:30:43.907Z","layout":"post","photos":[],"link":"","_id":"cjv0yvitq003iborpruij2hpu","content":"<h2>Preface</h2>\n<p>There has been a long time that I don't know whether should I use frame like <code>jQuery</code> or still stick to pure js. So, I decided to summarize some principles for future reference.</p>\n<h2>Main</h2>\n<h4>Before using</h4>\n<ol>\n<li>Figure out the problem that the frame solved?</li>\n<li>Figure out what kind of situation the frame would be useful, similar with above.</li>\n<li>Why would so many people use this not other similar frames?</li>\n<li>How many parts in the frame?</li>\n<li>What is the relationship between those parts?</li>\n</ol>\n<h4>When should use</h4>\n<ul>\n<li>Needed in work.</li>\n<li>Emancipate the productive forces based on the fact that you can solve this with ease by pure js.</li>\n</ul>\n<h4>When shouldn't use</h4>\n<ul>\n<li>Don't need in work and you don't know how to implement it with pure js and use it just for laze.</li>\n<li>Need it in work and just use it without understanding the principle.</li>\n</ul>\n<h2>Recommendation</h2>\n<ul>\n<li>You can implement it with pure js easily so that you want to use it to emancipate the productive forces.</li>\n<li>In need of other situation, you have to implement it immediately so you use it and figure out the principle as soon as possible in case of bugs.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>There has been a long time that I don't know whether should I use frame like <code>jQuery</code> or still stick to pure js. So, I decided to summarize some principles for future reference.</p>\n<h2>Main</h2>\n<h4>Before using</h4>\n<ol>\n<li>Figure out the problem that the frame solved?</li>\n<li>Figure out what kind of situation the frame would be useful, similar with above.</li>\n<li>Why would so many people use this not other similar frames?</li>\n<li>How many parts in the frame?</li>\n<li>What is the relationship between those parts?</li>\n</ol>\n<h4>When should use</h4>\n<ul>\n<li>Needed in work.</li>\n<li>Emancipate the productive forces based on the fact that you can solve this with ease by pure js.</li>\n</ul>\n<h4>When shouldn't use</h4>\n<ul>\n<li>Don't need in work and you don't know how to implement it with pure js and use it just for laze.</li>\n<li>Need it in work and just use it without understanding the principle.</li>\n</ul>\n<h2>Recommendation</h2>\n<ul>\n<li>You can implement it with pure js easily so that you want to use it to emancipate the productive forces.</li>\n<li>In need of other situation, you have to implement it immediately so you use it and figure out the principle as soon as possible in case of bugs.</li>\n</ul>\n"},{"title":"Move the Switch of Console to URLSearchParams","comments":1,"date":"2018-10-05T01:31:50.000Z","_content":"\n## Preface\n\nIt is very common for us to use `console.log` When we are in a development environment. So, how do you handle this when you are preparing to deploy it to server?\n\nIn the past, I chose to delete those debug logs. However, I guess nobody likes doing that and in some place, I really want to keep that.\n\n## Main\n\nOne day, I find a better way to handle this. Before the main js code, I add code below:\n\n```js\nlet urlSearchParams = new URLSearchParams(window.location.search)\nlet isDebug = urlSearchParams.get('debug') === '1'\nif (!isDebug) {\n  console.log = function() {}\n}\n```\n\n## Ending\n\n## Reference\n","source":"_posts/move-the-switch-of-console-to-urlsearchparams.md","raw":"---\ntitle: Move the Switch of Console to URLSearchParams\ncategories: debug\ntags:\n  - console.log\n  - URLSearchParams\ncomments: true\ndate: 2018-10-05 09:31:50\n---\n\n## Preface\n\nIt is very common for us to use `console.log` When we are in a development environment. So, how do you handle this when you are preparing to deploy it to server?\n\nIn the past, I chose to delete those debug logs. However, I guess nobody likes doing that and in some place, I really want to keep that.\n\n## Main\n\nOne day, I find a better way to handle this. Before the main js code, I add code below:\n\n```js\nlet urlSearchParams = new URLSearchParams(window.location.search)\nlet isDebug = urlSearchParams.get('debug') === '1'\nif (!isDebug) {\n  console.log = function() {}\n}\n```\n\n## Ending\n\n## Reference\n","slug":"move-the-switch-of-console-to-urlsearchparams","published":1,"updated":"2018-10-05T01:50:08.502Z","layout":"post","photos":[],"link":"","_id":"cjv0yvitu003kborpz304tcg3","content":"<h2>Preface</h2>\n<p>It is very common for us to use <code>console.log</code> When we are in a development environment. So, how do you handle this when you are preparing to deploy it to server?</p>\n<p>In the past, I chose to delete those debug logs. However, I guess nobody likes doing that and in some place, I really want to keep that.</p>\n<h2>Main</h2>\n<p>One day, I find a better way to handle this. Before the main js code, I add code below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> urlSearchParams = <span class=\"keyword\">new</span> URLSearchParams(<span class=\"built_in\">window</span>.location.search)</span><br><span class=\"line\"><span class=\"keyword\">let</span> isDebug = urlSearchParams.get(<span class=\"string\">'debug'</span>) === <span class=\"string\">'1'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isDebug) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>It is very common for us to use <code>console.log</code> When we are in a development environment. So, how do you handle this when you are preparing to deploy it to server?</p>\n<p>In the past, I chose to delete those debug logs. However, I guess nobody likes doing that and in some place, I really want to keep that.</p>\n<h2>Main</h2>\n<p>One day, I find a better way to handle this. Before the main js code, I add code below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> urlSearchParams = <span class=\"keyword\">new</span> URLSearchParams(<span class=\"built_in\">window</span>.location.search)</span><br><span class=\"line\"><span class=\"keyword\">let</span> isDebug = urlSearchParams.get(<span class=\"string\">'debug'</span>) === <span class=\"string\">'1'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isDebug) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n"},{"title":"X-UA-Compatible and ie=edge","comments":1,"date":"2018-10-03T11:43:57.000Z","_content":"\n## Preface\n\n平时会用 vue 写新项目，老项目就在原有基础上更新。对于 vue 这种框架，使用官方的脚手架通常就避免了很多问题，就像平时用模板创建新的单页一样。\n\n然而有时总是会遇到些不按模板走的代码，虽然跑起来也没有问题，但是放到有些浏览器上就有 bug 了，这个时候对既有模板的理解和掌握就很重要了。\n\n## Main\n\n当我用 html 模板创建一个新单页时，拿到的页面是这样的，vue 也是类似，至少三个 `meta` 标签基本都是一样的：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n\n<body>\n</body>\n\n</html>\n```\n\n`viewport` 是在兼容移动端时才了解的内容，费了不少功夫。而 `X-UA-Compatible` 则是在遇到非常规代码的时候才想起来的。有一回改个老项目，用了 `transform`，在 ie11 上测试，没有用，而且在它的工具栏里样式表里根本看不到我写的代码，这个时候我就好奇了，这是 ie11 啊，怎么会不支持 `transform` 呢？然后我瞄了一下开发者工具，大概是这样的：\n\n![截图20181003201618.png](../images/截图20181003201618.png)\n\n然后我就好奇了，为什么会是 ie7 模式呢？我明明装的是 ie11 浏览器啊，然后脑袋一闪，好像明白了什么，看了看 `html` ，果然没有:\n\n```html\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n```\n\n加上之后，再刷新，网页就正常了。\n\n在这件事之前，我知道这个东西，但是因为是用的模板，一直没有遇到过这个问题，而且通常来说，我会以为，我既然是在 ie11 里打开的，默认你也没有理由用 ie11- 的文档模式去渲染啊，结果就错了。后来看到 SO 上高票答主大概是这么解释 ie 的行为的：\n\n_ie 会用它认为最好的方式去渲染页面，如果没有上面那行代码的话_\n\n此外，ie11 已经开始废弃上面那个了，如果不兼容 ie 的话，其实上面的代码也可以不用写了，不过目前为止 html 模板和 vue 的模板都还是默认支持的。而上面的那行代码实际意思呢，就是：\n\n_Edge：始终以最新的文档模式来渲染页面。忽略文档类型声明。对于 IE8，始终保持以 IE8 标准模式渲染页面。对于 IE9，则以 IE9 标准模式渲染页面。_\n\n当然 ie 还可以等于其他值，不过其他值大多都是老版本，目前而言，都没有必要去纠结了，譬如：\n\n- \"IE=edge\"\n- \"IE=11\"\n- \"IE=EmulateIE11\"\n- \"IE=10\"\n- \"IE=EmulateIE10\"\n- \"IE=9\"\n- \"IE=EmulateIE9\n- ...\n\n## Ending\n\n## Reference\n\n- [What does <meta http-equiv=“X-UA-Compatible” content=“IE=edge”> do?](https://stackoverflow.com/questions/6771258/what-does-meta-http-equiv-x-ua-compatible-content-ie-edge-do)\n","source":"_posts/x-ua-compatible-and-ie-edge.md","raw":"---\ntitle: X-UA-Compatible and ie=edge\ncategories: html\ntags:\n  - meta\n  - http-equiv\n  - X-UA-Compatible\n  - content\n  - ie=edge\ncomments: true\ndate: 2018-10-03 19:43:57\n---\n\n## Preface\n\n平时会用 vue 写新项目，老项目就在原有基础上更新。对于 vue 这种框架，使用官方的脚手架通常就避免了很多问题，就像平时用模板创建新的单页一样。\n\n然而有时总是会遇到些不按模板走的代码，虽然跑起来也没有问题，但是放到有些浏览器上就有 bug 了，这个时候对既有模板的理解和掌握就很重要了。\n\n## Main\n\n当我用 html 模板创建一个新单页时，拿到的页面是这样的，vue 也是类似，至少三个 `meta` 标签基本都是一样的：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n\n<body>\n</body>\n\n</html>\n```\n\n`viewport` 是在兼容移动端时才了解的内容，费了不少功夫。而 `X-UA-Compatible` 则是在遇到非常规代码的时候才想起来的。有一回改个老项目，用了 `transform`，在 ie11 上测试，没有用，而且在它的工具栏里样式表里根本看不到我写的代码，这个时候我就好奇了，这是 ie11 啊，怎么会不支持 `transform` 呢？然后我瞄了一下开发者工具，大概是这样的：\n\n![截图20181003201618.png](../images/截图20181003201618.png)\n\n然后我就好奇了，为什么会是 ie7 模式呢？我明明装的是 ie11 浏览器啊，然后脑袋一闪，好像明白了什么，看了看 `html` ，果然没有:\n\n```html\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n```\n\n加上之后，再刷新，网页就正常了。\n\n在这件事之前，我知道这个东西，但是因为是用的模板，一直没有遇到过这个问题，而且通常来说，我会以为，我既然是在 ie11 里打开的，默认你也没有理由用 ie11- 的文档模式去渲染啊，结果就错了。后来看到 SO 上高票答主大概是这么解释 ie 的行为的：\n\n_ie 会用它认为最好的方式去渲染页面，如果没有上面那行代码的话_\n\n此外，ie11 已经开始废弃上面那个了，如果不兼容 ie 的话，其实上面的代码也可以不用写了，不过目前为止 html 模板和 vue 的模板都还是默认支持的。而上面的那行代码实际意思呢，就是：\n\n_Edge：始终以最新的文档模式来渲染页面。忽略文档类型声明。对于 IE8，始终保持以 IE8 标准模式渲染页面。对于 IE9，则以 IE9 标准模式渲染页面。_\n\n当然 ie 还可以等于其他值，不过其他值大多都是老版本，目前而言，都没有必要去纠结了，譬如：\n\n- \"IE=edge\"\n- \"IE=11\"\n- \"IE=EmulateIE11\"\n- \"IE=10\"\n- \"IE=EmulateIE10\"\n- \"IE=9\"\n- \"IE=EmulateIE9\n- ...\n\n## Ending\n\n## Reference\n\n- [What does <meta http-equiv=“X-UA-Compatible” content=“IE=edge”> do?](https://stackoverflow.com/questions/6771258/what-does-meta-http-equiv-x-ua-compatible-content-ie-edge-do)\n","slug":"x-ua-compatible-and-ie-edge","published":1,"updated":"2018-10-03T12:27:07.222Z","layout":"post","photos":[],"link":"","_id":"cjv0yvitz003nborpvn4kojkf","content":"<h2>Preface</h2>\n<p>平时会用 vue 写新项目，老项目就在原有基础上更新。对于 vue 这种框架，使用官方的脚手架通常就避免了很多问题，就像平时用模板创建新的单页一样。</p>\n<p>然而有时总是会遇到些不按模板走的代码，虽然跑起来也没有问题，但是放到有些浏览器上就有 bug 了，这个时候对既有模板的理解和掌握就很重要了。</p>\n<h2>Main</h2>\n<p>当我用 html 模板创建一个新单页时，拿到的页面是这样的，vue 也是类似，至少三个 <code>meta</code> 标签基本都是一样的：</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>viewport</code> 是在兼容移动端时才了解的内容，费了不少功夫。而 <code>X-UA-Compatible</code> 则是在遇到非常规代码的时候才想起来的。有一回改个老项目，用了 <code>transform</code>，在 ie11 上测试，没有用，而且在它的工具栏里样式表里根本看不到我写的代码，这个时候我就好奇了，这是 ie11 啊，怎么会不支持 <code>transform</code> 呢？然后我瞄了一下开发者工具，大概是这样的：</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181003201618.png\" alt=\"截图20181003201618.png\"></p>\n<p>然后我就好奇了，为什么会是 ie7 模式呢？我明明装的是 ie11 浏览器啊，然后脑袋一闪，好像明白了什么，看了看 <code>html</code> ，果然没有:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>加上之后，再刷新，网页就正常了。</p>\n<p>在这件事之前，我知道这个东西，但是因为是用的模板，一直没有遇到过这个问题，而且通常来说，我会以为，我既然是在 ie11 里打开的，默认你也没有理由用 ie11- 的文档模式去渲染啊，结果就错了。后来看到 SO 上高票答主大概是这么解释 ie 的行为的：</p>\n<p><em>ie 会用它认为最好的方式去渲染页面，如果没有上面那行代码的话</em></p>\n<p>此外，ie11 已经开始废弃上面那个了，如果不兼容 ie 的话，其实上面的代码也可以不用写了，不过目前为止 html 模板和 vue 的模板都还是默认支持的。而上面的那行代码实际意思呢，就是：</p>\n<p><em>Edge：始终以最新的文档模式来渲染页面。忽略文档类型声明。对于 IE8，始终保持以 IE8 标准模式渲染页面。对于 IE9，则以 IE9 标准模式渲染页面。</em></p>\n<p>当然 ie 还可以等于其他值，不过其他值大多都是老版本，目前而言，都没有必要去纠结了，譬如：</p>\n<ul>\n<li>&quot;IE=edge&quot;</li>\n<li>&quot;IE=11&quot;</li>\n<li>&quot;IE=EmulateIE11&quot;</li>\n<li>&quot;IE=10&quot;</li>\n<li>&quot;IE=EmulateIE10&quot;</li>\n<li>&quot;IE=9&quot;</li>\n<li>&quot;IE=EmulateIE9</li>\n<li>...</li>\n</ul>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/6771258/what-does-meta-http-equiv-x-ua-compatible-content-ie-edge-do\" target=\"_blank\" rel=\"noopener\">What does &lt;meta http-equiv=“X-UA-Compatible” content=“IE=edge”&gt; do?</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>平时会用 vue 写新项目，老项目就在原有基础上更新。对于 vue 这种框架，使用官方的脚手架通常就避免了很多问题，就像平时用模板创建新的单页一样。</p>\n<p>然而有时总是会遇到些不按模板走的代码，虽然跑起来也没有问题，但是放到有些浏览器上就有 bug 了，这个时候对既有模板的理解和掌握就很重要了。</p>\n<h2>Main</h2>\n<p>当我用 html 模板创建一个新单页时，拿到的页面是这样的，vue 也是类似，至少三个 <code>meta</code> 标签基本都是一样的：</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>viewport</code> 是在兼容移动端时才了解的内容，费了不少功夫。而 <code>X-UA-Compatible</code> 则是在遇到非常规代码的时候才想起来的。有一回改个老项目，用了 <code>transform</code>，在 ie11 上测试，没有用，而且在它的工具栏里样式表里根本看不到我写的代码，这个时候我就好奇了，这是 ie11 啊，怎么会不支持 <code>transform</code> 呢？然后我瞄了一下开发者工具，大概是这样的：</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181003201618.png\" alt=\"截图20181003201618.png\"></p>\n<p>然后我就好奇了，为什么会是 ie7 模式呢？我明明装的是 ie11 浏览器啊，然后脑袋一闪，好像明白了什么，看了看 <code>html</code> ，果然没有:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>加上之后，再刷新，网页就正常了。</p>\n<p>在这件事之前，我知道这个东西，但是因为是用的模板，一直没有遇到过这个问题，而且通常来说，我会以为，我既然是在 ie11 里打开的，默认你也没有理由用 ie11- 的文档模式去渲染啊，结果就错了。后来看到 SO 上高票答主大概是这么解释 ie 的行为的：</p>\n<p><em>ie 会用它认为最好的方式去渲染页面，如果没有上面那行代码的话</em></p>\n<p>此外，ie11 已经开始废弃上面那个了，如果不兼容 ie 的话，其实上面的代码也可以不用写了，不过目前为止 html 模板和 vue 的模板都还是默认支持的。而上面的那行代码实际意思呢，就是：</p>\n<p><em>Edge：始终以最新的文档模式来渲染页面。忽略文档类型声明。对于 IE8，始终保持以 IE8 标准模式渲染页面。对于 IE9，则以 IE9 标准模式渲染页面。</em></p>\n<p>当然 ie 还可以等于其他值，不过其他值大多都是老版本，目前而言，都没有必要去纠结了，譬如：</p>\n<ul>\n<li>&quot;IE=edge&quot;</li>\n<li>&quot;IE=11&quot;</li>\n<li>&quot;IE=EmulateIE11&quot;</li>\n<li>&quot;IE=10&quot;</li>\n<li>&quot;IE=EmulateIE10&quot;</li>\n<li>&quot;IE=9&quot;</li>\n<li>&quot;IE=EmulateIE9</li>\n<li>...</li>\n</ul>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/6771258/what-does-meta-http-equiv-x-ua-compatible-content-ie-edge-do\" target=\"_blank\" rel=\"noopener\">What does &lt;meta http-equiv=“X-UA-Compatible” content=“IE=edge”&gt; do?</a></li>\n</ul>\n"},{"title":"Layout On Mobile","comments":1,"date":"2018-06-15T11:03:50.000Z","_content":"\n## Preface\n\nBased on [first-exploration-on-mobile][first-exploration-on-mobile] we can develop adaptive pages on mobile. Now, let's do it.\n\n## Main\n\n### Basic Code\n\nSuppose that we got the PSD which is designed according to iPhone6. So, what do we have now?\n\n- width:375\\*667\n- DPR:2\n\nSo, let's develop according to iPhone6 first. And this is the basic code:\n\n```html\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <meta name=\"viewport\" content=\"width=375,initial-scale=1,user-scalable=no\">\n  <style>\n    /* reset.css */\n\n    * {\n      margin: 0;\n      padding: 0;\n    }\n\n    html,\n    body {\n      height: 100%;\n      width: 100%;\n    }\n\n    li {\n      list-style: none;\n    }\n\n    a {\n      text-decoration: none;\n      color: inherit;\n    }\n\n    /* base.css */\n\n    .nav,\n    .nav__list {\n      width: 100%;\n      height: 100%;\n    }\n\n    .nav__list {\n      background-color: pink;\n      overflow: hidden;\n    }\n\n    .nav__item {\n      width: 65px;\n      height: 40px;\n      line-height: 40px;\n      margin: 5px;\n      float: left;\n      background-color: yellowgreen;\n      color: white;\n    }\n\n    .nav__link {\n      display: block;\n      width: 100%;\n      height: 100%;\n      text-align: center;\n    }\n\n  </style>\n</head>\n\n<body>\n  <nav class=\"nav\">\n    <ul class=\"nav__list\">\n      <li class=\"nav__item\">\n        <a href=\"#\" class=\"nav__link\">nav1</a>\n      </li>\n      <li class=\"nav__item\">\n        <a href=\"#\" class=\"nav__link\">nav2</a>\n      </li>\n      <li class=\"nav__item\">\n        <a href=\"#\" class=\"nav__link\">nav3</a>\n      </li>\n      <li class=\"nav__item\">\n        <a href=\"#\" class=\"nav__link\">nav4</a>\n      </li>\n      <li class=\"nav__item\">\n        <a href=\"#\" class=\"nav__link\">nav5</a>\n      </li>\n    </ul>\n  </nav>\n</body>\n```\n\nWell, I made a simple one just for test. Hope you don't mind. If we switch to iPhone6 device, it looks okay.\n\n![](../images/截图20180616161355.png)\n\nOf course it will be terrible if we switch to other devices. For example, iPhone6 Plus:\n\n![](../images/截图20180616161446.png)\n\nWe got extra space on the right because the width of iPhone6 Plus is 414px which is wider than 375px in iPhone6.\n\n**Please notice that we have used 65px, 40px and 5px in the css. Those values should be zoomed according to the device-width.**\n\nSo, here is the way how we fix this:\n\n### Adaptive by rem and js\n\nWe need do some transform to use rem. On iPhone6 with 375px and DPR:2,\n\n1.  We can use 65px, 40px, 5px with:\n\n```html\n  <meta name=\"viewport\" content=\"width=375,initial-scale=1,user-scalable=no\">\n```\n\n2.  We can also use 130px, 80px, 10px with:\n\n```html\n  <meta name=\"viewport\" content=\"width=750,initial-scale=0.5\">\n```\n\n3.  Further on, if we calculate rem by (device-width\\*DPR)/10:\n\n```html\n  <!--width=750=375*DPR,initial-scale=0.5=1/DPR-->\n  <meta name=\"viewport\" content=\"width=750,initial-scale=0.5\">\n```\n\n```css\nhtml {\n  /*75px = device-width * DPR / 10 */\n  font-size: 75px;\n}\nbody {\n  /*32px = 16px * DPR */\n  font-size: 32px;\n}\n```\n\nThose numbers would be:\n\n- 65px => (65/375) \\* device-width => (65/375) \\* 10rem\n- 40px => (40/375) \\* device-width => (40/375) \\* 10rem\n- 5px => (5/375) \\* device-width => (5/375) \\* 10rem\n\nIn fact, options above will get the same effect. But for option3, **we make everything connected with DPR and device-width.**\n\nSo, here is the basic logic to be adaptive:\n\n1.  We use the device-width\\*DPR/10 to calculate `rem` and set it on `html`.\n2.  We set (initial font-size \\* DPR) on `body`.\n3.  For `font-size` set with px, we have to set different font-size for different DPR by [@media/-webkit-device-pixel-ratio][@media/-webkit-device-pixel-ratio] or plugins(e.g. less).\n4.  We update `meta` by setting the `width` as device-width\\*DPR and `initial-scale` as 1/DPR which would make the page render in device-width\\*DPR and then scale to device-width.\n\nWell, you can just see the code:\n\n```html\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n  <script>\n    document.addEventListener(\n      'DOMContentLoaded',\n      () => {\n        let dpr = window.devicePixelRatio\n        let html = document.documentElement\n        let body = document.body\n        let deviceWidth = window.innerWidth || html.clientWidth\n        html.style.fontSize = (deviceWidth * dpr) / 10 + 'px'\n        html.setAttribute('data-dpr', dpr)\n        body.style.fontSize = 'initial'\n        body.style.fontSize = parseInt(getComputedStyle(body).fontSize) * dpr + 'px'\n        let metaViewport = document.querySelector('meta[name=viewport]')\n        metaViewport.setAttribute(\n          'content',\n          `width=${dpr * deviceWidth},initial-scale=${1 / dpr}`\n        )\n      },\n      { capture: true },\n      true\n    )\n  </script>\n  <link rel=\"stylesheet/less\" href=\"./less.less\">\n  <script src=\"http://cdnjs.cloudflare.com/ajax/libs/less.js/3.0.2/less.min.js\"></script>\n</head>\n```\n\nbase.css in _less.less_\n\n```less\n/* base.css */\n.px2px(@name, @px) {\n  @{name}: round(@px) * 1px;\n  [data-dpr='2'] & {\n    @{name}: round(@px*2) * 1px;\n  }\n  // for mx3\n  [data-dpr='2.5'] & {\n    @{name}: round(@px * 2.5) * 1px;\n  }\n  //for Pixel2\n  [data-dpr='2.625'] & {\n    @{name}: round(@px * 2.625) * 1px;\n  }\n  // for XiaoMi note\n  [data-dpr='2.75'] & {\n    @{name}: round(@px * 2.75) * 1px;\n  }\n  [data-dpr='3'] & {\n    @{name}: round(@px * 3) * 1px;\n  }\n  //for Pixel2 XL\n  [data-dpr='3.5'] & {\n    @{name}: round(@px * 3.5) * 1px;\n  }\n  // for Samsung note4\n  [data-dpr='4'] & {\n    @{name}: @px * 4px;\n  }\n}\n\n.nav {\n  //suggest use em not px otherwise have to set different font-size for different DPR\n  .px2px(font-size, 16px);\n  overflow: hidden;\n  width: 100%;\n}\n\n.nav__list {\n  // width: 110%;\n  width: 100%;\n  height: 100%;\n  // for inline-block\n  // white-space: nowrap;\n  overflow: hidden;\n  background-color: pink;\n  // letter-spacing: -0.3em;\n}\n\n.nav__item {\n  float: left;\n  // display: inline-block;\n  // letter-spacing: normal;\n  color: white;\n  background-color: yellowgreen;\n\n  width: 65/375 * 10rem;\n  height: 40/375 * 10rem;\n\n  margin: 5/375 * 10rem;\n  line-height: 40/375 * 10rem;\n}\n\n.nav__link {\n  display: block;\n\n  width: 100%;\n  height: 100%;\n\n  text-align: center;\n}\n```\n\nCode above will work in Apple's product. However, when we switch to Pixel 2 we will find this:\n\n![](../images/截图20180617130210.png)\n\nAfter a little calculation, I find that the total width of 5 `navs` is 1078.85 while width of `.nav__list` is 1078. Well, I think it is reasonable though I hate this.\n\nIn this case, we have to do something else to fix this. For example:\n\n- Set `margin-right:auto` on the last nav.\n- Set wider `width` of `.nav__list` and set `overflow:hidden` on `.nav`.\n- Use `width:20%` and `padding` instead of `margin`.\n- Other css tricks.\n\nAnyway, this is the previous solution for adaptation on mobile before appearance of `vw`,`flex` and `grid` layout.\n\nLet's make a conclusion:\n\n- principle\n\n1.  Set different font-size for different DPR by less.\n2.  Use viewport scale to solve the problem of 1px on border and font-size.\n3.  Make the width and height of element connect with device-width by `rem`.\n\n- pro\n\n1.  Fix 1px problem on `border` because we set 1px on device\\*DPR.\n\n- con\n\n1.  We have to set lots of `font-size` based on DPR every time we want to set `font-size` with px. Though we can simplify our job by preprocessor(e.g. less). However, how we going to do with more and more DPR?\n\n```less\n.px2px(@name, @px) {\n  @{name}: round(@px) * 1px;\n  [data-dpr='2'] & {\n    @{name}: round(@px*2) * 1px;\n  }\n  // for mx3\n  [data-dpr='2.5'] & {\n    @{name}: round(@px * 2.5) * 1px;\n  }\n  //for Pixel2\n  [data-dpr='2.625'] & {\n    @{name}: round(@px * 2.625) * 1px;\n  }\n  // for XiaoMi note\n  [data-dpr='2.75'] & {\n    @{name}: round(@px * 2.75) * 1px;\n  }\n  [data-dpr='3'] & {\n    @{name}: round(@px * 3) * 1px;\n  }\n  //for Pixel2 XL\n  [data-dpr='3.5'] & {\n    @{name}: round(@px * 3.5) * 1px;\n  }\n  // for Samsung note4\n  [data-dpr='4'] & {\n    @{name}: @px * 4px;\n  }\n}\n```\n\nWrite more and more? That's not a good idea.\n\n**If we use `em` instead it will not be a problem because we already set the initial font-size \\* DPR on `body`.**\n\n2.  Decimals appear which may cause a little problem in layout.\n\n### Adaptive by vw\n\nBefore we start with `vw` let's take a look at the rem and js solution. So, do we have a **better** solution for:\n\n1.  border 1px problem? I don't think so.\n2.  make the width and height of element connect with device-width? Yes, we do have `vw`, `vh` even `vmin` and `vmax`.\n\nAnd for the con of the rem and js solution:\n\n1.  **In this case, we can use `rem` instead of `em` because `rem` works more like `px` than `em`**\n2.  Can we avoid the decimals ? May be not with `vw` but won't be worse than `rem`.\n\nAnyway, here is the code:\n\n```html\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n  <script>\n    document.addEventListener(\n      'DOMContentLoaded',\n      () => {\n        let dpr = window.devicePixelRatio\n        let html = document.documentElement\n        let body = document.body\n        let deviceWidth = window.innerWidth || html.clientWidth\n        html.setAttribute('data-dpr', dpr)\n        html.style.fontSize = 'initial'\n        html.style.fontSize = parseInt(getComputedStyle(html).fontSize) * dpr + 'px'\n        let metaViewport = document.querySelector('meta[name=viewport]')\n        metaViewport.setAttribute(\n          'content',\n          `width=${dpr * deviceWidth},initial-scale=${1 / dpr}`\n        )\n      },\n      { capture: true },\n      true\n    )\n  </script>\n  <link rel=\"stylesheet/less\" href=\"./less.less\">\n  <script src=\"http://cdnjs.cloudflare.com/ajax/libs/less.js/3.0.2/less.min.js\"></script>\n</head>\n```\n\nbase.css in _less.less_\n\n```less\n/* base.css */\n.nav {\n  font-size: 1rem;\n  width: 100%;\n}\n\n.nav__list {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  background-color: pink;\n}\n\n.nav__item {\n  float: left;\n  color: white;\n  background-color: yellowgreen;\n\n  width: 65/375 * 100vw;\n  height: 40/375 * 100vw;\n\n  margin: 5/375 * 100vw;\n  line-height: 40/375 * 100vw;\n}\n\n.nav__link {\n  display: block;\n\n  width: 100%;\n  height: 100%;\n\n  text-align: center;\n}\n```\n\nI tested every device in chrome device-mode. They all work.\n\n**However, there are still decimals which might bite you someday.**\n\nAnyway, let's make a conclusion:\n\n- principle\n\n1.  Make the font-size connect with dpr by `rem`.\n2.  Use viewport scale to solve the problem of 1px on border and font-size.\n3.  Make the width and height of element connect with device-width by `vw`.\n\n- pro\n\n1.  Border 1px problem is solved as before.\n2.  Decimals problem will be a litter better than rem and js solution.\n\n- con\n\n1.  Decimals still exist.\n\n### Adaptive by vw and flex\n\nSolution with vw almost perfect except the decimals. So, how we are going to fix that? `Flex` gave us a choice.\n\n**We can leave the decimals to browser by `flex`.**\n\n```less\n/*part of css which has been modified*/\n.nav__list {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  background-color: pink;\n  display: flex; /*new added*/\n  justify-content: space-around; /*new added*/\n}\n\n.nav__item {\n  color: white;\n  background-color: yellowgreen;\n  flex: 0 0 auto; /*new added*/\n\n  width: 65/375 * 100vw;\n  height: 40/375 * 100vw;\n\n  line-height: 40/375 * 100vw;\n}\n```\n\nIf you don't know something about flex, please check MDN. Anyway, we can leave decimals to browser. That is the most exciting part.\n\nWell, let's make a conclusion:\n\n- principle\n\n1.  Make the font-size connect with dpr by `rem`.\n2.  Use viewport scale to solve the problem of 1px on border and font-size.\n3.  Make the width and height of element connect with device-width by `vw`.\n4.  Leave margin to browser by `flex`.\n\n- pro\n\n1.  Border 1px problem is solved as before.\n2.  Decimals problem will be better than `vw`.\n\n- con\n\n1.  Decimals still exist but only has a little influence.\n\n## Ending\n\nAnyway, the decimals problem always exist because of different sizes of mobiles. But the more new API we have, the less influence it will have.\n\nBesides, js above is not perfect. Here is the [current][current] version I am using.\n\nAnd the last thing is we didn't handle the problem with `img`. Maybe you should seek some help from [retina.js][retina.js].\n\n## Reference\n\n[first-exploration-on-mobile][first-exploration-on-mobile]\n\n[@media/-webkit-device-pixel-ratio][@media/-webkit-device-pixel-ratio]\n\n[lib-flexible][lib-flexible]\n\n[retina.js][retina.js]\n\n[retina.js]: https://github.com/strues/retinajs\n[first-exploration-on-mobile]: ../first-exploration-on-mobile/\n[@media/-webkit-device-pixel-ratio]: https://developer.mozilla.org/en-US/docs/Web/CSS/@media/-webkit-device-pixel-ratio\n[lib-flexible]: https://github.com/amfe/lib-flexible\n[current]: https://github.com/xianshenglu/mobile/blob/master/layout/\n","source":"_posts/layout-on-mobile.md","raw":"---\ntitle: Layout On Mobile\ntags:\n- mobile\n- rem\n- initial-scale\n- device-width\n- DPR\n- vw\n- flex\n- orientationchange\n\ncategories: css\ncomments: true\ndate: 2018-06-15 19:03:50\n---\n\n## Preface\n\nBased on [first-exploration-on-mobile][first-exploration-on-mobile] we can develop adaptive pages on mobile. Now, let's do it.\n\n## Main\n\n### Basic Code\n\nSuppose that we got the PSD which is designed according to iPhone6. So, what do we have now?\n\n- width:375\\*667\n- DPR:2\n\nSo, let's develop according to iPhone6 first. And this is the basic code:\n\n```html\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <meta name=\"viewport\" content=\"width=375,initial-scale=1,user-scalable=no\">\n  <style>\n    /* reset.css */\n\n    * {\n      margin: 0;\n      padding: 0;\n    }\n\n    html,\n    body {\n      height: 100%;\n      width: 100%;\n    }\n\n    li {\n      list-style: none;\n    }\n\n    a {\n      text-decoration: none;\n      color: inherit;\n    }\n\n    /* base.css */\n\n    .nav,\n    .nav__list {\n      width: 100%;\n      height: 100%;\n    }\n\n    .nav__list {\n      background-color: pink;\n      overflow: hidden;\n    }\n\n    .nav__item {\n      width: 65px;\n      height: 40px;\n      line-height: 40px;\n      margin: 5px;\n      float: left;\n      background-color: yellowgreen;\n      color: white;\n    }\n\n    .nav__link {\n      display: block;\n      width: 100%;\n      height: 100%;\n      text-align: center;\n    }\n\n  </style>\n</head>\n\n<body>\n  <nav class=\"nav\">\n    <ul class=\"nav__list\">\n      <li class=\"nav__item\">\n        <a href=\"#\" class=\"nav__link\">nav1</a>\n      </li>\n      <li class=\"nav__item\">\n        <a href=\"#\" class=\"nav__link\">nav2</a>\n      </li>\n      <li class=\"nav__item\">\n        <a href=\"#\" class=\"nav__link\">nav3</a>\n      </li>\n      <li class=\"nav__item\">\n        <a href=\"#\" class=\"nav__link\">nav4</a>\n      </li>\n      <li class=\"nav__item\">\n        <a href=\"#\" class=\"nav__link\">nav5</a>\n      </li>\n    </ul>\n  </nav>\n</body>\n```\n\nWell, I made a simple one just for test. Hope you don't mind. If we switch to iPhone6 device, it looks okay.\n\n![](../images/截图20180616161355.png)\n\nOf course it will be terrible if we switch to other devices. For example, iPhone6 Plus:\n\n![](../images/截图20180616161446.png)\n\nWe got extra space on the right because the width of iPhone6 Plus is 414px which is wider than 375px in iPhone6.\n\n**Please notice that we have used 65px, 40px and 5px in the css. Those values should be zoomed according to the device-width.**\n\nSo, here is the way how we fix this:\n\n### Adaptive by rem and js\n\nWe need do some transform to use rem. On iPhone6 with 375px and DPR:2,\n\n1.  We can use 65px, 40px, 5px with:\n\n```html\n  <meta name=\"viewport\" content=\"width=375,initial-scale=1,user-scalable=no\">\n```\n\n2.  We can also use 130px, 80px, 10px with:\n\n```html\n  <meta name=\"viewport\" content=\"width=750,initial-scale=0.5\">\n```\n\n3.  Further on, if we calculate rem by (device-width\\*DPR)/10:\n\n```html\n  <!--width=750=375*DPR,initial-scale=0.5=1/DPR-->\n  <meta name=\"viewport\" content=\"width=750,initial-scale=0.5\">\n```\n\n```css\nhtml {\n  /*75px = device-width * DPR / 10 */\n  font-size: 75px;\n}\nbody {\n  /*32px = 16px * DPR */\n  font-size: 32px;\n}\n```\n\nThose numbers would be:\n\n- 65px => (65/375) \\* device-width => (65/375) \\* 10rem\n- 40px => (40/375) \\* device-width => (40/375) \\* 10rem\n- 5px => (5/375) \\* device-width => (5/375) \\* 10rem\n\nIn fact, options above will get the same effect. But for option3, **we make everything connected with DPR and device-width.**\n\nSo, here is the basic logic to be adaptive:\n\n1.  We use the device-width\\*DPR/10 to calculate `rem` and set it on `html`.\n2.  We set (initial font-size \\* DPR) on `body`.\n3.  For `font-size` set with px, we have to set different font-size for different DPR by [@media/-webkit-device-pixel-ratio][@media/-webkit-device-pixel-ratio] or plugins(e.g. less).\n4.  We update `meta` by setting the `width` as device-width\\*DPR and `initial-scale` as 1/DPR which would make the page render in device-width\\*DPR and then scale to device-width.\n\nWell, you can just see the code:\n\n```html\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n  <script>\n    document.addEventListener(\n      'DOMContentLoaded',\n      () => {\n        let dpr = window.devicePixelRatio\n        let html = document.documentElement\n        let body = document.body\n        let deviceWidth = window.innerWidth || html.clientWidth\n        html.style.fontSize = (deviceWidth * dpr) / 10 + 'px'\n        html.setAttribute('data-dpr', dpr)\n        body.style.fontSize = 'initial'\n        body.style.fontSize = parseInt(getComputedStyle(body).fontSize) * dpr + 'px'\n        let metaViewport = document.querySelector('meta[name=viewport]')\n        metaViewport.setAttribute(\n          'content',\n          `width=${dpr * deviceWidth},initial-scale=${1 / dpr}`\n        )\n      },\n      { capture: true },\n      true\n    )\n  </script>\n  <link rel=\"stylesheet/less\" href=\"./less.less\">\n  <script src=\"http://cdnjs.cloudflare.com/ajax/libs/less.js/3.0.2/less.min.js\"></script>\n</head>\n```\n\nbase.css in _less.less_\n\n```less\n/* base.css */\n.px2px(@name, @px) {\n  @{name}: round(@px) * 1px;\n  [data-dpr='2'] & {\n    @{name}: round(@px*2) * 1px;\n  }\n  // for mx3\n  [data-dpr='2.5'] & {\n    @{name}: round(@px * 2.5) * 1px;\n  }\n  //for Pixel2\n  [data-dpr='2.625'] & {\n    @{name}: round(@px * 2.625) * 1px;\n  }\n  // for XiaoMi note\n  [data-dpr='2.75'] & {\n    @{name}: round(@px * 2.75) * 1px;\n  }\n  [data-dpr='3'] & {\n    @{name}: round(@px * 3) * 1px;\n  }\n  //for Pixel2 XL\n  [data-dpr='3.5'] & {\n    @{name}: round(@px * 3.5) * 1px;\n  }\n  // for Samsung note4\n  [data-dpr='4'] & {\n    @{name}: @px * 4px;\n  }\n}\n\n.nav {\n  //suggest use em not px otherwise have to set different font-size for different DPR\n  .px2px(font-size, 16px);\n  overflow: hidden;\n  width: 100%;\n}\n\n.nav__list {\n  // width: 110%;\n  width: 100%;\n  height: 100%;\n  // for inline-block\n  // white-space: nowrap;\n  overflow: hidden;\n  background-color: pink;\n  // letter-spacing: -0.3em;\n}\n\n.nav__item {\n  float: left;\n  // display: inline-block;\n  // letter-spacing: normal;\n  color: white;\n  background-color: yellowgreen;\n\n  width: 65/375 * 10rem;\n  height: 40/375 * 10rem;\n\n  margin: 5/375 * 10rem;\n  line-height: 40/375 * 10rem;\n}\n\n.nav__link {\n  display: block;\n\n  width: 100%;\n  height: 100%;\n\n  text-align: center;\n}\n```\n\nCode above will work in Apple's product. However, when we switch to Pixel 2 we will find this:\n\n![](../images/截图20180617130210.png)\n\nAfter a little calculation, I find that the total width of 5 `navs` is 1078.85 while width of `.nav__list` is 1078. Well, I think it is reasonable though I hate this.\n\nIn this case, we have to do something else to fix this. For example:\n\n- Set `margin-right:auto` on the last nav.\n- Set wider `width` of `.nav__list` and set `overflow:hidden` on `.nav`.\n- Use `width:20%` and `padding` instead of `margin`.\n- Other css tricks.\n\nAnyway, this is the previous solution for adaptation on mobile before appearance of `vw`,`flex` and `grid` layout.\n\nLet's make a conclusion:\n\n- principle\n\n1.  Set different font-size for different DPR by less.\n2.  Use viewport scale to solve the problem of 1px on border and font-size.\n3.  Make the width and height of element connect with device-width by `rem`.\n\n- pro\n\n1.  Fix 1px problem on `border` because we set 1px on device\\*DPR.\n\n- con\n\n1.  We have to set lots of `font-size` based on DPR every time we want to set `font-size` with px. Though we can simplify our job by preprocessor(e.g. less). However, how we going to do with more and more DPR?\n\n```less\n.px2px(@name, @px) {\n  @{name}: round(@px) * 1px;\n  [data-dpr='2'] & {\n    @{name}: round(@px*2) * 1px;\n  }\n  // for mx3\n  [data-dpr='2.5'] & {\n    @{name}: round(@px * 2.5) * 1px;\n  }\n  //for Pixel2\n  [data-dpr='2.625'] & {\n    @{name}: round(@px * 2.625) * 1px;\n  }\n  // for XiaoMi note\n  [data-dpr='2.75'] & {\n    @{name}: round(@px * 2.75) * 1px;\n  }\n  [data-dpr='3'] & {\n    @{name}: round(@px * 3) * 1px;\n  }\n  //for Pixel2 XL\n  [data-dpr='3.5'] & {\n    @{name}: round(@px * 3.5) * 1px;\n  }\n  // for Samsung note4\n  [data-dpr='4'] & {\n    @{name}: @px * 4px;\n  }\n}\n```\n\nWrite more and more? That's not a good idea.\n\n**If we use `em` instead it will not be a problem because we already set the initial font-size \\* DPR on `body`.**\n\n2.  Decimals appear which may cause a little problem in layout.\n\n### Adaptive by vw\n\nBefore we start with `vw` let's take a look at the rem and js solution. So, do we have a **better** solution for:\n\n1.  border 1px problem? I don't think so.\n2.  make the width and height of element connect with device-width? Yes, we do have `vw`, `vh` even `vmin` and `vmax`.\n\nAnd for the con of the rem and js solution:\n\n1.  **In this case, we can use `rem` instead of `em` because `rem` works more like `px` than `em`**\n2.  Can we avoid the decimals ? May be not with `vw` but won't be worse than `rem`.\n\nAnyway, here is the code:\n\n```html\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n  <script>\n    document.addEventListener(\n      'DOMContentLoaded',\n      () => {\n        let dpr = window.devicePixelRatio\n        let html = document.documentElement\n        let body = document.body\n        let deviceWidth = window.innerWidth || html.clientWidth\n        html.setAttribute('data-dpr', dpr)\n        html.style.fontSize = 'initial'\n        html.style.fontSize = parseInt(getComputedStyle(html).fontSize) * dpr + 'px'\n        let metaViewport = document.querySelector('meta[name=viewport]')\n        metaViewport.setAttribute(\n          'content',\n          `width=${dpr * deviceWidth},initial-scale=${1 / dpr}`\n        )\n      },\n      { capture: true },\n      true\n    )\n  </script>\n  <link rel=\"stylesheet/less\" href=\"./less.less\">\n  <script src=\"http://cdnjs.cloudflare.com/ajax/libs/less.js/3.0.2/less.min.js\"></script>\n</head>\n```\n\nbase.css in _less.less_\n\n```less\n/* base.css */\n.nav {\n  font-size: 1rem;\n  width: 100%;\n}\n\n.nav__list {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  background-color: pink;\n}\n\n.nav__item {\n  float: left;\n  color: white;\n  background-color: yellowgreen;\n\n  width: 65/375 * 100vw;\n  height: 40/375 * 100vw;\n\n  margin: 5/375 * 100vw;\n  line-height: 40/375 * 100vw;\n}\n\n.nav__link {\n  display: block;\n\n  width: 100%;\n  height: 100%;\n\n  text-align: center;\n}\n```\n\nI tested every device in chrome device-mode. They all work.\n\n**However, there are still decimals which might bite you someday.**\n\nAnyway, let's make a conclusion:\n\n- principle\n\n1.  Make the font-size connect with dpr by `rem`.\n2.  Use viewport scale to solve the problem of 1px on border and font-size.\n3.  Make the width and height of element connect with device-width by `vw`.\n\n- pro\n\n1.  Border 1px problem is solved as before.\n2.  Decimals problem will be a litter better than rem and js solution.\n\n- con\n\n1.  Decimals still exist.\n\n### Adaptive by vw and flex\n\nSolution with vw almost perfect except the decimals. So, how we are going to fix that? `Flex` gave us a choice.\n\n**We can leave the decimals to browser by `flex`.**\n\n```less\n/*part of css which has been modified*/\n.nav__list {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  background-color: pink;\n  display: flex; /*new added*/\n  justify-content: space-around; /*new added*/\n}\n\n.nav__item {\n  color: white;\n  background-color: yellowgreen;\n  flex: 0 0 auto; /*new added*/\n\n  width: 65/375 * 100vw;\n  height: 40/375 * 100vw;\n\n  line-height: 40/375 * 100vw;\n}\n```\n\nIf you don't know something about flex, please check MDN. Anyway, we can leave decimals to browser. That is the most exciting part.\n\nWell, let's make a conclusion:\n\n- principle\n\n1.  Make the font-size connect with dpr by `rem`.\n2.  Use viewport scale to solve the problem of 1px on border and font-size.\n3.  Make the width and height of element connect with device-width by `vw`.\n4.  Leave margin to browser by `flex`.\n\n- pro\n\n1.  Border 1px problem is solved as before.\n2.  Decimals problem will be better than `vw`.\n\n- con\n\n1.  Decimals still exist but only has a little influence.\n\n## Ending\n\nAnyway, the decimals problem always exist because of different sizes of mobiles. But the more new API we have, the less influence it will have.\n\nBesides, js above is not perfect. Here is the [current][current] version I am using.\n\nAnd the last thing is we didn't handle the problem with `img`. Maybe you should seek some help from [retina.js][retina.js].\n\n## Reference\n\n[first-exploration-on-mobile][first-exploration-on-mobile]\n\n[@media/-webkit-device-pixel-ratio][@media/-webkit-device-pixel-ratio]\n\n[lib-flexible][lib-flexible]\n\n[retina.js][retina.js]\n\n[retina.js]: https://github.com/strues/retinajs\n[first-exploration-on-mobile]: ../first-exploration-on-mobile/\n[@media/-webkit-device-pixel-ratio]: https://developer.mozilla.org/en-US/docs/Web/CSS/@media/-webkit-device-pixel-ratio\n[lib-flexible]: https://github.com/amfe/lib-flexible\n[current]: https://github.com/xianshenglu/mobile/blob/master/layout/\n","slug":"layout-on-mobile","published":1,"updated":"2018-06-19T09:17:46.951Z","layout":"post","photos":[],"link":"","_id":"cjv0yvj18008tborpswaxovpz","content":"<h2>Preface</h2>\n<p>Based on <a href=\"../first-exploration-on-mobile/\">first-exploration-on-mobile</a> we can develop adaptive pages on mobile. Now, let's do it.</p>\n<h2>Main</h2>\n<h3>Basic Code</h3>\n<p>Suppose that we got the PSD which is designed according to iPhone6. So, what do we have now?</p>\n<ul>\n<li>width:375*667</li>\n<li>DPR:2</li>\n</ul>\n<p>So, let's develop according to iPhone6 first. And this is the basic code:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=375,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/* reset.css */</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    * &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      padding: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    html,</span></span><br><span class=\"line\"><span class=\"undefined\">    body &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    li &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      list-style: none;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    a &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      text-decoration: none;</span></span><br><span class=\"line\"><span class=\"undefined\">      color: inherit;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/* base.css */</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.nav</span>,</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.nav__list</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.nav__list</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      background-color: pink;</span></span><br><span class=\"line\"><span class=\"undefined\">      overflow: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.nav__item</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 65px;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 40px;</span></span><br><span class=\"line\"><span class=\"undefined\">      line-height: 40px;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin: 5px;</span></span><br><span class=\"line\"><span class=\"undefined\">      float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">      background-color: yellowgreen;</span></span><br><span class=\"line\"><span class=\"undefined\">      color: white;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.nav__link</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      display: block;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">      text-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__list\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__link\"</span>&gt;</span>nav1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__link\"</span>&gt;</span>nav2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__link\"</span>&gt;</span>nav3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__link\"</span>&gt;</span>nav4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__link\"</span>&gt;</span>nav5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Well, I made a simple one just for test. Hope you don't mind. If we switch to iPhone6 device, it looks okay.</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180616161355.png\" alt=\"\"></p>\n<p>Of course it will be terrible if we switch to other devices. For example, iPhone6 Plus:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180616161446.png\" alt=\"\"></p>\n<p>We got extra space on the right because the width of iPhone6 Plus is 414px which is wider than 375px in iPhone6.</p>\n<p><strong>Please notice that we have used 65px, 40px and 5px in the css. Those values should be zoomed according to the device-width.</strong></p>\n<p>So, here is the way how we fix this:</p>\n<h3>Adaptive by rem and js</h3>\n<p>We need do some transform to use rem. On iPhone6 with 375px and DPR:2,</p>\n<ol>\n<li>We can use 65px, 40px, 5px with:</li>\n</ol>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=375,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>We can also use 130px, 80px, 10px with:</li>\n</ol>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=750,initial-scale=0.5\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>Further on, if we calculate rem by (device-width*DPR)/10:</li>\n</ol>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--width=750=375*DPR,initial-scale=0.5=1/DPR--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=750,initial-scale=0.5\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*75px = device-width * DPR / 10 */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">75px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*32px = 16px * DPR */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Those numbers would be:</p>\n<ul>\n<li>65px =&gt; (65/375) * device-width =&gt; (65/375) * 10rem</li>\n<li>40px =&gt; (40/375) * device-width =&gt; (40/375) * 10rem</li>\n<li>5px =&gt; (5/375) * device-width =&gt; (5/375) * 10rem</li>\n</ul>\n<p>In fact, options above will get the same effect. But for option3, <strong>we make everything connected with DPR and device-width.</strong></p>\n<p>So, here is the basic logic to be adaptive:</p>\n<ol>\n<li>We use the device-width*DPR/10 to calculate <code>rem</code> and set it on <code>html</code>.</li>\n<li>We set (initial font-size * DPR) on <code>body</code>.</li>\n<li>For <code>font-size</code> set with px, we have to set different font-size for different DPR by <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/-webkit-device-pixel-ratio\" target=\"_blank\" rel=\"noopener\">@media/-webkit-device-pixel-ratio</a> or plugins(e.g. less).</li>\n<li>We update <code>meta</code> by setting the <code>width</code> as device-width*DPR and <code>initial-scale</code> as 1/DPR which would make the page render in device-width*DPR and then scale to device-width.</li>\n</ol>\n<p>Well, you can just see the code:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">'DOMContentLoaded'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> dpr = <span class=\"built_in\">window</span>.devicePixelRatio</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> html = <span class=\"built_in\">document</span>.documentElement</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> body = <span class=\"built_in\">document</span>.body</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> deviceWidth = <span class=\"built_in\">window</span>.innerWidth || html.clientWidth</span></span><br><span class=\"line\"><span class=\"javascript\">        html.style.fontSize = (deviceWidth * dpr) / <span class=\"number\">10</span> + <span class=\"string\">'px'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        html.setAttribute(<span class=\"string\">'data-dpr'</span>, dpr)</span></span><br><span class=\"line\"><span class=\"javascript\">        body.style.fontSize = <span class=\"string\">'initial'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        body.style.fontSize = <span class=\"built_in\">parseInt</span>(getComputedStyle(body).fontSize) * dpr + <span class=\"string\">'px'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> metaViewport = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'meta[name=viewport]'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">        metaViewport.setAttribute(</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"string\">'content'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"string\">`width=<span class=\"subst\">$&#123;dpr * deviceWidth&#125;</span>,initial-scale=<span class=\"subst\">$&#123;<span class=\"number\">1</span> <span class=\"regexp\">/ dpr&#125;`</span></span></span></span></span><br><span class=\"line\"><span class=\"undefined\">        )</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"undefined\">    )</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet/less\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./less.less\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdnjs.cloudflare.com/ajax/libs/less.js/3.0.2/less.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>base.css in <em>less.less</em></p>\n<p><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* base.css */</span></span><br><span class=\"line\"><span class=\"selector-class\">.px2px</span>(<span class=\"variable\">@name</span>, <span class=\"variable\">@px</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span>*<span class=\"number\">2</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// for mx3</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2.5']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">2.5</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//for Pixel2</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2.625']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">2.625</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// for XiaoMi note</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2.75']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">2.75</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='3']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">3</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//for Pixel2 XL</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='3.5']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">3.5</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// for Samsung note4</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='4']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: <span class=\"variable\">@px</span> * <span class=\"number\">4px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//suggest use em not px otherwise have to set different font-size for different DPR</span></span><br><span class=\"line\">  <span class=\"selector-class\">.px2px</span>(font-size, <span class=\"number\">16px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__list</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// width: 110%;</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"comment\">// for inline-block</span></span><br><span class=\"line\">  <span class=\"comment\">// white-space: nowrap;</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"comment\">// letter-spacing: -0.3em;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"comment\">// display: inline-block;</span></span><br><span class=\"line\">  <span class=\"comment\">// letter-spacing: normal;</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">65</span>/<span class=\"number\">375</span> * <span class=\"number\">10rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40</span>/<span class=\"number\">375</span> * <span class=\"number\">10rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">5</span>/<span class=\"number\">375</span> * <span class=\"number\">10rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40</span>/<span class=\"number\">375</span> * <span class=\"number\">10rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__link</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Code above will work in Apple's product. However, when we switch to Pixel 2 we will find this:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180617130210.png\" alt=\"\"></p>\n<p>After a little calculation, I find that the total width of 5 <code>navs</code> is 1078.85 while width of <code>.nav__list</code> is 1078. Well, I think it is reasonable though I hate this.</p>\n<p>In this case, we have to do something else to fix this. For example:</p>\n<ul>\n<li>Set <code>margin-right:auto</code> on the last nav.</li>\n<li>Set wider <code>width</code> of <code>.nav__list</code> and set <code>overflow:hidden</code> on <code>.nav</code>.</li>\n<li>Use <code>width:20%</code> and <code>padding</code> instead of <code>margin</code>.</li>\n<li>Other css tricks.</li>\n</ul>\n<p>Anyway, this is the previous solution for adaptation on mobile before appearance of <code>vw</code>,<code>flex</code> and <code>grid</code> layout.</p>\n<p>Let's make a conclusion:</p>\n<ul>\n<li>principle</li>\n</ul>\n<ol>\n<li>Set different font-size for different DPR by less.</li>\n<li>Use viewport scale to solve the problem of 1px on border and font-size.</li>\n<li>Make the width and height of element connect with device-width by <code>rem</code>.</li>\n</ol>\n<ul>\n<li>pro</li>\n</ul>\n<ol>\n<li>Fix 1px problem on <code>border</code> because we set 1px on device*DPR.</li>\n</ol>\n<ul>\n<li>con</li>\n</ul>\n<ol>\n<li>We have to set lots of <code>font-size</code> based on DPR every time we want to set <code>font-size</code> with px. Though we can simplify our job by preprocessor(e.g. less). However, how we going to do with more and more DPR?</li>\n</ol>\n<p><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.px2px</span>(<span class=\"variable\">@name</span>, <span class=\"variable\">@px</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span>*<span class=\"number\">2</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// for mx3</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2.5']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">2.5</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//for Pixel2</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2.625']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">2.625</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// for XiaoMi note</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2.75']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">2.75</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='3']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">3</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//for Pixel2 XL</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='3.5']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">3.5</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// for Samsung note4</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='4']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: <span class=\"variable\">@px</span> * <span class=\"number\">4px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Write more and more? That's not a good idea.</p>\n<p><strong>If we use <code>em</code> instead it will not be a problem because we already set the initial font-size * DPR on <code>body</code>.</strong></p>\n<ol start=\"2\">\n<li>Decimals appear which may cause a little problem in layout.</li>\n</ol>\n<h3>Adaptive by vw</h3>\n<p>Before we start with <code>vw</code> let's take a look at the rem and js solution. So, do we have a <strong>better</strong> solution for:</p>\n<ol>\n<li>border 1px problem? I don't think so.</li>\n<li>make the width and height of element connect with device-width? Yes, we do have <code>vw</code>, <code>vh</code> even <code>vmin</code> and <code>vmax</code>.</li>\n</ol>\n<p>And for the con of the rem and js solution:</p>\n<ol>\n<li><strong>In this case, we can use <code>rem</code> instead of <code>em</code> because <code>rem</code> works more like <code>px</code> than <code>em</code></strong></li>\n<li>Can we avoid the decimals ? May be not with <code>vw</code> but won't be worse than <code>rem</code>.</li>\n</ol>\n<p>Anyway, here is the code:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">'DOMContentLoaded'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> dpr = <span class=\"built_in\">window</span>.devicePixelRatio</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> html = <span class=\"built_in\">document</span>.documentElement</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> body = <span class=\"built_in\">document</span>.body</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> deviceWidth = <span class=\"built_in\">window</span>.innerWidth || html.clientWidth</span></span><br><span class=\"line\"><span class=\"javascript\">        html.setAttribute(<span class=\"string\">'data-dpr'</span>, dpr)</span></span><br><span class=\"line\"><span class=\"javascript\">        html.style.fontSize = <span class=\"string\">'initial'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        html.style.fontSize = <span class=\"built_in\">parseInt</span>(getComputedStyle(html).fontSize) * dpr + <span class=\"string\">'px'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> metaViewport = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'meta[name=viewport]'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">        metaViewport.setAttribute(</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"string\">'content'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"string\">`width=<span class=\"subst\">$&#123;dpr * deviceWidth&#125;</span>,initial-scale=<span class=\"subst\">$&#123;<span class=\"number\">1</span> <span class=\"regexp\">/ dpr&#125;`</span></span></span></span></span><br><span class=\"line\"><span class=\"undefined\">        )</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"undefined\">    )</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet/less\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./less.less\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdnjs.cloudflare.com/ajax/libs/less.js/3.0.2/less.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>base.css in <em>less.less</em></p>\n<p><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* base.css */</span></span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">65</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">5</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__link</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>I tested every device in chrome device-mode. They all work.</p>\n<p><strong>However, there are still decimals which might bite you someday.</strong></p>\n<p>Anyway, let's make a conclusion:</p>\n<ul>\n<li>principle</li>\n</ul>\n<ol>\n<li>Make the font-size connect with dpr by <code>rem</code>.</li>\n<li>Use viewport scale to solve the problem of 1px on border and font-size.</li>\n<li>Make the width and height of element connect with device-width by <code>vw</code>.</li>\n</ol>\n<ul>\n<li>pro</li>\n</ul>\n<ol>\n<li>Border 1px problem is solved as before.</li>\n<li>Decimals problem will be a litter better than rem and js solution.</li>\n</ol>\n<ul>\n<li>con</li>\n</ul>\n<ol>\n<li>Decimals still exist.</li>\n</ol>\n<h3>Adaptive by vw and flex</h3>\n<p>Solution with vw almost perfect except the decimals. So, how we are going to fix that? <code>Flex</code> gave us a choice.</p>\n<p><strong>We can leave the decimals to browser by <code>flex</code>.</strong></p>\n<p><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*part of css which has been modified*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.nav__list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex; <span class=\"comment\">/*new added*/</span></span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-around; <span class=\"comment\">/*new added*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> auto; <span class=\"comment\">/*new added*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">65</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If you don't know something about flex, please check MDN. Anyway, we can leave decimals to browser. That is the most exciting part.</p>\n<p>Well, let's make a conclusion:</p>\n<ul>\n<li>principle</li>\n</ul>\n<ol>\n<li>Make the font-size connect with dpr by <code>rem</code>.</li>\n<li>Use viewport scale to solve the problem of 1px on border and font-size.</li>\n<li>Make the width and height of element connect with device-width by <code>vw</code>.</li>\n<li>Leave margin to browser by <code>flex</code>.</li>\n</ol>\n<ul>\n<li>pro</li>\n</ul>\n<ol>\n<li>Border 1px problem is solved as before.</li>\n<li>Decimals problem will be better than <code>vw</code>.</li>\n</ol>\n<ul>\n<li>con</li>\n</ul>\n<ol>\n<li>Decimals still exist but only has a little influence.</li>\n</ol>\n<h2>Ending</h2>\n<p>Anyway, the decimals problem always exist because of different sizes of mobiles. But the more new API we have, the less influence it will have.</p>\n<p>Besides, js above is not perfect. Here is the <a href=\"https://github.com/xianshenglu/mobile/blob/master/layout/\">current</a> version I am using.</p>\n<p>And the last thing is we didn't handle the problem with <code>img</code>. Maybe you should seek some help from <a href=\"https://github.com/strues/retinajs\">retina.js</a>.</p>\n<h2>Reference</h2>\n<p><a href=\"../first-exploration-on-mobile/\">first-exploration-on-mobile</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/-webkit-device-pixel-ratio\" target=\"_blank\" rel=\"noopener\">@media/-webkit-device-pixel-ratio</a></p>\n<p><a href=\"https://github.com/amfe/lib-flexible\">lib-flexible</a></p>\n<p><a href=\"https://github.com/strues/retinajs\">retina.js</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>Based on <a href=\"../first-exploration-on-mobile/\">first-exploration-on-mobile</a> we can develop adaptive pages on mobile. Now, let's do it.</p>\n<h2>Main</h2>\n<h3>Basic Code</h3>\n<p>Suppose that we got the PSD which is designed according to iPhone6. So, what do we have now?</p>\n<ul>\n<li>width:375*667</li>\n<li>DPR:2</li>\n</ul>\n<p>So, let's develop according to iPhone6 first. And this is the basic code:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=375,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/* reset.css */</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    * &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">      padding: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    html,</span></span><br><span class=\"line\"><span class=\"undefined\">    body &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    li &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      list-style: none;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    a &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      text-decoration: none;</span></span><br><span class=\"line\"><span class=\"undefined\">      color: inherit;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"comment\">/* base.css */</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.nav</span>,</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.nav__list</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.nav__list</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      background-color: pink;</span></span><br><span class=\"line\"><span class=\"undefined\">      overflow: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.nav__item</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 65px;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 40px;</span></span><br><span class=\"line\"><span class=\"undefined\">      line-height: 40px;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin: 5px;</span></span><br><span class=\"line\"><span class=\"undefined\">      float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">      background-color: yellowgreen;</span></span><br><span class=\"line\"><span class=\"undefined\">      color: white;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.nav__link</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      display: block;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">      text-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__list\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__link\"</span>&gt;</span>nav1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__link\"</span>&gt;</span>nav2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__link\"</span>&gt;</span>nav3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__link\"</span>&gt;</span>nav4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav__link\"</span>&gt;</span>nav5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Well, I made a simple one just for test. Hope you don't mind. If we switch to iPhone6 device, it looks okay.</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180616161355.png\" alt=\"\"></p>\n<p>Of course it will be terrible if we switch to other devices. For example, iPhone6 Plus:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180616161446.png\" alt=\"\"></p>\n<p>We got extra space on the right because the width of iPhone6 Plus is 414px which is wider than 375px in iPhone6.</p>\n<p><strong>Please notice that we have used 65px, 40px and 5px in the css. Those values should be zoomed according to the device-width.</strong></p>\n<p>So, here is the way how we fix this:</p>\n<h3>Adaptive by rem and js</h3>\n<p>We need do some transform to use rem. On iPhone6 with 375px and DPR:2,</p>\n<ol>\n<li>We can use 65px, 40px, 5px with:</li>\n</ol>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=375,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>We can also use 130px, 80px, 10px with:</li>\n</ol>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=750,initial-scale=0.5\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>Further on, if we calculate rem by (device-width*DPR)/10:</li>\n</ol>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--width=750=375*DPR,initial-scale=0.5=1/DPR--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=750,initial-scale=0.5\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*75px = device-width * DPR / 10 */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">75px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*32px = 16px * DPR */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Those numbers would be:</p>\n<ul>\n<li>65px =&gt; (65/375) * device-width =&gt; (65/375) * 10rem</li>\n<li>40px =&gt; (40/375) * device-width =&gt; (40/375) * 10rem</li>\n<li>5px =&gt; (5/375) * device-width =&gt; (5/375) * 10rem</li>\n</ul>\n<p>In fact, options above will get the same effect. But for option3, <strong>we make everything connected with DPR and device-width.</strong></p>\n<p>So, here is the basic logic to be adaptive:</p>\n<ol>\n<li>We use the device-width*DPR/10 to calculate <code>rem</code> and set it on <code>html</code>.</li>\n<li>We set (initial font-size * DPR) on <code>body</code>.</li>\n<li>For <code>font-size</code> set with px, we have to set different font-size for different DPR by <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/-webkit-device-pixel-ratio\" target=\"_blank\" rel=\"noopener\">@media/-webkit-device-pixel-ratio</a> or plugins(e.g. less).</li>\n<li>We update <code>meta</code> by setting the <code>width</code> as device-width*DPR and <code>initial-scale</code> as 1/DPR which would make the page render in device-width*DPR and then scale to device-width.</li>\n</ol>\n<p>Well, you can just see the code:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">'DOMContentLoaded'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> dpr = <span class=\"built_in\">window</span>.devicePixelRatio</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> html = <span class=\"built_in\">document</span>.documentElement</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> body = <span class=\"built_in\">document</span>.body</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> deviceWidth = <span class=\"built_in\">window</span>.innerWidth || html.clientWidth</span></span><br><span class=\"line\"><span class=\"javascript\">        html.style.fontSize = (deviceWidth * dpr) / <span class=\"number\">10</span> + <span class=\"string\">'px'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        html.setAttribute(<span class=\"string\">'data-dpr'</span>, dpr)</span></span><br><span class=\"line\"><span class=\"javascript\">        body.style.fontSize = <span class=\"string\">'initial'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        body.style.fontSize = <span class=\"built_in\">parseInt</span>(getComputedStyle(body).fontSize) * dpr + <span class=\"string\">'px'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> metaViewport = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'meta[name=viewport]'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">        metaViewport.setAttribute(</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"string\">'content'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"string\">`width=<span class=\"subst\">$&#123;dpr * deviceWidth&#125;</span>,initial-scale=<span class=\"subst\">$&#123;<span class=\"number\">1</span> <span class=\"regexp\">/ dpr&#125;`</span></span></span></span></span><br><span class=\"line\"><span class=\"undefined\">        )</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"undefined\">    )</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet/less\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./less.less\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdnjs.cloudflare.com/ajax/libs/less.js/3.0.2/less.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>base.css in <em>less.less</em></p>\n<p><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* base.css */</span></span><br><span class=\"line\"><span class=\"selector-class\">.px2px</span>(<span class=\"variable\">@name</span>, <span class=\"variable\">@px</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span>*<span class=\"number\">2</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// for mx3</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2.5']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">2.5</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//for Pixel2</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2.625']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">2.625</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// for XiaoMi note</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2.75']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">2.75</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='3']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">3</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//for Pixel2 XL</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='3.5']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">3.5</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// for Samsung note4</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='4']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: <span class=\"variable\">@px</span> * <span class=\"number\">4px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//suggest use em not px otherwise have to set different font-size for different DPR</span></span><br><span class=\"line\">  <span class=\"selector-class\">.px2px</span>(font-size, <span class=\"number\">16px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__list</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// width: 110%;</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"comment\">// for inline-block</span></span><br><span class=\"line\">  <span class=\"comment\">// white-space: nowrap;</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"comment\">// letter-spacing: -0.3em;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"comment\">// display: inline-block;</span></span><br><span class=\"line\">  <span class=\"comment\">// letter-spacing: normal;</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">65</span>/<span class=\"number\">375</span> * <span class=\"number\">10rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40</span>/<span class=\"number\">375</span> * <span class=\"number\">10rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">5</span>/<span class=\"number\">375</span> * <span class=\"number\">10rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40</span>/<span class=\"number\">375</span> * <span class=\"number\">10rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__link</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Code above will work in Apple's product. However, when we switch to Pixel 2 we will find this:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180617130210.png\" alt=\"\"></p>\n<p>After a little calculation, I find that the total width of 5 <code>navs</code> is 1078.85 while width of <code>.nav__list</code> is 1078. Well, I think it is reasonable though I hate this.</p>\n<p>In this case, we have to do something else to fix this. For example:</p>\n<ul>\n<li>Set <code>margin-right:auto</code> on the last nav.</li>\n<li>Set wider <code>width</code> of <code>.nav__list</code> and set <code>overflow:hidden</code> on <code>.nav</code>.</li>\n<li>Use <code>width:20%</code> and <code>padding</code> instead of <code>margin</code>.</li>\n<li>Other css tricks.</li>\n</ul>\n<p>Anyway, this is the previous solution for adaptation on mobile before appearance of <code>vw</code>,<code>flex</code> and <code>grid</code> layout.</p>\n<p>Let's make a conclusion:</p>\n<ul>\n<li>principle</li>\n</ul>\n<ol>\n<li>Set different font-size for different DPR by less.</li>\n<li>Use viewport scale to solve the problem of 1px on border and font-size.</li>\n<li>Make the width and height of element connect with device-width by <code>rem</code>.</li>\n</ol>\n<ul>\n<li>pro</li>\n</ul>\n<ol>\n<li>Fix 1px problem on <code>border</code> because we set 1px on device*DPR.</li>\n</ol>\n<ul>\n<li>con</li>\n</ul>\n<ol>\n<li>We have to set lots of <code>font-size</code> based on DPR every time we want to set <code>font-size</code> with px. Though we can simplify our job by preprocessor(e.g. less). However, how we going to do with more and more DPR?</li>\n</ol>\n<p><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.px2px</span>(<span class=\"variable\">@name</span>, <span class=\"variable\">@px</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span>*<span class=\"number\">2</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// for mx3</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2.5']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">2.5</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//for Pixel2</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2.625']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">2.625</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// for XiaoMi note</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='2.75']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">2.75</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='3']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">3</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//for Pixel2 XL</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='3.5']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: round(<span class=\"variable\">@px</span> * <span class=\"number\">3.5</span>) * <span class=\"number\">1px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// for Samsung note4</span></span><br><span class=\"line\">  <span class=\"selector-attr\">[data-dpr='4']</span> <span class=\"selector-tag\">&amp;</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">@&#123;name&#125;</span>: <span class=\"variable\">@px</span> * <span class=\"number\">4px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Write more and more? That's not a good idea.</p>\n<p><strong>If we use <code>em</code> instead it will not be a problem because we already set the initial font-size * DPR on <code>body</code>.</strong></p>\n<ol start=\"2\">\n<li>Decimals appear which may cause a little problem in layout.</li>\n</ol>\n<h3>Adaptive by vw</h3>\n<p>Before we start with <code>vw</code> let's take a look at the rem and js solution. So, do we have a <strong>better</strong> solution for:</p>\n<ol>\n<li>border 1px problem? I don't think so.</li>\n<li>make the width and height of element connect with device-width? Yes, we do have <code>vw</code>, <code>vh</code> even <code>vmin</code> and <code>vmax</code>.</li>\n</ol>\n<p>And for the con of the rem and js solution:</p>\n<ol>\n<li><strong>In this case, we can use <code>rem</code> instead of <code>em</code> because <code>rem</code> works more like <code>px</code> than <code>em</code></strong></li>\n<li>Can we avoid the decimals ? May be not with <code>vw</code> but won't be worse than <code>rem</code>.</li>\n</ol>\n<p>Anyway, here is the code:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.addEventListener(</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">'DOMContentLoaded'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> dpr = <span class=\"built_in\">window</span>.devicePixelRatio</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> html = <span class=\"built_in\">document</span>.documentElement</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> body = <span class=\"built_in\">document</span>.body</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> deviceWidth = <span class=\"built_in\">window</span>.innerWidth || html.clientWidth</span></span><br><span class=\"line\"><span class=\"javascript\">        html.setAttribute(<span class=\"string\">'data-dpr'</span>, dpr)</span></span><br><span class=\"line\"><span class=\"javascript\">        html.style.fontSize = <span class=\"string\">'initial'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        html.style.fontSize = <span class=\"built_in\">parseInt</span>(getComputedStyle(html).fontSize) * dpr + <span class=\"string\">'px'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> metaViewport = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'meta[name=viewport]'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">        metaViewport.setAttribute(</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"string\">'content'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"string\">`width=<span class=\"subst\">$&#123;dpr * deviceWidth&#125;</span>,initial-scale=<span class=\"subst\">$&#123;<span class=\"number\">1</span> <span class=\"regexp\">/ dpr&#125;`</span></span></span></span></span><br><span class=\"line\"><span class=\"undefined\">        )</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#123; <span class=\"attr\">capture</span>: <span class=\"literal\">true</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"undefined\">    )</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet/less\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./less.less\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdnjs.cloudflare.com/ajax/libs/less.js/3.0.2/less.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>base.css in <em>less.less</em></p>\n<p><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* base.css */</span></span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">65</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">5</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__link</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>I tested every device in chrome device-mode. They all work.</p>\n<p><strong>However, there are still decimals which might bite you someday.</strong></p>\n<p>Anyway, let's make a conclusion:</p>\n<ul>\n<li>principle</li>\n</ul>\n<ol>\n<li>Make the font-size connect with dpr by <code>rem</code>.</li>\n<li>Use viewport scale to solve the problem of 1px on border and font-size.</li>\n<li>Make the width and height of element connect with device-width by <code>vw</code>.</li>\n</ol>\n<ul>\n<li>pro</li>\n</ul>\n<ol>\n<li>Border 1px problem is solved as before.</li>\n<li>Decimals problem will be a litter better than rem and js solution.</li>\n</ol>\n<ul>\n<li>con</li>\n</ul>\n<ol>\n<li>Decimals still exist.</li>\n</ol>\n<h3>Adaptive by vw and flex</h3>\n<p>Solution with vw almost perfect except the decimals. So, how we are going to fix that? <code>Flex</code> gave us a choice.</p>\n<p><strong>We can leave the decimals to browser by <code>flex</code>.</strong></p>\n<p><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*part of css which has been modified*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.nav__list</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex; <span class=\"comment\">/*new added*/</span></span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-around; <span class=\"comment\">/*new added*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.nav__item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellowgreen;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> auto; <span class=\"comment\">/*new added*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">65</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40</span>/<span class=\"number\">375</span> * <span class=\"number\">100vw</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If you don't know something about flex, please check MDN. Anyway, we can leave decimals to browser. That is the most exciting part.</p>\n<p>Well, let's make a conclusion:</p>\n<ul>\n<li>principle</li>\n</ul>\n<ol>\n<li>Make the font-size connect with dpr by <code>rem</code>.</li>\n<li>Use viewport scale to solve the problem of 1px on border and font-size.</li>\n<li>Make the width and height of element connect with device-width by <code>vw</code>.</li>\n<li>Leave margin to browser by <code>flex</code>.</li>\n</ol>\n<ul>\n<li>pro</li>\n</ul>\n<ol>\n<li>Border 1px problem is solved as before.</li>\n<li>Decimals problem will be better than <code>vw</code>.</li>\n</ol>\n<ul>\n<li>con</li>\n</ul>\n<ol>\n<li>Decimals still exist but only has a little influence.</li>\n</ol>\n<h2>Ending</h2>\n<p>Anyway, the decimals problem always exist because of different sizes of mobiles. But the more new API we have, the less influence it will have.</p>\n<p>Besides, js above is not perfect. Here is the <a href=\"https://github.com/xianshenglu/mobile/blob/master/layout/\">current</a> version I am using.</p>\n<p>And the last thing is we didn't handle the problem with <code>img</code>. Maybe you should seek some help from <a href=\"https://github.com/strues/retinajs\">retina.js</a>.</p>\n<h2>Reference</h2>\n<p><a href=\"../first-exploration-on-mobile/\">first-exploration-on-mobile</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/-webkit-device-pixel-ratio\" target=\"_blank\" rel=\"noopener\">@media/-webkit-device-pixel-ratio</a></p>\n<p><a href=\"https://github.com/amfe/lib-flexible\">lib-flexible</a></p>\n<p><a href=\"https://github.com/strues/retinajs\">retina.js</a></p>\n"},{"title":"使用 qrcodejs 生成二维码的几个问题","comments":1,"date":"2018-10-03T06:03:57.000Z","_content":"\n## Preface\n\n产品希望我这边下载页面加个二维码，可以扫描下载 APP，并且希望二维码中有公司的 logo，很合理的需求，不过实现的时候依旧遇到了几个问题，在此记录下。\n\n## Main\n\n二维码的实现逻辑我当然没有这个时间去研究，直接用的 [qrcodejs][qrcodejs]。官方给的 demo 是最简单的版本，各种各样的需求都是在 issues 里找到的提示，似乎这个库已经很久没有人去维护了，虽然 star 是很多。\n\n#### 官网示例（改编）\n\n```html\n<div id=\"qrcode\" class=\"qrcode\"></div>\n```\n\n```css\n.qrcode {\n  width: 150px;\n  height: 150px;\n  border: 2px solid green;\n  margin-top: 15px;\n}\n```\n\n```js\nlet qrcodeEl = document.getElementById('qrcode')\nlet qrcode = new QRCode(qrcodeEl, {\n  text: 'https://avatars1.githubusercontent.com/u/23273077',\n  width: 128,\n  height: 128,\n  colorDark: '#000000',\n  colorLight: '#ffffff',\n  correctLevel: QRCode.CorrectLevel.H\n})\n```\n\n效果如图：\n\n![截图20181003145142.png](../images/截图20181003145142.png)\n\n#### 尺寸控制\n\n我给官网的示例加上了边框，二维码的尺寸和 js 里的尺寸不一样，这个缺点立马就暴露出来了。\n\n我很可能是想生成的二维码填满传入的 `qrcode` 元素的，但是这里的 `width` 不支持 100%，更不支持 `vw` 这种尺寸单位了。当然，我可以用 `qrcode.offsetWidth` 来解决这个问题，但是如果 `qrcode` 的尺寸后期会动态修改的话，那不还是会有问题么。\n\n经 SO 的提示，发现了一个好方案，\n\n```css\n.qrcode {\n  width: 150px;\n  height: 150px;\n  border: 2px solid green;\n  margin-top: 15px;\n}\n.qrcode canvas + img {\n  width: 100%;\n  height: 100%;\n}\n```\n\n这样就可以了，不过仍然有个不足，**就是二维码有失真。经测试，只有传入的尺寸和 `qrcode` 的尺寸一样时，才不会失真，所以传入的尺寸还是需要动态计算。**不过，可以试试 svg 的 qrcode 库，svg 不会出现这个问题。\n\n#### 加 logo 的二维码\n\n[qrcodejs][qrcodejs] 并没有提供这个 API，issues 里有人给了 demo，其实就是在原有元素上覆盖一个 logo 就可以了，虽然遮盖了原有二维码的一部分，但是实测并不影响扫描。不过我没有进行大规模测试，**可能会有一定的错误率。**\n\n```html\n<div id=\"qrcode\" class=\"qrcode\">\n  <img\n    src=\"https://avatars1.githubusercontent.com/u/23273077\"\n    class=\"qrcode__logo\"\n  />\n</div>\n```\n\n```css\n.qrcode {\n  width: 150px;\n  height: 150px;\n  border: 2px solid green;\n  margin-top: 15px;\n  position: relative;\n}\n\n.qrcode canvas + img {\n  width: 100%;\n  height: 100%;\n}\n.qrcode__logo {\n  width: 50px;\n  height: 50px;\n  border-radius: 10%;\n  border: 1px solid #fff;\n  position: absolute;\n  margin: auto;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n}\n```\n\n效果如图：\n\n![截图20181003164515.png](../images/截图20181003164515.png)\n\n#### 检测二维码的生成\n\n某些情况下，我需要重用二维码，在这种情况下，我发现，二维码的生成是异步的，譬如：\n\n```js\nlet qrcodeEl = document.getElementById('qrcode')\nlet qrcode = new QRCode(qrcodeEl, {\n  text: 'https://avatars1.githubusercontent.com/u/23273077',\n  width: 200,\n  height: 200,\n  colorDark: '#000000',\n  colorLight: '#ffffff',\n  correctLevel: QRCode.CorrectLevel.H\n})\nlet qrcodeImg = document.querySelectorAll('.qrcode canvas+img')\nconsole.log('qrcodeImg.src', qrcodeImg.src)\nsetTimeout(function() {\n  console.log('qrcodeImg.src', qrcodeImg.src)\n}, 1000)\n```\n\n第一个日志就是空白的，第二个才有 base64。搞笑的是，[qrcodejs][qrcodejs] 也没有给出回调或者通知告诉用户什么时候生成完毕。\n\n这个问题也是在 issues 里找到的提示，关键点在于 [MutationObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver)。\n\n这个 API 很少在项目中用，因为不兼容性 ie11-，但是有时在几千行代码里 debug 时会用，尤其是我怀疑中间有代码改了某个元素的属性，确又找不到证据或者找不到哪段代码时，会用这个来监测下。在这里的用法如下：\n\n```js\nlet qrcodeEl = document.getElementById('qrcode')\nlet qrcode = new QRCode(qrcodeEl, {\n  text: 'https://avatars1.githubusercontent.com/u/23273077',\n  width: 200,\n  height: 200,\n  colorDark: '#000000',\n  colorLight: '#ffffff',\n  correctLevel: QRCode.CorrectLevel.H\n})\nlet qrcodeImg = document.querySelector('.qrcode canvas+img')\nlistenQrcodeSrc()\nfunction listenQrcodeSrc() {\n  var observeConfig = { attributes: true }\n  var observeCb = function(mutationsList, observer) {\n    mutationsList.forEach(function(mutation) {\n      if (\n        mutation.type.toLowerCase() === 'attributes' &&\n        mutation.attributeName.toLowerCase() === 'src'\n      ) {\n        console.log('qrcodeImg src done!', mutation.target.src)\n        observer.disconnect()\n      }\n    })\n  }\n  if (typeof MutationObserver !== 'undefined') {\n    var observer = new MutationObserver(observeCb)\n    observer.observe(qrcodeImg, observeConfig)\n  }\n}\n```\n\n#### 微信中二维码要放在 `img` 中，不能放在 `background-image`\n\n2019.1.31 ，微信 7.0.0 亲测\n\n#### 微信中多个二维码在一起识别错误\n\n这个问题，我也遇到了，根据网友的提示，微信是截屏识别的，所以会出现这种问题。我测试的结果是，左右两个，永远识别的右边的那个。网上有好几种方案：\n\n- 调透明度和层级\n\n最初尝试过，结果发现失败，等到成功的时候，透明度已经小于 0.5 了，视觉差异太明显，所以放弃了这个方案。\n\n- 替换二维码\n\n最终采取的是这个，这个也有问题，就是用户会看到二维码变化的过程，除非你把多个二维码做得很像。\n\n假设，我们要显示两个二维码，所谓替换二维码，其实也就是在多个 `img.src` 属性里切换，可以把实际的二维码保存在 `data-real-src` 属性里，然后在用户 `touchstart` 事件中，替换另一个 `img` 的 `src` 为当前按下的这个，然后在 `touchend` 事件中再改回来，因为原来的地址都保存在 `data-real-src` 属性里。\n\n这里就用到了前面提到的检测 `src` 属性来判断 `qrcode` 生成完毕，否则一开始直接把 `src` 属性赋给 `data-real-src` 属性，就是空白。\n\n示例代码（这里代码跟前面脱节了，dom 是另外的结构，仅作为示例代码）：\n\n```js\n//* pubMethods 是类似 jq 的一些 API 的汇总对象\nvar qrcodeImgs = pubMethods.$('.download__qrcode-box canvas+img')\nlistenQrcodeSrc()\nvar downloadBox = pubMethods.$('.download')[0]\ndownloadBox.addEventListener('touchstart', changeQrcodeSrcToOne)\ndownloadBox.addEventListener('touchend', changeQrcodeSrcBack)\ndownloadBox.addEventListener('touchcancel', changeQrcodeSrcBack)\n\nfunction listenQrcodeSrc() {\n  var observeConfig = { attributes: true }\n  var observeCb = function(mutationsList, observer) {\n    mutationsList.forEach(function(mutation) {\n      if (\n        mutation.type.toLowerCase() === 'attributes' &&\n        mutation.attributeName.toLowerCase() === 'src'\n      ) {\n        mutation.target.setAttribute('data-real-src', mutation.target.src)\n        observer.disconnect()\n      }\n    })\n  }\n  qrcodeImgs.forEach(function(ele) {\n    if (typeof MutationObserver !== 'undefined') {\n      var observer = new MutationObserver(observeCb)\n      observer.observe(ele, observeConfig)\n    }\n  })\n}\nfunction changeQrcodeSrcToOne(event) {\n  var target = event.target\n  var getQrcodeBox = pubMethods.closest(\n    target,\n    '.download__qrcode-box',\n    downloadBox\n  )\n  if (getQrcodeBox) {\n    var targetImg = qrcodeImgs.filter(function(ele) {\n      return getQrcodeBox.contains(ele)\n    })[0]\n    qrcodeImgs.forEach(function(ele) {\n      ele.src = targetImg.getAttribute('data-real-src')\n    })\n  }\n}\nfunction changeQrcodeSrcBack(event) {\n  qrcodeImgs.forEach(function(ele) {\n    ele.src = ele.getAttribute('data-real-src')\n  })\n}\n```\n\n## Ending\n\n## Reference\n\n- [Make qr code full width](https://stackoverflow.com/questions/34546241/make-qr-code-full-width)\n\n- [微信中有两个挨着二维码长按识别的问题?](https://www.zhihu.com/question/35246592)\n\n[qrcodejs]: https://github.com/davidshimjs/qrcodejs\n","source":"_posts/problems-met-when-using-qrcodejs.md","raw":"---\ntitle: 使用 qrcodejs 生成二维码的几个问题\ncategories: js\ntags:\n  - qrcodejs\n  - wechat\n  - MutationObserver\ncomments: true\ndate: 2018-10-03 14:03:57\n---\n\n## Preface\n\n产品希望我这边下载页面加个二维码，可以扫描下载 APP，并且希望二维码中有公司的 logo，很合理的需求，不过实现的时候依旧遇到了几个问题，在此记录下。\n\n## Main\n\n二维码的实现逻辑我当然没有这个时间去研究，直接用的 [qrcodejs][qrcodejs]。官方给的 demo 是最简单的版本，各种各样的需求都是在 issues 里找到的提示，似乎这个库已经很久没有人去维护了，虽然 star 是很多。\n\n#### 官网示例（改编）\n\n```html\n<div id=\"qrcode\" class=\"qrcode\"></div>\n```\n\n```css\n.qrcode {\n  width: 150px;\n  height: 150px;\n  border: 2px solid green;\n  margin-top: 15px;\n}\n```\n\n```js\nlet qrcodeEl = document.getElementById('qrcode')\nlet qrcode = new QRCode(qrcodeEl, {\n  text: 'https://avatars1.githubusercontent.com/u/23273077',\n  width: 128,\n  height: 128,\n  colorDark: '#000000',\n  colorLight: '#ffffff',\n  correctLevel: QRCode.CorrectLevel.H\n})\n```\n\n效果如图：\n\n![截图20181003145142.png](../images/截图20181003145142.png)\n\n#### 尺寸控制\n\n我给官网的示例加上了边框，二维码的尺寸和 js 里的尺寸不一样，这个缺点立马就暴露出来了。\n\n我很可能是想生成的二维码填满传入的 `qrcode` 元素的，但是这里的 `width` 不支持 100%，更不支持 `vw` 这种尺寸单位了。当然，我可以用 `qrcode.offsetWidth` 来解决这个问题，但是如果 `qrcode` 的尺寸后期会动态修改的话，那不还是会有问题么。\n\n经 SO 的提示，发现了一个好方案，\n\n```css\n.qrcode {\n  width: 150px;\n  height: 150px;\n  border: 2px solid green;\n  margin-top: 15px;\n}\n.qrcode canvas + img {\n  width: 100%;\n  height: 100%;\n}\n```\n\n这样就可以了，不过仍然有个不足，**就是二维码有失真。经测试，只有传入的尺寸和 `qrcode` 的尺寸一样时，才不会失真，所以传入的尺寸还是需要动态计算。**不过，可以试试 svg 的 qrcode 库，svg 不会出现这个问题。\n\n#### 加 logo 的二维码\n\n[qrcodejs][qrcodejs] 并没有提供这个 API，issues 里有人给了 demo，其实就是在原有元素上覆盖一个 logo 就可以了，虽然遮盖了原有二维码的一部分，但是实测并不影响扫描。不过我没有进行大规模测试，**可能会有一定的错误率。**\n\n```html\n<div id=\"qrcode\" class=\"qrcode\">\n  <img\n    src=\"https://avatars1.githubusercontent.com/u/23273077\"\n    class=\"qrcode__logo\"\n  />\n</div>\n```\n\n```css\n.qrcode {\n  width: 150px;\n  height: 150px;\n  border: 2px solid green;\n  margin-top: 15px;\n  position: relative;\n}\n\n.qrcode canvas + img {\n  width: 100%;\n  height: 100%;\n}\n.qrcode__logo {\n  width: 50px;\n  height: 50px;\n  border-radius: 10%;\n  border: 1px solid #fff;\n  position: absolute;\n  margin: auto;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n}\n```\n\n效果如图：\n\n![截图20181003164515.png](../images/截图20181003164515.png)\n\n#### 检测二维码的生成\n\n某些情况下，我需要重用二维码，在这种情况下，我发现，二维码的生成是异步的，譬如：\n\n```js\nlet qrcodeEl = document.getElementById('qrcode')\nlet qrcode = new QRCode(qrcodeEl, {\n  text: 'https://avatars1.githubusercontent.com/u/23273077',\n  width: 200,\n  height: 200,\n  colorDark: '#000000',\n  colorLight: '#ffffff',\n  correctLevel: QRCode.CorrectLevel.H\n})\nlet qrcodeImg = document.querySelectorAll('.qrcode canvas+img')\nconsole.log('qrcodeImg.src', qrcodeImg.src)\nsetTimeout(function() {\n  console.log('qrcodeImg.src', qrcodeImg.src)\n}, 1000)\n```\n\n第一个日志就是空白的，第二个才有 base64。搞笑的是，[qrcodejs][qrcodejs] 也没有给出回调或者通知告诉用户什么时候生成完毕。\n\n这个问题也是在 issues 里找到的提示，关键点在于 [MutationObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver)。\n\n这个 API 很少在项目中用，因为不兼容性 ie11-，但是有时在几千行代码里 debug 时会用，尤其是我怀疑中间有代码改了某个元素的属性，确又找不到证据或者找不到哪段代码时，会用这个来监测下。在这里的用法如下：\n\n```js\nlet qrcodeEl = document.getElementById('qrcode')\nlet qrcode = new QRCode(qrcodeEl, {\n  text: 'https://avatars1.githubusercontent.com/u/23273077',\n  width: 200,\n  height: 200,\n  colorDark: '#000000',\n  colorLight: '#ffffff',\n  correctLevel: QRCode.CorrectLevel.H\n})\nlet qrcodeImg = document.querySelector('.qrcode canvas+img')\nlistenQrcodeSrc()\nfunction listenQrcodeSrc() {\n  var observeConfig = { attributes: true }\n  var observeCb = function(mutationsList, observer) {\n    mutationsList.forEach(function(mutation) {\n      if (\n        mutation.type.toLowerCase() === 'attributes' &&\n        mutation.attributeName.toLowerCase() === 'src'\n      ) {\n        console.log('qrcodeImg src done!', mutation.target.src)\n        observer.disconnect()\n      }\n    })\n  }\n  if (typeof MutationObserver !== 'undefined') {\n    var observer = new MutationObserver(observeCb)\n    observer.observe(qrcodeImg, observeConfig)\n  }\n}\n```\n\n#### 微信中二维码要放在 `img` 中，不能放在 `background-image`\n\n2019.1.31 ，微信 7.0.0 亲测\n\n#### 微信中多个二维码在一起识别错误\n\n这个问题，我也遇到了，根据网友的提示，微信是截屏识别的，所以会出现这种问题。我测试的结果是，左右两个，永远识别的右边的那个。网上有好几种方案：\n\n- 调透明度和层级\n\n最初尝试过，结果发现失败，等到成功的时候，透明度已经小于 0.5 了，视觉差异太明显，所以放弃了这个方案。\n\n- 替换二维码\n\n最终采取的是这个，这个也有问题，就是用户会看到二维码变化的过程，除非你把多个二维码做得很像。\n\n假设，我们要显示两个二维码，所谓替换二维码，其实也就是在多个 `img.src` 属性里切换，可以把实际的二维码保存在 `data-real-src` 属性里，然后在用户 `touchstart` 事件中，替换另一个 `img` 的 `src` 为当前按下的这个，然后在 `touchend` 事件中再改回来，因为原来的地址都保存在 `data-real-src` 属性里。\n\n这里就用到了前面提到的检测 `src` 属性来判断 `qrcode` 生成完毕，否则一开始直接把 `src` 属性赋给 `data-real-src` 属性，就是空白。\n\n示例代码（这里代码跟前面脱节了，dom 是另外的结构，仅作为示例代码）：\n\n```js\n//* pubMethods 是类似 jq 的一些 API 的汇总对象\nvar qrcodeImgs = pubMethods.$('.download__qrcode-box canvas+img')\nlistenQrcodeSrc()\nvar downloadBox = pubMethods.$('.download')[0]\ndownloadBox.addEventListener('touchstart', changeQrcodeSrcToOne)\ndownloadBox.addEventListener('touchend', changeQrcodeSrcBack)\ndownloadBox.addEventListener('touchcancel', changeQrcodeSrcBack)\n\nfunction listenQrcodeSrc() {\n  var observeConfig = { attributes: true }\n  var observeCb = function(mutationsList, observer) {\n    mutationsList.forEach(function(mutation) {\n      if (\n        mutation.type.toLowerCase() === 'attributes' &&\n        mutation.attributeName.toLowerCase() === 'src'\n      ) {\n        mutation.target.setAttribute('data-real-src', mutation.target.src)\n        observer.disconnect()\n      }\n    })\n  }\n  qrcodeImgs.forEach(function(ele) {\n    if (typeof MutationObserver !== 'undefined') {\n      var observer = new MutationObserver(observeCb)\n      observer.observe(ele, observeConfig)\n    }\n  })\n}\nfunction changeQrcodeSrcToOne(event) {\n  var target = event.target\n  var getQrcodeBox = pubMethods.closest(\n    target,\n    '.download__qrcode-box',\n    downloadBox\n  )\n  if (getQrcodeBox) {\n    var targetImg = qrcodeImgs.filter(function(ele) {\n      return getQrcodeBox.contains(ele)\n    })[0]\n    qrcodeImgs.forEach(function(ele) {\n      ele.src = targetImg.getAttribute('data-real-src')\n    })\n  }\n}\nfunction changeQrcodeSrcBack(event) {\n  qrcodeImgs.forEach(function(ele) {\n    ele.src = ele.getAttribute('data-real-src')\n  })\n}\n```\n\n## Ending\n\n## Reference\n\n- [Make qr code full width](https://stackoverflow.com/questions/34546241/make-qr-code-full-width)\n\n- [微信中有两个挨着二维码长按识别的问题?](https://www.zhihu.com/question/35246592)\n\n[qrcodejs]: https://github.com/davidshimjs/qrcodejs\n","slug":"problems-met-when-using-qrcodejs","published":1,"updated":"2019-01-31T07:34:27.846Z","layout":"post","photos":[],"link":"","_id":"cjv0yvj1b008uborp6e1hzmye","content":"<h2>Preface</h2>\n<p>产品希望我这边下载页面加个二维码，可以扫描下载 APP，并且希望二维码中有公司的 logo，很合理的需求，不过实现的时候依旧遇到了几个问题，在此记录下。</p>\n<h2>Main</h2>\n<p>二维码的实现逻辑我当然没有这个时间去研究，直接用的 <a href=\"https://github.com/davidshimjs/qrcodejs\">qrcodejs</a>。官方给的 demo 是最简单的版本，各种各样的需求都是在 issues 里找到的提示，似乎这个库已经很久没有人去维护了，虽然 star 是很多。</p>\n<h4>官网示例（改编）</h4>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"qrcode\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"qrcode\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.qrcode</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid green;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> qrcodeEl = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'qrcode'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> qrcode = <span class=\"keyword\">new</span> QRCode(qrcodeEl, &#123;</span><br><span class=\"line\">  text: <span class=\"string\">'https://avatars1.githubusercontent.com/u/23273077'</span>,</span><br><span class=\"line\">  width: <span class=\"number\">128</span>,</span><br><span class=\"line\">  height: <span class=\"number\">128</span>,</span><br><span class=\"line\">  colorDark: <span class=\"string\">'#000000'</span>,</span><br><span class=\"line\">  colorLight: <span class=\"string\">'#ffffff'</span>,</span><br><span class=\"line\">  correctLevel: QRCode.CorrectLevel.H</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>效果如图：</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181003145142.png\" alt=\"截图20181003145142.png\"></p>\n<h4>尺寸控制</h4>\n<p>我给官网的示例加上了边框，二维码的尺寸和 js 里的尺寸不一样，这个缺点立马就暴露出来了。</p>\n<p>我很可能是想生成的二维码填满传入的 <code>qrcode</code> 元素的，但是这里的 <code>width</code> 不支持 100%，更不支持 <code>vw</code> 这种尺寸单位了。当然，我可以用 <code>qrcode.offsetWidth</code> 来解决这个问题，但是如果 <code>qrcode</code> 的尺寸后期会动态修改的话，那不还是会有问题么。</p>\n<p>经 SO 的提示，发现了一个好方案，</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.qrcode</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid green;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.qrcode</span> <span class=\"selector-tag\">canvas</span> + <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以了，不过仍然有个不足，**就是二维码有失真。经测试，只有传入的尺寸和 <code>qrcode</code> 的尺寸一样时，才不会失真，所以传入的尺寸还是需要动态计算。**不过，可以试试 svg 的 qrcode 库，svg 不会出现这个问题。</p>\n<h4>加 logo 的二维码</h4>\n<p><a href=\"https://github.com/davidshimjs/qrcodejs\">qrcodejs</a> 并没有提供这个 API，issues 里有人给了 demo，其实就是在原有元素上覆盖一个 logo 就可以了，虽然遮盖了原有二维码的一部分，但是实测并不影响扫描。不过我没有进行大规模测试，<strong>可能会有一定的错误率。</strong></p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"qrcode\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"qrcode\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">src</span>=<span class=\"string\">\"https://avatars1.githubusercontent.com/u/23273077\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"qrcode__logo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.qrcode</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid green;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.qrcode</span> <span class=\"selector-tag\">canvas</span> + <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.qrcode__logo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如图：</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181003164515.png\" alt=\"截图20181003164515.png\"></p>\n<h4>检测二维码的生成</h4>\n<p>某些情况下，我需要重用二维码，在这种情况下，我发现，二维码的生成是异步的，譬如：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> qrcodeEl = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'qrcode'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> qrcode = <span class=\"keyword\">new</span> QRCode(qrcodeEl, &#123;</span><br><span class=\"line\">  text: <span class=\"string\">'https://avatars1.githubusercontent.com/u/23273077'</span>,</span><br><span class=\"line\">  width: <span class=\"number\">200</span>,</span><br><span class=\"line\">  height: <span class=\"number\">200</span>,</span><br><span class=\"line\">  colorDark: <span class=\"string\">'#000000'</span>,</span><br><span class=\"line\">  colorLight: <span class=\"string\">'#ffffff'</span>,</span><br><span class=\"line\">  correctLevel: QRCode.CorrectLevel.H</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> qrcodeImg = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.qrcode canvas+img'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'qrcodeImg.src'</span>, qrcodeImg.src)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'qrcodeImg.src'</span>, qrcodeImg.src)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure></p>\n<p>第一个日志就是空白的，第二个才有 base64。搞笑的是，<a href=\"https://github.com/davidshimjs/qrcodejs\">qrcodejs</a> 也没有给出回调或者通知告诉用户什么时候生成完毕。</p>\n<p>这个问题也是在 issues 里找到的提示，关键点在于 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\" target=\"_blank\" rel=\"noopener\">MutationObserver</a>。</p>\n<p>这个 API 很少在项目中用，因为不兼容性 ie11-，但是有时在几千行代码里 debug 时会用，尤其是我怀疑中间有代码改了某个元素的属性，确又找不到证据或者找不到哪段代码时，会用这个来监测下。在这里的用法如下：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> qrcodeEl = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'qrcode'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> qrcode = <span class=\"keyword\">new</span> QRCode(qrcodeEl, &#123;</span><br><span class=\"line\">  text: <span class=\"string\">'https://avatars1.githubusercontent.com/u/23273077'</span>,</span><br><span class=\"line\">  width: <span class=\"number\">200</span>,</span><br><span class=\"line\">  height: <span class=\"number\">200</span>,</span><br><span class=\"line\">  colorDark: <span class=\"string\">'#000000'</span>,</span><br><span class=\"line\">  colorLight: <span class=\"string\">'#ffffff'</span>,</span><br><span class=\"line\">  correctLevel: QRCode.CorrectLevel.H</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> qrcodeImg = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.qrcode canvas+img'</span>)</span><br><span class=\"line\">listenQrcodeSrc()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listenQrcodeSrc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> observeConfig = &#123; <span class=\"attr\">attributes</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> observeCb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutationsList, observer</span>) </span>&#123;</span><br><span class=\"line\">    mutationsList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutation</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        mutation.type.toLowerCase() === <span class=\"string\">'attributes'</span> &amp;&amp;</span><br><span class=\"line\">        mutation.attributeName.toLowerCase() === <span class=\"string\">'src'</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'qrcodeImg src done!'</span>, mutation.target.src)</span><br><span class=\"line\">        observer.disconnect()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> MutationObserver !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> MutationObserver(observeCb)</span><br><span class=\"line\">    observer.observe(qrcodeImg, observeConfig)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4>微信中二维码要放在 <code>img</code> 中，不能放在 <code>background-image</code></h4>\n<p>2019.1.31 ，微信 7.0.0 亲测</p>\n<h4>微信中多个二维码在一起识别错误</h4>\n<p>这个问题，我也遇到了，根据网友的提示，微信是截屏识别的，所以会出现这种问题。我测试的结果是，左右两个，永远识别的右边的那个。网上有好几种方案：</p>\n<ul>\n<li>调透明度和层级</li>\n</ul>\n<p>最初尝试过，结果发现失败，等到成功的时候，透明度已经小于 0.5 了，视觉差异太明显，所以放弃了这个方案。</p>\n<ul>\n<li>替换二维码</li>\n</ul>\n<p>最终采取的是这个，这个也有问题，就是用户会看到二维码变化的过程，除非你把多个二维码做得很像。</p>\n<p>假设，我们要显示两个二维码，所谓替换二维码，其实也就是在多个 <code>img.src</code> 属性里切换，可以把实际的二维码保存在 <code>data-real-src</code> 属性里，然后在用户 <code>touchstart</code> 事件中，替换另一个 <code>img</code> 的 <code>src</code> 为当前按下的这个，然后在 <code>touchend</code> 事件中再改回来，因为原来的地址都保存在 <code>data-real-src</code> 属性里。</p>\n<p>这里就用到了前面提到的检测 <code>src</code> 属性来判断 <code>qrcode</code> 生成完毕，否则一开始直接把 <code>src</code> 属性赋给 <code>data-real-src</code> 属性，就是空白。</p>\n<p>示例代码（这里代码跟前面脱节了，dom 是另外的结构，仅作为示例代码）：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//* pubMethods 是类似 jq 的一些 API 的汇总对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> qrcodeImgs = pubMethods.$(<span class=\"string\">'.download__qrcode-box canvas+img'</span>)</span><br><span class=\"line\">listenQrcodeSrc()</span><br><span class=\"line\"><span class=\"keyword\">var</span> downloadBox = pubMethods.$(<span class=\"string\">'.download'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">downloadBox.addEventListener(<span class=\"string\">'touchstart'</span>, changeQrcodeSrcToOne)</span><br><span class=\"line\">downloadBox.addEventListener(<span class=\"string\">'touchend'</span>, changeQrcodeSrcBack)</span><br><span class=\"line\">downloadBox.addEventListener(<span class=\"string\">'touchcancel'</span>, changeQrcodeSrcBack)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listenQrcodeSrc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> observeConfig = &#123; <span class=\"attr\">attributes</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> observeCb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutationsList, observer</span>) </span>&#123;</span><br><span class=\"line\">    mutationsList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutation</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        mutation.type.toLowerCase() === <span class=\"string\">'attributes'</span> &amp;&amp;</span><br><span class=\"line\">        mutation.attributeName.toLowerCase() === <span class=\"string\">'src'</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        mutation.target.setAttribute(<span class=\"string\">'data-real-src'</span>, mutation.target.src)</span><br><span class=\"line\">        observer.disconnect()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  qrcodeImgs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> MutationObserver !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> MutationObserver(observeCb)</span><br><span class=\"line\">      observer.observe(ele, observeConfig)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeQrcodeSrcToOne</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = event.target</span><br><span class=\"line\">  <span class=\"keyword\">var</span> getQrcodeBox = pubMethods.closest(</span><br><span class=\"line\">    target,</span><br><span class=\"line\">    <span class=\"string\">'.download__qrcode-box'</span>,</span><br><span class=\"line\">    downloadBox</span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (getQrcodeBox) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> targetImg = qrcodeImgs.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> getQrcodeBox.contains(ele)</span><br><span class=\"line\">    &#125;)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    qrcodeImgs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>) </span>&#123;</span><br><span class=\"line\">      ele.src = targetImg.getAttribute(<span class=\"string\">'data-real-src'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeQrcodeSrcBack</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  qrcodeImgs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>) </span>&#123;</span><br><span class=\"line\">    ele.src = ele.getAttribute(<span class=\"string\">'data-real-src'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/34546241/make-qr-code-full-width\" target=\"_blank\" rel=\"noopener\">Make qr code full width</a></p>\n</li>\n<li>\n<p><a href=\"https://www.zhihu.com/question/35246592\" target=\"_blank\" rel=\"noopener\">微信中有两个挨着二维码长按识别的问题?</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>产品希望我这边下载页面加个二维码，可以扫描下载 APP，并且希望二维码中有公司的 logo，很合理的需求，不过实现的时候依旧遇到了几个问题，在此记录下。</p>\n<h2>Main</h2>\n<p>二维码的实现逻辑我当然没有这个时间去研究，直接用的 <a href=\"https://github.com/davidshimjs/qrcodejs\">qrcodejs</a>。官方给的 demo 是最简单的版本，各种各样的需求都是在 issues 里找到的提示，似乎这个库已经很久没有人去维护了，虽然 star 是很多。</p>\n<h4>官网示例（改编）</h4>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"qrcode\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"qrcode\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.qrcode</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid green;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> qrcodeEl = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'qrcode'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> qrcode = <span class=\"keyword\">new</span> QRCode(qrcodeEl, &#123;</span><br><span class=\"line\">  text: <span class=\"string\">'https://avatars1.githubusercontent.com/u/23273077'</span>,</span><br><span class=\"line\">  width: <span class=\"number\">128</span>,</span><br><span class=\"line\">  height: <span class=\"number\">128</span>,</span><br><span class=\"line\">  colorDark: <span class=\"string\">'#000000'</span>,</span><br><span class=\"line\">  colorLight: <span class=\"string\">'#ffffff'</span>,</span><br><span class=\"line\">  correctLevel: QRCode.CorrectLevel.H</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>效果如图：</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181003145142.png\" alt=\"截图20181003145142.png\"></p>\n<h4>尺寸控制</h4>\n<p>我给官网的示例加上了边框，二维码的尺寸和 js 里的尺寸不一样，这个缺点立马就暴露出来了。</p>\n<p>我很可能是想生成的二维码填满传入的 <code>qrcode</code> 元素的，但是这里的 <code>width</code> 不支持 100%，更不支持 <code>vw</code> 这种尺寸单位了。当然，我可以用 <code>qrcode.offsetWidth</code> 来解决这个问题，但是如果 <code>qrcode</code> 的尺寸后期会动态修改的话，那不还是会有问题么。</p>\n<p>经 SO 的提示，发现了一个好方案，</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.qrcode</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid green;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.qrcode</span> <span class=\"selector-tag\">canvas</span> + <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以了，不过仍然有个不足，**就是二维码有失真。经测试，只有传入的尺寸和 <code>qrcode</code> 的尺寸一样时，才不会失真，所以传入的尺寸还是需要动态计算。**不过，可以试试 svg 的 qrcode 库，svg 不会出现这个问题。</p>\n<h4>加 logo 的二维码</h4>\n<p><a href=\"https://github.com/davidshimjs/qrcodejs\">qrcodejs</a> 并没有提供这个 API，issues 里有人给了 demo，其实就是在原有元素上覆盖一个 logo 就可以了，虽然遮盖了原有二维码的一部分，但是实测并不影响扫描。不过我没有进行大规模测试，<strong>可能会有一定的错误率。</strong></p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"qrcode\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"qrcode\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">src</span>=<span class=\"string\">\"https://avatars1.githubusercontent.com/u/23273077\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"qrcode__logo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.qrcode</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid green;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.qrcode</span> <span class=\"selector-tag\">canvas</span> + <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.qrcode__logo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如图：</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181003164515.png\" alt=\"截图20181003164515.png\"></p>\n<h4>检测二维码的生成</h4>\n<p>某些情况下，我需要重用二维码，在这种情况下，我发现，二维码的生成是异步的，譬如：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> qrcodeEl = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'qrcode'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> qrcode = <span class=\"keyword\">new</span> QRCode(qrcodeEl, &#123;</span><br><span class=\"line\">  text: <span class=\"string\">'https://avatars1.githubusercontent.com/u/23273077'</span>,</span><br><span class=\"line\">  width: <span class=\"number\">200</span>,</span><br><span class=\"line\">  height: <span class=\"number\">200</span>,</span><br><span class=\"line\">  colorDark: <span class=\"string\">'#000000'</span>,</span><br><span class=\"line\">  colorLight: <span class=\"string\">'#ffffff'</span>,</span><br><span class=\"line\">  correctLevel: QRCode.CorrectLevel.H</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> qrcodeImg = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.qrcode canvas+img'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'qrcodeImg.src'</span>, qrcodeImg.src)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'qrcodeImg.src'</span>, qrcodeImg.src)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure></p>\n<p>第一个日志就是空白的，第二个才有 base64。搞笑的是，<a href=\"https://github.com/davidshimjs/qrcodejs\">qrcodejs</a> 也没有给出回调或者通知告诉用户什么时候生成完毕。</p>\n<p>这个问题也是在 issues 里找到的提示，关键点在于 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\" target=\"_blank\" rel=\"noopener\">MutationObserver</a>。</p>\n<p>这个 API 很少在项目中用，因为不兼容性 ie11-，但是有时在几千行代码里 debug 时会用，尤其是我怀疑中间有代码改了某个元素的属性，确又找不到证据或者找不到哪段代码时，会用这个来监测下。在这里的用法如下：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> qrcodeEl = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'qrcode'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> qrcode = <span class=\"keyword\">new</span> QRCode(qrcodeEl, &#123;</span><br><span class=\"line\">  text: <span class=\"string\">'https://avatars1.githubusercontent.com/u/23273077'</span>,</span><br><span class=\"line\">  width: <span class=\"number\">200</span>,</span><br><span class=\"line\">  height: <span class=\"number\">200</span>,</span><br><span class=\"line\">  colorDark: <span class=\"string\">'#000000'</span>,</span><br><span class=\"line\">  colorLight: <span class=\"string\">'#ffffff'</span>,</span><br><span class=\"line\">  correctLevel: QRCode.CorrectLevel.H</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> qrcodeImg = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.qrcode canvas+img'</span>)</span><br><span class=\"line\">listenQrcodeSrc()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listenQrcodeSrc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> observeConfig = &#123; <span class=\"attr\">attributes</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> observeCb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutationsList, observer</span>) </span>&#123;</span><br><span class=\"line\">    mutationsList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutation</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        mutation.type.toLowerCase() === <span class=\"string\">'attributes'</span> &amp;&amp;</span><br><span class=\"line\">        mutation.attributeName.toLowerCase() === <span class=\"string\">'src'</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'qrcodeImg src done!'</span>, mutation.target.src)</span><br><span class=\"line\">        observer.disconnect()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> MutationObserver !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> MutationObserver(observeCb)</span><br><span class=\"line\">    observer.observe(qrcodeImg, observeConfig)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4>微信中二维码要放在 <code>img</code> 中，不能放在 <code>background-image</code></h4>\n<p>2019.1.31 ，微信 7.0.0 亲测</p>\n<h4>微信中多个二维码在一起识别错误</h4>\n<p>这个问题，我也遇到了，根据网友的提示，微信是截屏识别的，所以会出现这种问题。我测试的结果是，左右两个，永远识别的右边的那个。网上有好几种方案：</p>\n<ul>\n<li>调透明度和层级</li>\n</ul>\n<p>最初尝试过，结果发现失败，等到成功的时候，透明度已经小于 0.5 了，视觉差异太明显，所以放弃了这个方案。</p>\n<ul>\n<li>替换二维码</li>\n</ul>\n<p>最终采取的是这个，这个也有问题，就是用户会看到二维码变化的过程，除非你把多个二维码做得很像。</p>\n<p>假设，我们要显示两个二维码，所谓替换二维码，其实也就是在多个 <code>img.src</code> 属性里切换，可以把实际的二维码保存在 <code>data-real-src</code> 属性里，然后在用户 <code>touchstart</code> 事件中，替换另一个 <code>img</code> 的 <code>src</code> 为当前按下的这个，然后在 <code>touchend</code> 事件中再改回来，因为原来的地址都保存在 <code>data-real-src</code> 属性里。</p>\n<p>这里就用到了前面提到的检测 <code>src</code> 属性来判断 <code>qrcode</code> 生成完毕，否则一开始直接把 <code>src</code> 属性赋给 <code>data-real-src</code> 属性，就是空白。</p>\n<p>示例代码（这里代码跟前面脱节了，dom 是另外的结构，仅作为示例代码）：</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//* pubMethods 是类似 jq 的一些 API 的汇总对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> qrcodeImgs = pubMethods.$(<span class=\"string\">'.download__qrcode-box canvas+img'</span>)</span><br><span class=\"line\">listenQrcodeSrc()</span><br><span class=\"line\"><span class=\"keyword\">var</span> downloadBox = pubMethods.$(<span class=\"string\">'.download'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">downloadBox.addEventListener(<span class=\"string\">'touchstart'</span>, changeQrcodeSrcToOne)</span><br><span class=\"line\">downloadBox.addEventListener(<span class=\"string\">'touchend'</span>, changeQrcodeSrcBack)</span><br><span class=\"line\">downloadBox.addEventListener(<span class=\"string\">'touchcancel'</span>, changeQrcodeSrcBack)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listenQrcodeSrc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> observeConfig = &#123; <span class=\"attr\">attributes</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> observeCb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutationsList, observer</span>) </span>&#123;</span><br><span class=\"line\">    mutationsList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mutation</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        mutation.type.toLowerCase() === <span class=\"string\">'attributes'</span> &amp;&amp;</span><br><span class=\"line\">        mutation.attributeName.toLowerCase() === <span class=\"string\">'src'</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        mutation.target.setAttribute(<span class=\"string\">'data-real-src'</span>, mutation.target.src)</span><br><span class=\"line\">        observer.disconnect()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  qrcodeImgs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> MutationObserver !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> observer = <span class=\"keyword\">new</span> MutationObserver(observeCb)</span><br><span class=\"line\">      observer.observe(ele, observeConfig)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeQrcodeSrcToOne</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = event.target</span><br><span class=\"line\">  <span class=\"keyword\">var</span> getQrcodeBox = pubMethods.closest(</span><br><span class=\"line\">    target,</span><br><span class=\"line\">    <span class=\"string\">'.download__qrcode-box'</span>,</span><br><span class=\"line\">    downloadBox</span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (getQrcodeBox) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> targetImg = qrcodeImgs.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> getQrcodeBox.contains(ele)</span><br><span class=\"line\">    &#125;)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    qrcodeImgs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>) </span>&#123;</span><br><span class=\"line\">      ele.src = targetImg.getAttribute(<span class=\"string\">'data-real-src'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeQrcodeSrcBack</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  qrcodeImgs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>) </span>&#123;</span><br><span class=\"line\">    ele.src = ele.getAttribute(<span class=\"string\">'data-real-src'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/34546241/make-qr-code-full-width\" target=\"_blank\" rel=\"noopener\">Make qr code full width</a></p>\n</li>\n<li>\n<p><a href=\"https://www.zhihu.com/question/35246592\" target=\"_blank\" rel=\"noopener\">微信中有两个挨着二维码长按识别的问题?</a></p>\n</li>\n</ul>\n"},{"title":"Traps of Computed in Vue","comments":1,"date":"2018-11-25T05:18:28.000Z","_content":"\nIf you have used [vue](https://vuejs.org/index.html) I guess you probably know or have used `computed`. It seems pretty convenient and easy to use. However, it may bring you some problems if you didn't understand it totally.\n\n### Trap in Computed\n\nLet's see the demo below:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n    <style>\n      html,\n      body {\n        height: 100%;\n      }\n\n      .app,\n      .app__product {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-flow: column;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .app__product,\n      .product {\n        justify-content: space-evenly;\n      }\n\n      .product {\n        width: 150px;\n        height: 150px;\n        margin: 20px;\n        text-align: center;\n        outline: #111 1px solid;\n        display: flex;\n        flex-flow: column;\n      }\n\n      .product--active {\n        outline: orange 5px solid;\n      }\n    </style>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js\"></script>\n  </head>\n\n  <body>\n    <div id=\"app\" class=\"app\">\n      <product\n        class=\"app__product\"\n        :products=\"products\"\n        :selected-id.sync=\"selectedId\"\n        :current-product=\"currentProduct\"\n      ></product>\n    </div>\n    <script>\n      const product = Vue.component('product', {\n        template: `\n                                        <div>\n                                            <div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\">\n                                                  <div class=\"product__name\">I am {{item.name}}</div>\n                                                  <div class=\"product__name--selected\">selected: {{currentProduct.name}}</div>\n                                            </div>\n                                        </div>`,\n        props: ['products', 'selectedId', 'currentProduct']\n      })\n      const app = new Vue({\n        el: '#app',\n        components: {\n          product\n        },\n        data: {\n          products: [\n            {\n              id: 0,\n              name: '0'\n            },\n            {\n              id: 1,\n              name: '1'\n            },\n            {\n              id: 2,\n              name: '2'\n            }\n          ],\n          selectedId: 1\n        },\n        computed: {\n          currentProduct() {\n            return this.products.find(({ id }) => id === this.selectedId)\n          }\n        },\n        mounted() {\n          let selectIndex = this.products.findIndex(\n            obj => obj.id === this.selectedId\n          )\n          this.products[selectIndex].name = '1-1'\n        }\n      })\n    </script>\n  </body>\n</html>\n```\n\nAnd here is the result:\n\n![](../images/截图20181125140044.png)\n\nUntil now, nothing weird happens. However, if I changed the mounted hook to below:\n\n```js\nlet selectIndex = this.products.findIndex(obj => obj.id === this.selectedId)\nthis.products[selectIndex] = Object.assign({}, this.products[selectIndex], {\n  name: '1-1'\n})\n```\n\nAny difference with the ui ? Yes, it has. The result would be:\n\n![](../images/截图20181125140603.png)\n\nAs you might thought, `currentProduct` is not right. Is that a bug?\n\nNo! Let's look at the doc:\n\n> However, the difference is that computed properties **are cached based on their dependencies**. A computed property will **only re-evaluate when some of its dependencies have changed**.\n\nThat is how `computed` works.\n\nIn case above, `currentProduct` only has two dependencies which are `products` and `selectedId`. When we use code below:\n\n```js\nthis.products[selectIndex] = Object.assign({}, this.products[selectIndex], {\n  name: '1-1'\n})\n```\n\nWe didn't actually change `products` or `selectedId`. We just change the attributes of `products` not `products` itself. Neither did code below:\n\n```js\nthis.products[selectIndex].name = '1-1'\n```\n\nCode above works because we are changing the existing attributes of `currentProduct`. So, it works as expected.\n\n### Computed or Methods\n\nIf that bothers you, doc also gives you another choice:\n\n> Instead of a computed property, we can define the same function as a method instead. For the end result, the two approaches are indeed exactly the same.\n\nBut in this case, it needs to be a little complicated. The code would be:\n\n```js\nconst product = Vue.component('product', {\n  template: `\n      <div>\n          <div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\">\n                <div class=\"product__name\">I am {{item.name}}</div>\n                <div class=\"product__name--selected\">selected: {{getCurProduct().name}}</div>\n          </div>\n      </div>`,\n  props: ['products', 'selectedId'],\n  methods: {\n    getCurProduct() {\n      return this.products.find(({ id }) => id === this.selectedId)\n    }\n  }\n})\nconst app = new Vue({\n  el: '#app',\n  components: {\n    product\n  },\n  data: {\n    products: [\n      {\n        id: 0,\n        name: '0'\n      },\n      {\n        id: 1,\n        name: '1'\n      },\n      {\n        id: 2,\n        name: '2'\n      }\n    ],\n    selectedId: 1\n  },\n  mounted() {\n    let selectIndex = this.products.findIndex(obj => obj.id === this.selectedId)\n    this.products[selectIndex] = Object.assign({}, this.products[selectIndex], {\n      name: '1-1'\n    })\n    this.$children[0].$forceUpdate()\n  }\n})\n```\n\nThe point which needs to take care is\n\n```js\nthis.$children[0].$forceUpdate()\n```\n\nIn this case, simply change `currentProduct` to `getCurProduct()` doesn't work because we have to let `product` invoke `getCurProduct()` to get the latest data.\n\nAlso, you can use `getCurProduct` in the root:\n\n```html\n<div id=\"app\" class=\"app\">\n  <product\n    class=\"app__product\"\n    :products=\"products\"\n    :selected-id.sync=\"selectedId\"\n    :current-product=\"getCurProduct()\"\n  ></product>\n</div>\n```\n\n```js\nconst product = Vue.component('product', {\n  template: `\n      <div>\n          <div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\">\n                <div class=\"product__name\">I am {{item.name}}</div>\n                <div class=\"product__name--selected\">selected: {{currentProduct.name}}</div>\n          </div>\n      </div>`,\n  props: ['products', 'selectedId', 'currentProduct']\n})\nconst app = new Vue({\n  el: '#app',\n  components: {\n    product\n  },\n  data: {\n    products: [\n      {\n        id: 0,\n        name: '0'\n      },\n      {\n        id: 1,\n        name: '1'\n      },\n      {\n        id: 2,\n        name: '2'\n      }\n    ],\n    selectedId: 1\n  },\n  mounted() {\n    let selectIndex = this.products.findIndex(obj => obj.id === this.selectedId)\n    this.products[selectIndex] = Object.assign({}, this.products[selectIndex], {\n      name: '1-1'\n    })\n    // this.$children[0].$forceUpdate()\n    this.$forceUpdate()\n  },\n  methods: {\n    getCurProduct() {\n      return this.products.find(({ id }) => id === this.selectedId)\n    }\n  }\n})\n```\n\n### Insist on Computed for Cache Control ?\n\nSometimes `methods` isn't be a better choice because we really need the cache control like the doc said:\n\n> Why do we need caching? Imagine we have an expensive computed property **A**, which requires looping through a huge Array and doing a lot of computations. Then we may have other computed properties that in turn depend on **A**. Without caching, we would be executing **A’s** getter many more times than necessary!\n\nSo, somebody proposed a feature request for `$recompute` in [vuejs/vue#214](https://github.com/vuejs/vue/issues/214). Also, some guys figured out some solutions.\n\nTake a look at the code below:\n\n```html\n<div id=\"app\" class=\"app\">\n  <product\n    class=\"app__product\"\n    :products=\"products\"\n    :selected-id.sync=\"selectedId\"\n    :current-product=\"currentProduct\"\n  ></product>\n</div>\n```\n\n```js\nconst product = Vue.component('product', {\n  template: `\n      <div>\n          <div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\">\n                <div class=\"product__name\">I am {{item.name}}</div>\n                <div class=\"product__name--selected\">selected: {{currentProduct.name}}</div>\n          </div>\n      </div>`,\n  props: ['products', 'selectedId', 'currentProduct']\n})\nconst app = new Vue({\n  el: '#app',\n  components: {\n    product\n  },\n  data: {\n    products: [\n      {\n        id: 0,\n        name: '0'\n      },\n      {\n        id: 1,\n        name: '1'\n      },\n      {\n        id: 2,\n        name: '2'\n      }\n    ],\n    selectedId: 1,\n    currentProductSwitch: false\n  },\n  computed: {\n    currentProduct() {\n      // just let currentProductSwitch become a new dependency of currentProduct\n      this.currentProductSwitch\n      return this.products.find(({ id }) => id === this.selectedId)\n    }\n  },\n  mounted() {\n    let selectIndex = this.products.findIndex(obj => obj.id === this.selectedId)\n    this.products[selectIndex] = Object.assign({}, this.products[selectIndex], {\n      name: '1-1'\n    })\n    // update currentProductSwitch to recompute currentProduct\n    this.currentProductSwitch = !this.currentProductSwitch\n  }\n})\n```\n\nDo you understand the principle?\n\nI add `currentProductSwitch` in `currentProduct` getter to make `currentProductSwitch` become one dependency of `currentProduct`. So, we can make `currentProduct` recompute when we change the value of `currentProductSwitch`.\n\nNow, let's take a look at the solution [posva](https://github.com/posva) gives:\n\n```js\nconst product = Vue.component('product', {\n  template: `\n      <div>\n          <div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\">\n                <div class=\"product__name\">I am {{item.name}}</div>\n                <div class=\"product__name--selected\">selected: {{currentProduct.name}}</div>\n          </div>\n      </div>`,\n  props: ['products', 'selectedId', 'currentProduct']\n})\nconst recompute = Vue.mixin({\n  data() {\n    return {\n      __recomputed: Object.create(null)\n    }\n  },\n  created() {\n    const watchers = this._computedWatchers\n    if (!watchers) {\n      return\n    }\n    if (typeof this.$recompute === 'function') {\n      return\n    }\n    this.$recompute = key => {\n      const { __recomputed } = this.$data\n      this.$set(__recomputed, key, !__recomputed[key])\n    }\n    Reflect.ownKeys(watchers).forEach(key => {\n      const watcher = watchers[key]\n      watcher.getter = (function(getter) {\n        return vm => {\n          vm.$data.__recomputed[key]\n          return getter.call(vm, vm)\n        }\n      })(watcher.getter)\n    })\n  }\n})\nconst app = new Vue({\n  el: '#app',\n  components: {\n    product\n  },\n  mixins: [recompute],\n  data: {\n    products: [\n      {\n        id: 0,\n        name: '0'\n      },\n      {\n        id: 1,\n        name: '1'\n      },\n      {\n        id: 2,\n        name: '2'\n      }\n    ],\n    selectedId: 1\n  },\n  computed: {\n    currentProduct() {\n      return this.products.find(({ id }) => id === this.selectedId)\n    }\n  },\n  mounted() {\n    let selectIndex = this.products.findIndex(obj => obj.id === this.selectedId)\n    this.products[selectIndex] = Object.assign({}, this.products[selectIndex], {\n      name: '1-1'\n    })\n    this.$recompute('currentProduct')\n  }\n})\n```\n\nThe core code is:\n\n```js\n// ....\n//* each time called $recompute, reverse the new dependency to let getter recompute\nthis.$recompute = key => {\n  const { __recomputed } = this.$data\n  this.$set(__recomputed, key, !__recomputed[key])\n}\n//* let __recomputed[key] become a new dependency of key's getter\nReflect.ownKeys(watchers).forEach(key => {\n  const watcher = watchers[key]\n  watcher.getter = (function(getter) {\n    return vm => {\n      vm.$data.__recomputed[key]\n      return getter.call(vm, vm)\n    }\n  })(watcher.getter)\n})\n// ....\nthis.$recompute('currentProduct')\n```\n\nLast tip, the same thing also happens on `getters` in `vuex`.\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/35)\n","source":"_posts/traps-of-computed-in-vue.md","raw":"---\ntitle: Traps of Computed in Vue\ncategories: frame\ntags:\n  - vue\n  - computed\n  - $recomputed\ncomments: true\ndate: 2018-11-25 13:18:28\n---\n\nIf you have used [vue](https://vuejs.org/index.html) I guess you probably know or have used `computed`. It seems pretty convenient and easy to use. However, it may bring you some problems if you didn't understand it totally.\n\n### Trap in Computed\n\nLet's see the demo below:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n    <style>\n      html,\n      body {\n        height: 100%;\n      }\n\n      .app,\n      .app__product {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-flow: column;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .app__product,\n      .product {\n        justify-content: space-evenly;\n      }\n\n      .product {\n        width: 150px;\n        height: 150px;\n        margin: 20px;\n        text-align: center;\n        outline: #111 1px solid;\n        display: flex;\n        flex-flow: column;\n      }\n\n      .product--active {\n        outline: orange 5px solid;\n      }\n    </style>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js\"></script>\n  </head>\n\n  <body>\n    <div id=\"app\" class=\"app\">\n      <product\n        class=\"app__product\"\n        :products=\"products\"\n        :selected-id.sync=\"selectedId\"\n        :current-product=\"currentProduct\"\n      ></product>\n    </div>\n    <script>\n      const product = Vue.component('product', {\n        template: `\n                                        <div>\n                                            <div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\">\n                                                  <div class=\"product__name\">I am {{item.name}}</div>\n                                                  <div class=\"product__name--selected\">selected: {{currentProduct.name}}</div>\n                                            </div>\n                                        </div>`,\n        props: ['products', 'selectedId', 'currentProduct']\n      })\n      const app = new Vue({\n        el: '#app',\n        components: {\n          product\n        },\n        data: {\n          products: [\n            {\n              id: 0,\n              name: '0'\n            },\n            {\n              id: 1,\n              name: '1'\n            },\n            {\n              id: 2,\n              name: '2'\n            }\n          ],\n          selectedId: 1\n        },\n        computed: {\n          currentProduct() {\n            return this.products.find(({ id }) => id === this.selectedId)\n          }\n        },\n        mounted() {\n          let selectIndex = this.products.findIndex(\n            obj => obj.id === this.selectedId\n          )\n          this.products[selectIndex].name = '1-1'\n        }\n      })\n    </script>\n  </body>\n</html>\n```\n\nAnd here is the result:\n\n![](../images/截图20181125140044.png)\n\nUntil now, nothing weird happens. However, if I changed the mounted hook to below:\n\n```js\nlet selectIndex = this.products.findIndex(obj => obj.id === this.selectedId)\nthis.products[selectIndex] = Object.assign({}, this.products[selectIndex], {\n  name: '1-1'\n})\n```\n\nAny difference with the ui ? Yes, it has. The result would be:\n\n![](../images/截图20181125140603.png)\n\nAs you might thought, `currentProduct` is not right. Is that a bug?\n\nNo! Let's look at the doc:\n\n> However, the difference is that computed properties **are cached based on their dependencies**. A computed property will **only re-evaluate when some of its dependencies have changed**.\n\nThat is how `computed` works.\n\nIn case above, `currentProduct` only has two dependencies which are `products` and `selectedId`. When we use code below:\n\n```js\nthis.products[selectIndex] = Object.assign({}, this.products[selectIndex], {\n  name: '1-1'\n})\n```\n\nWe didn't actually change `products` or `selectedId`. We just change the attributes of `products` not `products` itself. Neither did code below:\n\n```js\nthis.products[selectIndex].name = '1-1'\n```\n\nCode above works because we are changing the existing attributes of `currentProduct`. So, it works as expected.\n\n### Computed or Methods\n\nIf that bothers you, doc also gives you another choice:\n\n> Instead of a computed property, we can define the same function as a method instead. For the end result, the two approaches are indeed exactly the same.\n\nBut in this case, it needs to be a little complicated. The code would be:\n\n```js\nconst product = Vue.component('product', {\n  template: `\n      <div>\n          <div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\">\n                <div class=\"product__name\">I am {{item.name}}</div>\n                <div class=\"product__name--selected\">selected: {{getCurProduct().name}}</div>\n          </div>\n      </div>`,\n  props: ['products', 'selectedId'],\n  methods: {\n    getCurProduct() {\n      return this.products.find(({ id }) => id === this.selectedId)\n    }\n  }\n})\nconst app = new Vue({\n  el: '#app',\n  components: {\n    product\n  },\n  data: {\n    products: [\n      {\n        id: 0,\n        name: '0'\n      },\n      {\n        id: 1,\n        name: '1'\n      },\n      {\n        id: 2,\n        name: '2'\n      }\n    ],\n    selectedId: 1\n  },\n  mounted() {\n    let selectIndex = this.products.findIndex(obj => obj.id === this.selectedId)\n    this.products[selectIndex] = Object.assign({}, this.products[selectIndex], {\n      name: '1-1'\n    })\n    this.$children[0].$forceUpdate()\n  }\n})\n```\n\nThe point which needs to take care is\n\n```js\nthis.$children[0].$forceUpdate()\n```\n\nIn this case, simply change `currentProduct` to `getCurProduct()` doesn't work because we have to let `product` invoke `getCurProduct()` to get the latest data.\n\nAlso, you can use `getCurProduct` in the root:\n\n```html\n<div id=\"app\" class=\"app\">\n  <product\n    class=\"app__product\"\n    :products=\"products\"\n    :selected-id.sync=\"selectedId\"\n    :current-product=\"getCurProduct()\"\n  ></product>\n</div>\n```\n\n```js\nconst product = Vue.component('product', {\n  template: `\n      <div>\n          <div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\">\n                <div class=\"product__name\">I am {{item.name}}</div>\n                <div class=\"product__name--selected\">selected: {{currentProduct.name}}</div>\n          </div>\n      </div>`,\n  props: ['products', 'selectedId', 'currentProduct']\n})\nconst app = new Vue({\n  el: '#app',\n  components: {\n    product\n  },\n  data: {\n    products: [\n      {\n        id: 0,\n        name: '0'\n      },\n      {\n        id: 1,\n        name: '1'\n      },\n      {\n        id: 2,\n        name: '2'\n      }\n    ],\n    selectedId: 1\n  },\n  mounted() {\n    let selectIndex = this.products.findIndex(obj => obj.id === this.selectedId)\n    this.products[selectIndex] = Object.assign({}, this.products[selectIndex], {\n      name: '1-1'\n    })\n    // this.$children[0].$forceUpdate()\n    this.$forceUpdate()\n  },\n  methods: {\n    getCurProduct() {\n      return this.products.find(({ id }) => id === this.selectedId)\n    }\n  }\n})\n```\n\n### Insist on Computed for Cache Control ?\n\nSometimes `methods` isn't be a better choice because we really need the cache control like the doc said:\n\n> Why do we need caching? Imagine we have an expensive computed property **A**, which requires looping through a huge Array and doing a lot of computations. Then we may have other computed properties that in turn depend on **A**. Without caching, we would be executing **A’s** getter many more times than necessary!\n\nSo, somebody proposed a feature request for `$recompute` in [vuejs/vue#214](https://github.com/vuejs/vue/issues/214). Also, some guys figured out some solutions.\n\nTake a look at the code below:\n\n```html\n<div id=\"app\" class=\"app\">\n  <product\n    class=\"app__product\"\n    :products=\"products\"\n    :selected-id.sync=\"selectedId\"\n    :current-product=\"currentProduct\"\n  ></product>\n</div>\n```\n\n```js\nconst product = Vue.component('product', {\n  template: `\n      <div>\n          <div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\">\n                <div class=\"product__name\">I am {{item.name}}</div>\n                <div class=\"product__name--selected\">selected: {{currentProduct.name}}</div>\n          </div>\n      </div>`,\n  props: ['products', 'selectedId', 'currentProduct']\n})\nconst app = new Vue({\n  el: '#app',\n  components: {\n    product\n  },\n  data: {\n    products: [\n      {\n        id: 0,\n        name: '0'\n      },\n      {\n        id: 1,\n        name: '1'\n      },\n      {\n        id: 2,\n        name: '2'\n      }\n    ],\n    selectedId: 1,\n    currentProductSwitch: false\n  },\n  computed: {\n    currentProduct() {\n      // just let currentProductSwitch become a new dependency of currentProduct\n      this.currentProductSwitch\n      return this.products.find(({ id }) => id === this.selectedId)\n    }\n  },\n  mounted() {\n    let selectIndex = this.products.findIndex(obj => obj.id === this.selectedId)\n    this.products[selectIndex] = Object.assign({}, this.products[selectIndex], {\n      name: '1-1'\n    })\n    // update currentProductSwitch to recompute currentProduct\n    this.currentProductSwitch = !this.currentProductSwitch\n  }\n})\n```\n\nDo you understand the principle?\n\nI add `currentProductSwitch` in `currentProduct` getter to make `currentProductSwitch` become one dependency of `currentProduct`. So, we can make `currentProduct` recompute when we change the value of `currentProductSwitch`.\n\nNow, let's take a look at the solution [posva](https://github.com/posva) gives:\n\n```js\nconst product = Vue.component('product', {\n  template: `\n      <div>\n          <div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\">\n                <div class=\"product__name\">I am {{item.name}}</div>\n                <div class=\"product__name--selected\">selected: {{currentProduct.name}}</div>\n          </div>\n      </div>`,\n  props: ['products', 'selectedId', 'currentProduct']\n})\nconst recompute = Vue.mixin({\n  data() {\n    return {\n      __recomputed: Object.create(null)\n    }\n  },\n  created() {\n    const watchers = this._computedWatchers\n    if (!watchers) {\n      return\n    }\n    if (typeof this.$recompute === 'function') {\n      return\n    }\n    this.$recompute = key => {\n      const { __recomputed } = this.$data\n      this.$set(__recomputed, key, !__recomputed[key])\n    }\n    Reflect.ownKeys(watchers).forEach(key => {\n      const watcher = watchers[key]\n      watcher.getter = (function(getter) {\n        return vm => {\n          vm.$data.__recomputed[key]\n          return getter.call(vm, vm)\n        }\n      })(watcher.getter)\n    })\n  }\n})\nconst app = new Vue({\n  el: '#app',\n  components: {\n    product\n  },\n  mixins: [recompute],\n  data: {\n    products: [\n      {\n        id: 0,\n        name: '0'\n      },\n      {\n        id: 1,\n        name: '1'\n      },\n      {\n        id: 2,\n        name: '2'\n      }\n    ],\n    selectedId: 1\n  },\n  computed: {\n    currentProduct() {\n      return this.products.find(({ id }) => id === this.selectedId)\n    }\n  },\n  mounted() {\n    let selectIndex = this.products.findIndex(obj => obj.id === this.selectedId)\n    this.products[selectIndex] = Object.assign({}, this.products[selectIndex], {\n      name: '1-1'\n    })\n    this.$recompute('currentProduct')\n  }\n})\n```\n\nThe core code is:\n\n```js\n// ....\n//* each time called $recompute, reverse the new dependency to let getter recompute\nthis.$recompute = key => {\n  const { __recomputed } = this.$data\n  this.$set(__recomputed, key, !__recomputed[key])\n}\n//* let __recomputed[key] become a new dependency of key's getter\nReflect.ownKeys(watchers).forEach(key => {\n  const watcher = watchers[key]\n  watcher.getter = (function(getter) {\n    return vm => {\n      vm.$data.__recomputed[key]\n      return getter.call(vm, vm)\n    }\n  })(watcher.getter)\n})\n// ....\nthis.$recompute('currentProduct')\n```\n\nLast tip, the same thing also happens on `getters` in `vuex`.\n\n[**Original Post**](https://github.com/xianshenglu/blog/issues/35)\n","slug":"traps-of-computed-in-vue","published":1,"updated":"2018-12-07T14:06:48.198Z","layout":"post","photos":[],"link":"","_id":"cjv0yvj1f008wborpon3qumrw","content":"<p>If you have used <a href=\"https://vuejs.org/index.html\" target=\"_blank\" rel=\"noopener\">vue</a> I guess you probably know or have used <code>computed</code>. It seems pretty convenient and easy to use. However, it may bring you some problems if you didn't understand it totally.</p>\n<h3>Trap in Computed</h3>\n<p>Let's see the demo below:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      html,</span></span><br><span class=\"line\"><span class=\"undefined\">      body &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.app</span>,</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.app__product</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">        flex-flow: column;</span></span><br><span class=\"line\"><span class=\"undefined\">        justify-content: center;</span></span><br><span class=\"line\"><span class=\"undefined\">        align-items: center;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.app__product</span>,</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.product</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        justify-content: space-evenly;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.product</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 150px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 150px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">        text-align: center;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">outline</span>: <span class=\"selector-id\">#111</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">        flex-flow: column;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.product--active</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        outline: orange 5px solid;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">product</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">class</span>=<span class=\"string\">\"app__product\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:products</span>=<span class=\"string\">\"products\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:selected-id.sync</span>=<span class=\"string\">\"selectedId\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:current-product</span>=<span class=\"string\">\"currentProduct\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">product</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> product = Vue.component(<span class=\"string\">'product'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        template: `</span></span><br><span class=\"line\"><span class=\"xml\">                                        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">                                            &lt;div :<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item.id===selectedId?'product product--active':'product'\"</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(item,index) in products\"</span> @click=<span class=\"string\">\"$emit('update:selectedId',item.id)\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">                                                  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"product__name\"</span>&gt;I am &#123;&#123;item.name&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">                                                  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"product__name--selected\"</span>&gt;selected: &#123;&#123;currentProduct.name&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>`,</span></span><br><span class=\"line\"><span class=\"javascript\">        props: [<span class=\"string\">'products'</span>, <span class=\"string\">'selectedId'</span>, <span class=\"string\">'currentProduct'</span>]</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          product</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          products: [</span></span><br><span class=\"line\"><span class=\"undefined\">            &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">              id: 0,</span></span><br><span class=\"line\"><span class=\"javascript\">              name: <span class=\"string\">'0'</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">              id: 1,</span></span><br><span class=\"line\"><span class=\"javascript\">              name: <span class=\"string\">'1'</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">              id: 2,</span></span><br><span class=\"line\"><span class=\"javascript\">              name: <span class=\"string\">'2'</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">          ],</span></span><br><span class=\"line\"><span class=\"undefined\">          selectedId: 1</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          currentProduct() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.products.find(<span class=\"function\">(<span class=\"params\">&#123; id &#125;</span>) =&gt;</span> id === <span class=\"keyword\">this</span>.selectedId)</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        mounted() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">let</span> selectIndex = <span class=\"keyword\">this</span>.products.findIndex(</span></span><br><span class=\"line\"><span class=\"javascript\">            obj =&gt; obj.id === <span class=\"keyword\">this</span>.selectedId</span></span><br><span class=\"line\"><span class=\"undefined\">          )</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">this</span>.products[selectIndex].name = <span class=\"string\">'1-1'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>And here is the result:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181125140044.png\" alt=\"\"></p>\n<p>Until now, nothing weird happens. However, if I changed the mounted hook to below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> selectIndex = <span class=\"keyword\">this</span>.products.findIndex(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.products[selectIndex] = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.products[selectIndex], &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'1-1'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Any difference with the ui ? Yes, it has. The result would be:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181125140603.png\" alt=\"\"></p>\n<p>As you might thought, <code>currentProduct</code> is not right. Is that a bug?</p>\n<p>No! Let's look at the doc:</p>\n<blockquote>\n<p>However, the difference is that computed properties <strong>are cached based on their dependencies</strong>. A computed property will <strong>only re-evaluate when some of its dependencies have changed</strong>.</p>\n</blockquote>\n<p>That is how <code>computed</code> works.</p>\n<p>In case above, <code>currentProduct</code> only has two dependencies which are <code>products</code> and <code>selectedId</code>. When we use code below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.products[selectIndex] = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.products[selectIndex], &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'1-1'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>We didn't actually change <code>products</code> or <code>selectedId</code>. We just change the attributes of <code>products</code> not <code>products</code> itself. Neither did code below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.products[selectIndex].name = <span class=\"string\">'1-1'</span></span><br></pre></td></tr></table></figure></p>\n<p>Code above works because we are changing the existing attributes of <code>currentProduct</code>. So, it works as expected.</p>\n<h3>Computed or Methods</h3>\n<p>If that bothers you, doc also gives you another choice:</p>\n<blockquote>\n<p>Instead of a computed property, we can define the same function as a method instead. For the end result, the two approaches are indeed exactly the same.</p>\n</blockquote>\n<p>But in this case, it needs to be a little complicated. The code would be:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> product = Vue.component(<span class=\"string\">'product'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name\"&gt;I am &#123;&#123;item.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name--selected\"&gt;selected: &#123;&#123;getCurProduct().name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;`</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'products'</span>, <span class=\"string\">'selectedId'</span>],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getCurProduct() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.products.find(<span class=\"function\">(<span class=\"params\">&#123; id &#125;</span>) =&gt;</span> id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    product</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    products: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">0</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'0'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'1'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'2'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    selectedId: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selectIndex = <span class=\"keyword\">this</span>.products.findIndex(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.products[selectIndex] = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.products[selectIndex], &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'1-1'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$children[<span class=\"number\">0</span>].$forceUpdate()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>The point which needs to take care is</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$children[<span class=\"number\">0</span>].$forceUpdate()</span><br></pre></td></tr></table></figure></p>\n<p>In this case, simply change <code>currentProduct</code> to <code>getCurProduct()</code> doesn't work because we have to let <code>product</code> invoke <code>getCurProduct()</code> to get the latest data.</p>\n<p>Also, you can use <code>getCurProduct</code> in the root:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">product</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"app__product\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:products</span>=<span class=\"string\">\"products\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:selected-id.sync</span>=<span class=\"string\">\"selectedId\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:current-product</span>=<span class=\"string\">\"getCurProduct()\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">product</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> product = Vue.component(<span class=\"string\">'product'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name\"&gt;I am &#123;&#123;item.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name--selected\"&gt;selected: &#123;&#123;currentProduct.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;`</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'products'</span>, <span class=\"string\">'selectedId'</span>, <span class=\"string\">'currentProduct'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    product</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    products: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">0</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'0'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'1'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'2'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    selectedId: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selectIndex = <span class=\"keyword\">this</span>.products.findIndex(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.products[selectIndex] = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.products[selectIndex], &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'1-1'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// this.$children[0].$forceUpdate()</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$forceUpdate()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getCurProduct() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.products.find(<span class=\"function\">(<span class=\"params\">&#123; id &#125;</span>) =&gt;</span> id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3>Insist on Computed for Cache Control ?</h3>\n<p>Sometimes <code>methods</code> isn't be a better choice because we really need the cache control like the doc said:</p>\n<blockquote>\n<p>Why do we need caching? Imagine we have an expensive computed property <strong>A</strong>, which requires looping through a huge Array and doing a lot of computations. Then we may have other computed properties that in turn depend on <strong>A</strong>. Without caching, we would be executing <strong>A’s</strong> getter many more times than necessary!</p>\n</blockquote>\n<p>So, somebody proposed a feature request for <code>$recompute</code> in <a href=\"https://github.com/vuejs/vue/issues/214\">vuejs/vue#214</a>. Also, some guys figured out some solutions.</p>\n<p>Take a look at the code below:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">product</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"app__product\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:products</span>=<span class=\"string\">\"products\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:selected-id.sync</span>=<span class=\"string\">\"selectedId\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:current-product</span>=<span class=\"string\">\"currentProduct\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">product</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> product = Vue.component(<span class=\"string\">'product'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name\"&gt;I am &#123;&#123;item.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name--selected\"&gt;selected: &#123;&#123;currentProduct.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;`</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'products'</span>, <span class=\"string\">'selectedId'</span>, <span class=\"string\">'currentProduct'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    product</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    products: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">0</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'0'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'1'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'2'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    selectedId: <span class=\"number\">1</span>,</span><br><span class=\"line\">    currentProductSwitch: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    currentProduct() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// just let currentProductSwitch become a new dependency of currentProduct</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.currentProductSwitch</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.products.find(<span class=\"function\">(<span class=\"params\">&#123; id &#125;</span>) =&gt;</span> id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selectIndex = <span class=\"keyword\">this</span>.products.findIndex(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.products[selectIndex] = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.products[selectIndex], &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'1-1'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// update currentProductSwitch to recompute currentProduct</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.currentProductSwitch = !<span class=\"keyword\">this</span>.currentProductSwitch</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Do you understand the principle?</p>\n<p>I add <code>currentProductSwitch</code> in <code>currentProduct</code> getter to make <code>currentProductSwitch</code> become one dependency of <code>currentProduct</code>. So, we can make <code>currentProduct</code> recompute when we change the value of <code>currentProductSwitch</code>.</p>\n<p>Now, let's take a look at the solution <a href=\"https://github.com/posva\">posva</a> gives:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> product = Vue.component(<span class=\"string\">'product'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name\"&gt;I am &#123;&#123;item.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name--selected\"&gt;selected: &#123;&#123;currentProduct.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;`</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'products'</span>, <span class=\"string\">'selectedId'</span>, <span class=\"string\">'currentProduct'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> recompute = Vue.mixin(&#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      __recomputed: <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> watchers = <span class=\"keyword\">this</span>._computedWatchers</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!watchers) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.$recompute === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$recompute = <span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; __recomputed &#125; = <span class=\"keyword\">this</span>.$data</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$set(__recomputed, key, !__recomputed[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Reflect</span>.ownKeys(watchers).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> watcher = watchers[key]</span><br><span class=\"line\">      watcher.getter = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">getter</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> &#123;</span><br><span class=\"line\">          vm.$data.__recomputed[key]</span><br><span class=\"line\">          <span class=\"keyword\">return</span> getter.call(vm, vm)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)(watcher.getter)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    product</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mixins: [recompute],</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    products: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">0</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'0'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'1'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'2'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    selectedId: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    currentProduct() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.products.find(<span class=\"function\">(<span class=\"params\">&#123; id &#125;</span>) =&gt;</span> id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selectIndex = <span class=\"keyword\">this</span>.products.findIndex(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.products[selectIndex] = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.products[selectIndex], &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'1-1'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$recompute(<span class=\"string\">'currentProduct'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>The core code is:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ....</span></span><br><span class=\"line\"><span class=\"comment\">//* each time called $recompute, reverse the new dependency to let getter recompute</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$recompute = <span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; __recomputed &#125; = <span class=\"keyword\">this</span>.$data</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$set(__recomputed, key, !__recomputed[key])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//* let __recomputed[key] become a new dependency of key's getter</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.ownKeys(watchers).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> watcher = watchers[key]</span><br><span class=\"line\">  watcher.getter = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">getter</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> &#123;</span><br><span class=\"line\">      vm.$data.__recomputed[key]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> getter.call(vm, vm)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)(watcher.getter)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// ....</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$recompute(<span class=\"string\">'currentProduct'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Last tip, the same thing also happens on <code>getters</code> in <code>vuex</code>.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/35\"><strong>Original Post</strong></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>If you have used <a href=\"https://vuejs.org/index.html\" target=\"_blank\" rel=\"noopener\">vue</a> I guess you probably know or have used <code>computed</code>. It seems pretty convenient and easy to use. However, it may bring you some problems if you didn't understand it totally.</p>\n<h3>Trap in Computed</h3>\n<p>Let's see the demo below:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      html,</span></span><br><span class=\"line\"><span class=\"undefined\">      body &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.app</span>,</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.app__product</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">        flex-flow: column;</span></span><br><span class=\"line\"><span class=\"undefined\">        justify-content: center;</span></span><br><span class=\"line\"><span class=\"undefined\">        align-items: center;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.app__product</span>,</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.product</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        justify-content: space-evenly;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.product</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 150px;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 150px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">        text-align: center;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">outline</span>: <span class=\"selector-id\">#111</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">        flex-flow: column;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.product--active</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        outline: orange 5px solid;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">product</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">class</span>=<span class=\"string\">\"app__product\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:products</span>=<span class=\"string\">\"products\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:selected-id.sync</span>=<span class=\"string\">\"selectedId\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:current-product</span>=<span class=\"string\">\"currentProduct\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">product</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> product = Vue.component(<span class=\"string\">'product'</span>, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        template: `</span></span><br><span class=\"line\"><span class=\"xml\">                                        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">                                            &lt;div :<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item.id===selectedId?'product product--active':'product'\"</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(item,index) in products\"</span> @click=<span class=\"string\">\"$emit('update:selectedId',item.id)\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">                                                  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"product__name\"</span>&gt;I am &#123;&#123;item.name&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">                                                  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"product__name--selected\"</span>&gt;selected: &#123;&#123;currentProduct.name&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>`,</span></span><br><span class=\"line\"><span class=\"javascript\">        props: [<span class=\"string\">'products'</span>, <span class=\"string\">'selectedId'</span>, <span class=\"string\">'currentProduct'</span>]</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          product</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          products: [</span></span><br><span class=\"line\"><span class=\"undefined\">            &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">              id: 0,</span></span><br><span class=\"line\"><span class=\"javascript\">              name: <span class=\"string\">'0'</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">              id: 1,</span></span><br><span class=\"line\"><span class=\"javascript\">              name: <span class=\"string\">'1'</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">            &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">              id: 2,</span></span><br><span class=\"line\"><span class=\"javascript\">              name: <span class=\"string\">'2'</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">          ],</span></span><br><span class=\"line\"><span class=\"undefined\">          selectedId: 1</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        computed: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          currentProduct() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.products.find(<span class=\"function\">(<span class=\"params\">&#123; id &#125;</span>) =&gt;</span> id === <span class=\"keyword\">this</span>.selectedId)</span></span><br><span class=\"line\"><span class=\"undefined\">          &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        mounted() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">let</span> selectIndex = <span class=\"keyword\">this</span>.products.findIndex(</span></span><br><span class=\"line\"><span class=\"javascript\">            obj =&gt; obj.id === <span class=\"keyword\">this</span>.selectedId</span></span><br><span class=\"line\"><span class=\"undefined\">          )</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">this</span>.products[selectIndex].name = <span class=\"string\">'1-1'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>And here is the result:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181125140044.png\" alt=\"\"></p>\n<p>Until now, nothing weird happens. However, if I changed the mounted hook to below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> selectIndex = <span class=\"keyword\">this</span>.products.findIndex(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.products[selectIndex] = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.products[selectIndex], &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'1-1'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Any difference with the ui ? Yes, it has. The result would be:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181125140603.png\" alt=\"\"></p>\n<p>As you might thought, <code>currentProduct</code> is not right. Is that a bug?</p>\n<p>No! Let's look at the doc:</p>\n<blockquote>\n<p>However, the difference is that computed properties <strong>are cached based on their dependencies</strong>. A computed property will <strong>only re-evaluate when some of its dependencies have changed</strong>.</p>\n</blockquote>\n<p>That is how <code>computed</code> works.</p>\n<p>In case above, <code>currentProduct</code> only has two dependencies which are <code>products</code> and <code>selectedId</code>. When we use code below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.products[selectIndex] = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.products[selectIndex], &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'1-1'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>We didn't actually change <code>products</code> or <code>selectedId</code>. We just change the attributes of <code>products</code> not <code>products</code> itself. Neither did code below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.products[selectIndex].name = <span class=\"string\">'1-1'</span></span><br></pre></td></tr></table></figure></p>\n<p>Code above works because we are changing the existing attributes of <code>currentProduct</code>. So, it works as expected.</p>\n<h3>Computed or Methods</h3>\n<p>If that bothers you, doc also gives you another choice:</p>\n<blockquote>\n<p>Instead of a computed property, we can define the same function as a method instead. For the end result, the two approaches are indeed exactly the same.</p>\n</blockquote>\n<p>But in this case, it needs to be a little complicated. The code would be:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> product = Vue.component(<span class=\"string\">'product'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name\"&gt;I am &#123;&#123;item.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name--selected\"&gt;selected: &#123;&#123;getCurProduct().name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;`</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'products'</span>, <span class=\"string\">'selectedId'</span>],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getCurProduct() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.products.find(<span class=\"function\">(<span class=\"params\">&#123; id &#125;</span>) =&gt;</span> id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    product</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    products: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">0</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'0'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'1'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'2'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    selectedId: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selectIndex = <span class=\"keyword\">this</span>.products.findIndex(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.products[selectIndex] = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.products[selectIndex], &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'1-1'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$children[<span class=\"number\">0</span>].$forceUpdate()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>The point which needs to take care is</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$children[<span class=\"number\">0</span>].$forceUpdate()</span><br></pre></td></tr></table></figure></p>\n<p>In this case, simply change <code>currentProduct</code> to <code>getCurProduct()</code> doesn't work because we have to let <code>product</code> invoke <code>getCurProduct()</code> to get the latest data.</p>\n<p>Also, you can use <code>getCurProduct</code> in the root:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">product</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"app__product\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:products</span>=<span class=\"string\">\"products\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:selected-id.sync</span>=<span class=\"string\">\"selectedId\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:current-product</span>=<span class=\"string\">\"getCurProduct()\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">product</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> product = Vue.component(<span class=\"string\">'product'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name\"&gt;I am &#123;&#123;item.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name--selected\"&gt;selected: &#123;&#123;currentProduct.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;`</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'products'</span>, <span class=\"string\">'selectedId'</span>, <span class=\"string\">'currentProduct'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    product</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    products: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">0</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'0'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'1'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'2'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    selectedId: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selectIndex = <span class=\"keyword\">this</span>.products.findIndex(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.products[selectIndex] = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.products[selectIndex], &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'1-1'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// this.$children[0].$forceUpdate()</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$forceUpdate()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getCurProduct() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.products.find(<span class=\"function\">(<span class=\"params\">&#123; id &#125;</span>) =&gt;</span> id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3>Insist on Computed for Cache Control ?</h3>\n<p>Sometimes <code>methods</code> isn't be a better choice because we really need the cache control like the doc said:</p>\n<blockquote>\n<p>Why do we need caching? Imagine we have an expensive computed property <strong>A</strong>, which requires looping through a huge Array and doing a lot of computations. Then we may have other computed properties that in turn depend on <strong>A</strong>. Without caching, we would be executing <strong>A’s</strong> getter many more times than necessary!</p>\n</blockquote>\n<p>So, somebody proposed a feature request for <code>$recompute</code> in <a href=\"https://github.com/vuejs/vue/issues/214\">vuejs/vue#214</a>. Also, some guys figured out some solutions.</p>\n<p>Take a look at the code below:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">product</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"app__product\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:products</span>=<span class=\"string\">\"products\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:selected-id.sync</span>=<span class=\"string\">\"selectedId\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:current-product</span>=<span class=\"string\">\"currentProduct\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">product</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> product = Vue.component(<span class=\"string\">'product'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name\"&gt;I am &#123;&#123;item.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name--selected\"&gt;selected: &#123;&#123;currentProduct.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;`</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'products'</span>, <span class=\"string\">'selectedId'</span>, <span class=\"string\">'currentProduct'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    product</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    products: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">0</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'0'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'1'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'2'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    selectedId: <span class=\"number\">1</span>,</span><br><span class=\"line\">    currentProductSwitch: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    currentProduct() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// just let currentProductSwitch become a new dependency of currentProduct</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.currentProductSwitch</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.products.find(<span class=\"function\">(<span class=\"params\">&#123; id &#125;</span>) =&gt;</span> id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selectIndex = <span class=\"keyword\">this</span>.products.findIndex(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.products[selectIndex] = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.products[selectIndex], &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'1-1'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// update currentProductSwitch to recompute currentProduct</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.currentProductSwitch = !<span class=\"keyword\">this</span>.currentProductSwitch</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Do you understand the principle?</p>\n<p>I add <code>currentProductSwitch</code> in <code>currentProduct</code> getter to make <code>currentProductSwitch</code> become one dependency of <code>currentProduct</code>. So, we can make <code>currentProduct</code> recompute when we change the value of <code>currentProductSwitch</code>.</p>\n<p>Now, let's take a look at the solution <a href=\"https://github.com/posva\">posva</a> gives:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> product = Vue.component(<span class=\"string\">'product'</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;div :class=\"item.id===selectedId?'product product--active':'product'\" v-for=\"(item,index) in products\" @click=\"$emit('update:selectedId',item.id)\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name\"&gt;I am &#123;&#123;item.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div class=\"product__name--selected\"&gt;selected: &#123;&#123;currentProduct.name&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;`</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">'products'</span>, <span class=\"string\">'selectedId'</span>, <span class=\"string\">'currentProduct'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> recompute = Vue.mixin(&#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      __recomputed: <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> watchers = <span class=\"keyword\">this</span>._computedWatchers</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!watchers) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.$recompute === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$recompute = <span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; __recomputed &#125; = <span class=\"keyword\">this</span>.$data</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$set(__recomputed, key, !__recomputed[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Reflect</span>.ownKeys(watchers).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> watcher = watchers[key]</span><br><span class=\"line\">      watcher.getter = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">getter</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> &#123;</span><br><span class=\"line\">          vm.$data.__recomputed[key]</span><br><span class=\"line\">          <span class=\"keyword\">return</span> getter.call(vm, vm)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)(watcher.getter)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    product</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mixins: [recompute],</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    products: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">0</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'0'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'1'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'2'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    selectedId: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    currentProduct() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.products.find(<span class=\"function\">(<span class=\"params\">&#123; id &#125;</span>) =&gt;</span> id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selectIndex = <span class=\"keyword\">this</span>.products.findIndex(<span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> obj.id === <span class=\"keyword\">this</span>.selectedId)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.products[selectIndex] = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.products[selectIndex], &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'1-1'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$recompute(<span class=\"string\">'currentProduct'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>The core code is:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ....</span></span><br><span class=\"line\"><span class=\"comment\">//* each time called $recompute, reverse the new dependency to let getter recompute</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$recompute = <span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; __recomputed &#125; = <span class=\"keyword\">this</span>.$data</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$set(__recomputed, key, !__recomputed[key])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//* let __recomputed[key] become a new dependency of key's getter</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.ownKeys(watchers).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> watcher = watchers[key]</span><br><span class=\"line\">  watcher.getter = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">getter</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> &#123;</span><br><span class=\"line\">      vm.$data.__recomputed[key]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> getter.call(vm, vm)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)(watcher.getter)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// ....</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$recompute(<span class=\"string\">'currentProduct'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Last tip, the same thing also happens on <code>getters</code> in <code>vuex</code>.</p>\n<p><a href=\"https://github.com/xianshenglu/blog/issues/35\"><strong>Original Post</strong></a></p>\n"},{"title":"Usage of ESLint","comments":1,"date":"2018-10-06T05:30:36.000Z","_content":"\n## Preface\n\nI won't start with questions like what or why. I will start with how and why. Let's begin.\n\n## Main\n\n### install eslint\n\nInstall global eslint package:\n\n```bash\nnpm i eslint@latest -g\n```\n\nThen setup a config file. For example:\n\n```bash\ncd /\ncd d/nodemodules\neslint --init\n```\n\nThen it will give you some choices.\n\n![截图20181006154426.png](../images/截图20181006154426.png)\n\n**tips:**\n\n1. _You may need to `npm init` first but you can remove it later._\n2. _If you can't use arrow key, you may try use cmd.exe instead_.\n\nAfter that you will get a config file with some settings.\n\nAccording to tips on terminal, you will need to load some packages like me because of your previous choices. So, I need to:\n\n```bash\nnpm i eslint-plugin-react@latest -g\n```\n\nActually you can remove the _package.json_ ( if you have ) now because we are making global eslint settings, not for a project.\n\nAs far, I have a global eslint config file (_d:\\\\nodemodules\\\\.eslintrc.json_). And my test file is _test4.js_. Here is the origin code:\n\n```js\nlet name = {\n  name: 'test4.js'\n}\nlet obj = {}\nfunction fn(params) {}\n```\n\nSo, how can I lint _test4.js_ by _d:\\\\nodemodules\\\\.eslintrc.json_?\n\n### run eslint on terminal\n\nLet's switch to the folder of _test4.js_. Then for me, I run code below:\n\n```bash\neslint --config d:\\nodeModules\\.eslintrc.json test4.js\n```\n\nResult:\n\n![截图20181006161411.png](../images/截图20181006161411.png)\n\nHere it is. Well, of course we want to fix it when run lint. So, according to [ESLint doc][eslint doc] we can try code below:\n\n```bash\neslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js\n```\n\nResult:\n\n![截图20181006163246.png](../images/截图20181006163246.png)\n\n![截图20181006163413.png](../images/截图20181006163413.png)\n\nESLint will fix some problems, mainly spaces. In the case above, **no-unused-vars** problems will not be fixed.\n\n### set custom rules\n\nFuthermore, the expected indent is 4 spaces. But I want 2 spaces to be the default indent. So, we always set our own rules based on ESLint. In my case, I altered the _d:\\\\nodemodules\\\\.eslintrc.json_ like:\n\n```js\n{\n   //other settings\n    \"rules\": {\n        \"indent\": [\n            \"error\",\n            2\n            //change to 2 not 4\n        ],\n      //other rules\n    }\n}\n```\n\nThen, run the code above again:\n\n```bash\neslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js\n```\n\nIt works immediately. If you want to change other rules, you may have to know more about the existing rules in [Eslint rules][eslint rules].\n\nFor me, For me, I usually set own rules based on **standard** not **recommended rules** and my custom rules is like:\n\n```js\n{\n  //other settings\n  \"extends\": \"standard\",\n  //other settings\n  \"rules\": {\n    \"indent\": [\"error\", 2],\n    \"linebreak-style\": [\"off\", \"unix\"],\n    \"quotes\": [\"error\", \"single\"],\n    \"semi\": [\"error\", \"never\"],\n    \"no-multiple-empty-lines\": [\n      \"error\",\n      {\n        \"max\": 1,\n        \"maxEOF\": 0\n      }\n    ]\n  }\n}\n```\n\nIn this case, we run again:\n\n```bash\neslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js\n```\n\nActually, I got error:\n\n![截图20181006165344.png](../images/截图20181006165344.png)\n\nSo, I have to run\n\n```bash\nnpm i eslint-config-standard@latest -g\n```\n\nIt turns out I got more warnings.\n\n![截图20181006165741.png](../images/截图20181006165741.png)\n\nSo, I keep installing:\n\n```bash\nnpm i eslint-plugin-import@latest eslint-plugin-node@latest eslint-plugin-promise@latest eslint-plugin-standard@latest -g\n```\n\nAfter that, there is no **correct** warnings. So, I run\n\n```bash\neslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js\n```\n\nI got a little difference because of different rules:\n\n![截图20181006165945.png](../images/截图20181006165945.png)\n\n### script in .html\n\nIf you use code above to format js in .html, it will fail. For example:\n\n```html\n<!-- test4.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <style>\n        html,\n        body {\n            width: 100%;\n            height: 100%;\n        }\n    </style>\n</head>\n\n<body>\n    <canvas id=\"canvas\"></canvas>\n    <div>\n        <div>\n            <div></div>\n        </div>\n    </div>\n    <script>\n        let name = {\n            name: 'test4.js'\n        }\n        let obj = {}\n        function fn(params) {\n\n        }\n    </script>\n</body>\n\n</html>\n```\n\n```bash\neslint --fix --config d:\\nodeModules\\.eslintrc.json test4.html\n```\n\nResult:\n\n![截图20181006172654.png](../images/截图20181006172654.png)\n\nSee? Actually, we need plugins for non .js files. After search, I have to run code:\n\n```bash\nnpm i eslint-plugin-html@latest -g\n```\n\nAlso, we need to update _d:\\\\nodeModules\\\\.eslintrc.json_ and it would be:\n\n```js\n{\n  \"env\": {\n    \"browser\": true,\n    \"commonjs\": true,\n    \"es6\": true,\n    \"node\": true\n  },\n  \"extends\": \"standard\",\n  \"parserOptions\": {\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    },\n    \"ecmaVersion\": 2018,\n    \"sourceType\": \"module\"\n  },\n  \"plugins\": [\"html\"],//add this plugin\n  \"rules\": {\n    \"indent\": [\"error\", 2],\n    \"linebreak-style\": [\"off\", \"unix\"],\n    \"quotes\": [\"error\", \"single\"],\n    \"semi\": [\"error\", \"never\"],\n    \"no-multiple-empty-lines\": [\n      \"error\",\n      {\n        \"max\": 1,\n        \"maxEOF\": 0\n      }\n    ]\n  }\n}\n```\n\nAfter that, you run the code and ESLint would work for .html files.\n\n### move --fix to editor\n\nAs far, it seems there is only one flaw left. Do we have to run the code every time we want to format?\n\nActually, we don't have to. For me, using vscode, ESLint provides plugins to do these jobs. For other editor users, you may want to check the ESLint doc.\n\nHere is the operations for vscode.\n\nInstall ESLint plugin. Then add some settings in your _User Settings._\n\n```js\n{\n  \"eslint.options\": {\n    //replace with your filename and path\n    \"configFile\": \"D:/nodeModules/eslint/.eslintrc.json\"\n  },\n  \"eslint.alwaysShowStatus\": true,\n  \"eslint.autoFixOnSave\": true,\n  \"eslint.run\": \"onSave\",\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    {\n      \"language\": \"html\",\n      \"autoFix\": true\n    },\n    {\n      \"language\": \"vue\",\n      \"autoFix\": true\n    }\n  ]\n}\n```\n\nAfter restarting your editor, you will see\n\n![截图20181006173812.png](../images/截图20181006173812.png)\n\nAnd\n\n![截图20181006173913.png](../images/截图20181006173913.png)\n\nIf your default settings of `formatOnSave:true`, then ESLint would format your code onSave.\n\n### make global and local config file independent\n\nUntil now, everything seems perfect with ESLint. But there is one thing I need to mention. Suppose that you create a new vue project using vue-cli.\n\n```bash\nvue create my-proj\ncd my-proj\n```\n\nYou may find that ESLinter error like below:\n\n![截图20181006180631.png](../images/截图20181006180631.png)\n\nYou can see this because we set the `eslint.options` in the `User Settings`. `eslint.options` setting is like passing it on the command line in a terminal using the `--config`. If you do this ESLint respects this and will not use the one in the project folder.\n\nHowever, if we delete the `eslint.options` it won't be able to format other files. So, the compromise solution is :\n\n1. delete the `eslint.options`\n2. move the global config file to the top.\n\nFor example:\n\n```\nhome\n  .eslintrc\n  projects\n    projectOne\n      .eslintrc\n    projectTwo\n```\n\nIf we move the _d:\\\\nodeModules\\\\.eslintrc.json_ to home, then delete the `eslint.options`. The result would be:\n\n- code in project one will be validated using the local .eslintrc file\n- code in project two will be validated using the .eslintrc file in your home directory\n\nGot it? I learn this from [Override global eslintrc if one is found in current project][override global eslintrc if one is found in current project].\n\nAt last, eslint in `User Settings` is:\n\n```js\n{\n   \"eslint.options\": {\n    // \"configFile\": \"D:/nodeModules/eslint/.eslintrc.json\",\n  },\n  \"eslint.alwaysShowStatus\": true,\n  \"eslint.autoFixOnSave\": true,\n  \"eslint.run\": \"onSave\",\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    {\n      \"language\": \"html\",\n      \"autoFix\": true\n    },\n    {\n      \"language\": \"vue\",\n      \"autoFix\": true\n    }\n  ]\n}\n```\n\nAnd in the folder of all projects, I have global eslint config file:\n\n![截图20181006210753.png](../images/截图20181006210753.png)\n\n## Ending\n\n## Reference\n\n- [Override global eslintrc if one is found in current project][override global eslintrc if one is found in current project]\n\n[override global eslintrc if one is found in current project]: https://github.com/Microsoft/vscode-eslint/issues/527\n[eslint doc]: https://eslint.org/docs/user-guide/command-line-interface\n[eslint rules]: https://eslint.org/docs/rules/\n","source":"_posts/usage-of-eslint.md","raw":"---\ntitle: Usage of ESLint\ncategories: js\ntags:\n  - ESLint\ncomments: true\ndate: 2018-10-06 13:30:36\n---\n\n## Preface\n\nI won't start with questions like what or why. I will start with how and why. Let's begin.\n\n## Main\n\n### install eslint\n\nInstall global eslint package:\n\n```bash\nnpm i eslint@latest -g\n```\n\nThen setup a config file. For example:\n\n```bash\ncd /\ncd d/nodemodules\neslint --init\n```\n\nThen it will give you some choices.\n\n![截图20181006154426.png](../images/截图20181006154426.png)\n\n**tips:**\n\n1. _You may need to `npm init` first but you can remove it later._\n2. _If you can't use arrow key, you may try use cmd.exe instead_.\n\nAfter that you will get a config file with some settings.\n\nAccording to tips on terminal, you will need to load some packages like me because of your previous choices. So, I need to:\n\n```bash\nnpm i eslint-plugin-react@latest -g\n```\n\nActually you can remove the _package.json_ ( if you have ) now because we are making global eslint settings, not for a project.\n\nAs far, I have a global eslint config file (_d:\\\\nodemodules\\\\.eslintrc.json_). And my test file is _test4.js_. Here is the origin code:\n\n```js\nlet name = {\n  name: 'test4.js'\n}\nlet obj = {}\nfunction fn(params) {}\n```\n\nSo, how can I lint _test4.js_ by _d:\\\\nodemodules\\\\.eslintrc.json_?\n\n### run eslint on terminal\n\nLet's switch to the folder of _test4.js_. Then for me, I run code below:\n\n```bash\neslint --config d:\\nodeModules\\.eslintrc.json test4.js\n```\n\nResult:\n\n![截图20181006161411.png](../images/截图20181006161411.png)\n\nHere it is. Well, of course we want to fix it when run lint. So, according to [ESLint doc][eslint doc] we can try code below:\n\n```bash\neslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js\n```\n\nResult:\n\n![截图20181006163246.png](../images/截图20181006163246.png)\n\n![截图20181006163413.png](../images/截图20181006163413.png)\n\nESLint will fix some problems, mainly spaces. In the case above, **no-unused-vars** problems will not be fixed.\n\n### set custom rules\n\nFuthermore, the expected indent is 4 spaces. But I want 2 spaces to be the default indent. So, we always set our own rules based on ESLint. In my case, I altered the _d:\\\\nodemodules\\\\.eslintrc.json_ like:\n\n```js\n{\n   //other settings\n    \"rules\": {\n        \"indent\": [\n            \"error\",\n            2\n            //change to 2 not 4\n        ],\n      //other rules\n    }\n}\n```\n\nThen, run the code above again:\n\n```bash\neslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js\n```\n\nIt works immediately. If you want to change other rules, you may have to know more about the existing rules in [Eslint rules][eslint rules].\n\nFor me, For me, I usually set own rules based on **standard** not **recommended rules** and my custom rules is like:\n\n```js\n{\n  //other settings\n  \"extends\": \"standard\",\n  //other settings\n  \"rules\": {\n    \"indent\": [\"error\", 2],\n    \"linebreak-style\": [\"off\", \"unix\"],\n    \"quotes\": [\"error\", \"single\"],\n    \"semi\": [\"error\", \"never\"],\n    \"no-multiple-empty-lines\": [\n      \"error\",\n      {\n        \"max\": 1,\n        \"maxEOF\": 0\n      }\n    ]\n  }\n}\n```\n\nIn this case, we run again:\n\n```bash\neslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js\n```\n\nActually, I got error:\n\n![截图20181006165344.png](../images/截图20181006165344.png)\n\nSo, I have to run\n\n```bash\nnpm i eslint-config-standard@latest -g\n```\n\nIt turns out I got more warnings.\n\n![截图20181006165741.png](../images/截图20181006165741.png)\n\nSo, I keep installing:\n\n```bash\nnpm i eslint-plugin-import@latest eslint-plugin-node@latest eslint-plugin-promise@latest eslint-plugin-standard@latest -g\n```\n\nAfter that, there is no **correct** warnings. So, I run\n\n```bash\neslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js\n```\n\nI got a little difference because of different rules:\n\n![截图20181006165945.png](../images/截图20181006165945.png)\n\n### script in .html\n\nIf you use code above to format js in .html, it will fail. For example:\n\n```html\n<!-- test4.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <style>\n        html,\n        body {\n            width: 100%;\n            height: 100%;\n        }\n    </style>\n</head>\n\n<body>\n    <canvas id=\"canvas\"></canvas>\n    <div>\n        <div>\n            <div></div>\n        </div>\n    </div>\n    <script>\n        let name = {\n            name: 'test4.js'\n        }\n        let obj = {}\n        function fn(params) {\n\n        }\n    </script>\n</body>\n\n</html>\n```\n\n```bash\neslint --fix --config d:\\nodeModules\\.eslintrc.json test4.html\n```\n\nResult:\n\n![截图20181006172654.png](../images/截图20181006172654.png)\n\nSee? Actually, we need plugins for non .js files. After search, I have to run code:\n\n```bash\nnpm i eslint-plugin-html@latest -g\n```\n\nAlso, we need to update _d:\\\\nodeModules\\\\.eslintrc.json_ and it would be:\n\n```js\n{\n  \"env\": {\n    \"browser\": true,\n    \"commonjs\": true,\n    \"es6\": true,\n    \"node\": true\n  },\n  \"extends\": \"standard\",\n  \"parserOptions\": {\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    },\n    \"ecmaVersion\": 2018,\n    \"sourceType\": \"module\"\n  },\n  \"plugins\": [\"html\"],//add this plugin\n  \"rules\": {\n    \"indent\": [\"error\", 2],\n    \"linebreak-style\": [\"off\", \"unix\"],\n    \"quotes\": [\"error\", \"single\"],\n    \"semi\": [\"error\", \"never\"],\n    \"no-multiple-empty-lines\": [\n      \"error\",\n      {\n        \"max\": 1,\n        \"maxEOF\": 0\n      }\n    ]\n  }\n}\n```\n\nAfter that, you run the code and ESLint would work for .html files.\n\n### move --fix to editor\n\nAs far, it seems there is only one flaw left. Do we have to run the code every time we want to format?\n\nActually, we don't have to. For me, using vscode, ESLint provides plugins to do these jobs. For other editor users, you may want to check the ESLint doc.\n\nHere is the operations for vscode.\n\nInstall ESLint plugin. Then add some settings in your _User Settings._\n\n```js\n{\n  \"eslint.options\": {\n    //replace with your filename and path\n    \"configFile\": \"D:/nodeModules/eslint/.eslintrc.json\"\n  },\n  \"eslint.alwaysShowStatus\": true,\n  \"eslint.autoFixOnSave\": true,\n  \"eslint.run\": \"onSave\",\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    {\n      \"language\": \"html\",\n      \"autoFix\": true\n    },\n    {\n      \"language\": \"vue\",\n      \"autoFix\": true\n    }\n  ]\n}\n```\n\nAfter restarting your editor, you will see\n\n![截图20181006173812.png](../images/截图20181006173812.png)\n\nAnd\n\n![截图20181006173913.png](../images/截图20181006173913.png)\n\nIf your default settings of `formatOnSave:true`, then ESLint would format your code onSave.\n\n### make global and local config file independent\n\nUntil now, everything seems perfect with ESLint. But there is one thing I need to mention. Suppose that you create a new vue project using vue-cli.\n\n```bash\nvue create my-proj\ncd my-proj\n```\n\nYou may find that ESLinter error like below:\n\n![截图20181006180631.png](../images/截图20181006180631.png)\n\nYou can see this because we set the `eslint.options` in the `User Settings`. `eslint.options` setting is like passing it on the command line in a terminal using the `--config`. If you do this ESLint respects this and will not use the one in the project folder.\n\nHowever, if we delete the `eslint.options` it won't be able to format other files. So, the compromise solution is :\n\n1. delete the `eslint.options`\n2. move the global config file to the top.\n\nFor example:\n\n```\nhome\n  .eslintrc\n  projects\n    projectOne\n      .eslintrc\n    projectTwo\n```\n\nIf we move the _d:\\\\nodeModules\\\\.eslintrc.json_ to home, then delete the `eslint.options`. The result would be:\n\n- code in project one will be validated using the local .eslintrc file\n- code in project two will be validated using the .eslintrc file in your home directory\n\nGot it? I learn this from [Override global eslintrc if one is found in current project][override global eslintrc if one is found in current project].\n\nAt last, eslint in `User Settings` is:\n\n```js\n{\n   \"eslint.options\": {\n    // \"configFile\": \"D:/nodeModules/eslint/.eslintrc.json\",\n  },\n  \"eslint.alwaysShowStatus\": true,\n  \"eslint.autoFixOnSave\": true,\n  \"eslint.run\": \"onSave\",\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    {\n      \"language\": \"html\",\n      \"autoFix\": true\n    },\n    {\n      \"language\": \"vue\",\n      \"autoFix\": true\n    }\n  ]\n}\n```\n\nAnd in the folder of all projects, I have global eslint config file:\n\n![截图20181006210753.png](../images/截图20181006210753.png)\n\n## Ending\n\n## Reference\n\n- [Override global eslintrc if one is found in current project][override global eslintrc if one is found in current project]\n\n[override global eslintrc if one is found in current project]: https://github.com/Microsoft/vscode-eslint/issues/527\n[eslint doc]: https://eslint.org/docs/user-guide/command-line-interface\n[eslint rules]: https://eslint.org/docs/rules/\n","slug":"usage-of-eslint","published":1,"updated":"2018-10-06T13:25:46.656Z","layout":"post","photos":[],"link":"","_id":"cjv0yvj1j008xborpsi8njlnw","content":"<h2>Preface</h2>\n<p>I won't start with questions like what or why. I will start with how and why. Let's begin.</p>\n<h2>Main</h2>\n<h3>install eslint</h3>\n<p>Install global eslint package:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i eslint@latest -g</span><br></pre></td></tr></table></figure></p>\n<p>Then setup a config file. For example:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /</span><br><span class=\"line\"><span class=\"built_in\">cd</span> d/nodemodules</span><br><span class=\"line\">eslint --init</span><br></pre></td></tr></table></figure></p>\n<p>Then it will give you some choices.</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006154426.png\" alt=\"截图20181006154426.png\"></p>\n<p><strong>tips:</strong></p>\n<ol>\n<li><em>You may need to <code>npm init</code> first but you can remove it later.</em></li>\n<li><em>If you can't use arrow key, you may try use cmd.exe instead</em>.</li>\n</ol>\n<p>After that you will get a config file with some settings.</p>\n<p>According to tips on terminal, you will need to load some packages like me because of your previous choices. So, I need to:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i eslint-plugin-react@latest -g</span><br></pre></td></tr></table></figure></p>\n<p>Actually you can remove the <em>package.json</em> ( if you have ) now because we are making global eslint settings, not for a project.</p>\n<p>As far, I have a global eslint config file (<em>d:\\nodemodules\\.eslintrc.json</em>). And my test file is <em>test4.js</em>. Here is the origin code:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'test4.js'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">params</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>So, how can I lint <em>test4.js</em> by <em>d:\\nodemodules\\.eslintrc.json</em>?</p>\n<h3>run eslint on terminal</h3>\n<p>Let's switch to the folder of <em>test4.js</em>. Then for me, I run code below:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eslint --config d:\\nodeModules\\.eslintrc.json test4.js</span><br></pre></td></tr></table></figure></p>\n<p>Result:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006161411.png\" alt=\"截图20181006161411.png\"></p>\n<p>Here it is. Well, of course we want to fix it when run lint. So, according to <a href=\"https://eslint.org/docs/user-guide/command-line-interface\" target=\"_blank\" rel=\"noopener\">ESLint doc</a> we can try code below:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js</span><br></pre></td></tr></table></figure></p>\n<p>Result:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006163246.png\" alt=\"截图20181006163246.png\"></p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006163413.png\" alt=\"截图20181006163413.png\"></p>\n<p>ESLint will fix some problems, mainly spaces. In the case above, <strong>no-unused-vars</strong> problems will not be fixed.</p>\n<h3>set custom rules</h3>\n<p>Futhermore, the expected indent is 4 spaces. But I want 2 spaces to be the default indent. So, we always set our own rules based on ESLint. In my case, I altered the <em>d:\\nodemodules\\.eslintrc.json</em> like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">//other settings</span></span><br><span class=\"line\">    <span class=\"string\">\"rules\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"indent\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">            <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"comment\">//change to 2 not 4</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      <span class=\"comment\">//other rules</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Then, run the code above again:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js</span><br></pre></td></tr></table></figure></p>\n<p>It works immediately. If you want to change other rules, you may have to know more about the existing rules in <a href=\"https://eslint.org/docs/rules/\" target=\"_blank\" rel=\"noopener\">Eslint rules</a>.</p>\n<p>For me, For me, I usually set own rules based on <strong>standard</strong> not <strong>recommended rules</strong> and my custom rules is like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//other settings</span></span><br><span class=\"line\">  <span class=\"string\">\"extends\"</span>: <span class=\"string\">\"standard\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">//other settings</span></span><br><span class=\"line\">  <span class=\"string\">\"rules\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"indent\"</span>: [<span class=\"string\">\"error\"</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    <span class=\"string\">\"linebreak-style\"</span>: [<span class=\"string\">\"off\"</span>, <span class=\"string\">\"unix\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"quotes\"</span>: [<span class=\"string\">\"error\"</span>, <span class=\"string\">\"single\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"semi\"</span>: [<span class=\"string\">\"error\"</span>, <span class=\"string\">\"never\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"no-multiple-empty-lines\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"max\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"maxEOF\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In this case, we run again:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js</span><br></pre></td></tr></table></figure></p>\n<p>Actually, I got error:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006165344.png\" alt=\"截图20181006165344.png\"></p>\n<p>So, I have to run</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i eslint-config-standard@latest -g</span><br></pre></td></tr></table></figure></p>\n<p>It turns out I got more warnings.</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006165741.png\" alt=\"截图20181006165741.png\"></p>\n<p>So, I keep installing:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i eslint-plugin-import@latest eslint-plugin-node@latest eslint-plugin-promise@latest eslint-plugin-standard@latest -g</span><br></pre></td></tr></table></figure></p>\n<p>After that, there is no <strong>correct</strong> warnings. So, I run</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js</span><br></pre></td></tr></table></figure></p>\n<p>I got a little difference because of different rules:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006165945.png\" alt=\"截图20181006165945.png\"></p>\n<h3>script in .html</h3>\n<p>If you use code above to format js in .html, it will fail. For example:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- test4.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        html,</span></span><br><span class=\"line\"><span class=\"undefined\">        body &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> name = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            name: <span class=\"string\">'test4.js'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> obj = &#123;&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">params</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eslint --fix --config d:\\nodeModules\\.eslintrc.json test4.html</span><br></pre></td></tr></table></figure></p>\n<p>Result:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006172654.png\" alt=\"截图20181006172654.png\"></p>\n<p>See? Actually, we need plugins for non .js files. After search, I have to run code:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i eslint-plugin-html@latest -g</span><br></pre></td></tr></table></figure></p>\n<p>Also, we need to update <em>d:\\nodeModules\\.eslintrc.json</em> and it would be:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"browser\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"commonjs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"es6\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"node\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"extends\"</span>: <span class=\"string\">\"standard\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parserOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"ecmaFeatures\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"jsx\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"ecmaVersion\"</span>: <span class=\"number\">2018</span>,</span><br><span class=\"line\">    <span class=\"string\">\"sourceType\"</span>: <span class=\"string\">\"module\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [<span class=\"string\">\"html\"</span>],<span class=\"comment\">//add this plugin</span></span><br><span class=\"line\">  <span class=\"string\">\"rules\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"indent\"</span>: [<span class=\"string\">\"error\"</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    <span class=\"string\">\"linebreak-style\"</span>: [<span class=\"string\">\"off\"</span>, <span class=\"string\">\"unix\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"quotes\"</span>: [<span class=\"string\">\"error\"</span>, <span class=\"string\">\"single\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"semi\"</span>: [<span class=\"string\">\"error\"</span>, <span class=\"string\">\"never\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"no-multiple-empty-lines\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"max\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"maxEOF\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>After that, you run the code and ESLint would work for .html files.</p>\n<h3>move --fix to editor</h3>\n<p>As far, it seems there is only one flaw left. Do we have to run the code every time we want to format?</p>\n<p>Actually, we don't have to. For me, using vscode, ESLint provides plugins to do these jobs. For other editor users, you may want to check the ESLint doc.</p>\n<p>Here is the operations for vscode.</p>\n<p>Install ESLint plugin. Then add some settings in your <em>User Settings.</em></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//replace with your filename and path</span></span><br><span class=\"line\">    <span class=\"string\">\"configFile\"</span>: <span class=\"string\">\"D:/nodeModules/eslint/.eslintrc.json\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.alwaysShowStatus\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.run\"</span>: <span class=\"string\">\"onSave\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"language\"</span>: <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>After restarting your editor, you will see</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006173812.png\" alt=\"截图20181006173812.png\"></p>\n<p>And</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006173913.png\" alt=\"截图20181006173913.png\"></p>\n<p>If your default settings of <code>formatOnSave:true</code>, then ESLint would format your code onSave.</p>\n<h3>make global and local config file independent</h3>\n<p>Until now, everything seems perfect with ESLint. But there is one thing I need to mention. Suppose that you create a new vue project using vue-cli.</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue create my-proj</span><br><span class=\"line\"><span class=\"built_in\">cd</span> my-proj</span><br></pre></td></tr></table></figure></p>\n<p>You may find that ESLinter error like below:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006180631.png\" alt=\"截图20181006180631.png\"></p>\n<p>You can see this because we set the <code>eslint.options</code> in the <code>User Settings</code>. <code>eslint.options</code> setting is like passing it on the command line in a terminal using the <code>--config</code>. If you do this ESLint respects this and will not use the one in the project folder.</p>\n<p>However, if we delete the <code>eslint.options</code> it won't be able to format other files. So, the compromise solution is :</p>\n<ol>\n<li>delete the <code>eslint.options</code></li>\n<li>move the global config file to the top.</li>\n</ol>\n<p>For example:</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">home</span><br><span class=\"line\">  .eslintrc</span><br><span class=\"line\">  projects</span><br><span class=\"line\">    projectOne</span><br><span class=\"line\">      .eslintrc</span><br><span class=\"line\">    projectTwo</span><br></pre></td></tr></table></figure></p>\n<p>If we move the <em>d:\\nodeModules\\.eslintrc.json</em> to home, then delete the <code>eslint.options</code>. The result would be:</p>\n<ul>\n<li>code in project one will be validated using the local .eslintrc file</li>\n<li>code in project two will be validated using the .eslintrc file in your home directory</li>\n</ul>\n<p>Got it? I learn this from <a href=\"https://github.com/Microsoft/vscode-eslint/issues/527\">Override global eslintrc if one is found in current project</a>.</p>\n<p>At last, eslint in <code>User Settings</code> is:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// \"configFile\": \"D:/nodeModules/eslint/.eslintrc.json\",</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.alwaysShowStatus\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.run\"</span>: <span class=\"string\">\"onSave\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"language\"</span>: <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>And in the folder of all projects, I have global eslint config file:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006210753.png\" alt=\"截图20181006210753.png\"></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://github.com/Microsoft/vscode-eslint/issues/527\">Override global eslintrc if one is found in current project</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>I won't start with questions like what or why. I will start with how and why. Let's begin.</p>\n<h2>Main</h2>\n<h3>install eslint</h3>\n<p>Install global eslint package:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i eslint@latest -g</span><br></pre></td></tr></table></figure></p>\n<p>Then setup a config file. For example:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /</span><br><span class=\"line\"><span class=\"built_in\">cd</span> d/nodemodules</span><br><span class=\"line\">eslint --init</span><br></pre></td></tr></table></figure></p>\n<p>Then it will give you some choices.</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006154426.png\" alt=\"截图20181006154426.png\"></p>\n<p><strong>tips:</strong></p>\n<ol>\n<li><em>You may need to <code>npm init</code> first but you can remove it later.</em></li>\n<li><em>If you can't use arrow key, you may try use cmd.exe instead</em>.</li>\n</ol>\n<p>After that you will get a config file with some settings.</p>\n<p>According to tips on terminal, you will need to load some packages like me because of your previous choices. So, I need to:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i eslint-plugin-react@latest -g</span><br></pre></td></tr></table></figure></p>\n<p>Actually you can remove the <em>package.json</em> ( if you have ) now because we are making global eslint settings, not for a project.</p>\n<p>As far, I have a global eslint config file (<em>d:\\nodemodules\\.eslintrc.json</em>). And my test file is <em>test4.js</em>. Here is the origin code:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'test4.js'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">params</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>So, how can I lint <em>test4.js</em> by <em>d:\\nodemodules\\.eslintrc.json</em>?</p>\n<h3>run eslint on terminal</h3>\n<p>Let's switch to the folder of <em>test4.js</em>. Then for me, I run code below:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eslint --config d:\\nodeModules\\.eslintrc.json test4.js</span><br></pre></td></tr></table></figure></p>\n<p>Result:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006161411.png\" alt=\"截图20181006161411.png\"></p>\n<p>Here it is. Well, of course we want to fix it when run lint. So, according to <a href=\"https://eslint.org/docs/user-guide/command-line-interface\" target=\"_blank\" rel=\"noopener\">ESLint doc</a> we can try code below:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js</span><br></pre></td></tr></table></figure></p>\n<p>Result:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006163246.png\" alt=\"截图20181006163246.png\"></p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006163413.png\" alt=\"截图20181006163413.png\"></p>\n<p>ESLint will fix some problems, mainly spaces. In the case above, <strong>no-unused-vars</strong> problems will not be fixed.</p>\n<h3>set custom rules</h3>\n<p>Futhermore, the expected indent is 4 spaces. But I want 2 spaces to be the default indent. So, we always set our own rules based on ESLint. In my case, I altered the <em>d:\\nodemodules\\.eslintrc.json</em> like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">//other settings</span></span><br><span class=\"line\">    <span class=\"string\">\"rules\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"indent\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">            <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"comment\">//change to 2 not 4</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      <span class=\"comment\">//other rules</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Then, run the code above again:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js</span><br></pre></td></tr></table></figure></p>\n<p>It works immediately. If you want to change other rules, you may have to know more about the existing rules in <a href=\"https://eslint.org/docs/rules/\" target=\"_blank\" rel=\"noopener\">Eslint rules</a>.</p>\n<p>For me, For me, I usually set own rules based on <strong>standard</strong> not <strong>recommended rules</strong> and my custom rules is like:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//other settings</span></span><br><span class=\"line\">  <span class=\"string\">\"extends\"</span>: <span class=\"string\">\"standard\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">//other settings</span></span><br><span class=\"line\">  <span class=\"string\">\"rules\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"indent\"</span>: [<span class=\"string\">\"error\"</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    <span class=\"string\">\"linebreak-style\"</span>: [<span class=\"string\">\"off\"</span>, <span class=\"string\">\"unix\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"quotes\"</span>: [<span class=\"string\">\"error\"</span>, <span class=\"string\">\"single\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"semi\"</span>: [<span class=\"string\">\"error\"</span>, <span class=\"string\">\"never\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"no-multiple-empty-lines\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"max\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"maxEOF\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In this case, we run again:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js</span><br></pre></td></tr></table></figure></p>\n<p>Actually, I got error:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006165344.png\" alt=\"截图20181006165344.png\"></p>\n<p>So, I have to run</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i eslint-config-standard@latest -g</span><br></pre></td></tr></table></figure></p>\n<p>It turns out I got more warnings.</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006165741.png\" alt=\"截图20181006165741.png\"></p>\n<p>So, I keep installing:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i eslint-plugin-import@latest eslint-plugin-node@latest eslint-plugin-promise@latest eslint-plugin-standard@latest -g</span><br></pre></td></tr></table></figure></p>\n<p>After that, there is no <strong>correct</strong> warnings. So, I run</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eslint --fix --config d:\\nodeModules\\.eslintrc.json test4.js</span><br></pre></td></tr></table></figure></p>\n<p>I got a little difference because of different rules:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006165945.png\" alt=\"截图20181006165945.png\"></p>\n<h3>script in .html</h3>\n<p>If you use code above to format js in .html, it will fail. For example:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- test4.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        html,</span></span><br><span class=\"line\"><span class=\"undefined\">        body &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            width: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">            height: 100%;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> name = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            name: <span class=\"string\">'test4.js'</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> obj = &#123;&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">params</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">eslint --fix --config d:\\nodeModules\\.eslintrc.json test4.html</span><br></pre></td></tr></table></figure></p>\n<p>Result:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006172654.png\" alt=\"截图20181006172654.png\"></p>\n<p>See? Actually, we need plugins for non .js files. After search, I have to run code:</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i eslint-plugin-html@latest -g</span><br></pre></td></tr></table></figure></p>\n<p>Also, we need to update <em>d:\\nodeModules\\.eslintrc.json</em> and it would be:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"browser\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"commonjs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"es6\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"node\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"extends\"</span>: <span class=\"string\">\"standard\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parserOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"ecmaFeatures\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"jsx\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"ecmaVersion\"</span>: <span class=\"number\">2018</span>,</span><br><span class=\"line\">    <span class=\"string\">\"sourceType\"</span>: <span class=\"string\">\"module\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [<span class=\"string\">\"html\"</span>],<span class=\"comment\">//add this plugin</span></span><br><span class=\"line\">  <span class=\"string\">\"rules\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"indent\"</span>: [<span class=\"string\">\"error\"</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    <span class=\"string\">\"linebreak-style\"</span>: [<span class=\"string\">\"off\"</span>, <span class=\"string\">\"unix\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"quotes\"</span>: [<span class=\"string\">\"error\"</span>, <span class=\"string\">\"single\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"semi\"</span>: [<span class=\"string\">\"error\"</span>, <span class=\"string\">\"never\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"no-multiple-empty-lines\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"max\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"maxEOF\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>After that, you run the code and ESLint would work for .html files.</p>\n<h3>move --fix to editor</h3>\n<p>As far, it seems there is only one flaw left. Do we have to run the code every time we want to format?</p>\n<p>Actually, we don't have to. For me, using vscode, ESLint provides plugins to do these jobs. For other editor users, you may want to check the ESLint doc.</p>\n<p>Here is the operations for vscode.</p>\n<p>Install ESLint plugin. Then add some settings in your <em>User Settings.</em></p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//replace with your filename and path</span></span><br><span class=\"line\">    <span class=\"string\">\"configFile\"</span>: <span class=\"string\">\"D:/nodeModules/eslint/.eslintrc.json\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.alwaysShowStatus\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.run\"</span>: <span class=\"string\">\"onSave\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"language\"</span>: <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>After restarting your editor, you will see</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006173812.png\" alt=\"截图20181006173812.png\"></p>\n<p>And</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006173913.png\" alt=\"截图20181006173913.png\"></p>\n<p>If your default settings of <code>formatOnSave:true</code>, then ESLint would format your code onSave.</p>\n<h3>make global and local config file independent</h3>\n<p>Until now, everything seems perfect with ESLint. But there is one thing I need to mention. Suppose that you create a new vue project using vue-cli.</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue create my-proj</span><br><span class=\"line\"><span class=\"built_in\">cd</span> my-proj</span><br></pre></td></tr></table></figure></p>\n<p>You may find that ESLinter error like below:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006180631.png\" alt=\"截图20181006180631.png\"></p>\n<p>You can see this because we set the <code>eslint.options</code> in the <code>User Settings</code>. <code>eslint.options</code> setting is like passing it on the command line in a terminal using the <code>--config</code>. If you do this ESLint respects this and will not use the one in the project folder.</p>\n<p>However, if we delete the <code>eslint.options</code> it won't be able to format other files. So, the compromise solution is :</p>\n<ol>\n<li>delete the <code>eslint.options</code></li>\n<li>move the global config file to the top.</li>\n</ol>\n<p>For example:</p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">home</span><br><span class=\"line\">  .eslintrc</span><br><span class=\"line\">  projects</span><br><span class=\"line\">    projectOne</span><br><span class=\"line\">      .eslintrc</span><br><span class=\"line\">    projectTwo</span><br></pre></td></tr></table></figure></p>\n<p>If we move the <em>d:\\nodeModules\\.eslintrc.json</em> to home, then delete the <code>eslint.options</code>. The result would be:</p>\n<ul>\n<li>code in project one will be validated using the local .eslintrc file</li>\n<li>code in project two will be validated using the .eslintrc file in your home directory</li>\n</ul>\n<p>Got it? I learn this from <a href=\"https://github.com/Microsoft/vscode-eslint/issues/527\">Override global eslintrc if one is found in current project</a>.</p>\n<p>At last, eslint in <code>User Settings</code> is:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// \"configFile\": \"D:/nodeModules/eslint/.eslintrc.json\",</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.alwaysShowStatus\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.run\"</span>: <span class=\"string\">\"onSave\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"language\"</span>: <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>And in the folder of all projects, I have global eslint config file:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20181006210753.png\" alt=\"截图20181006210753.png\"></p>\n<h2>Ending</h2>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://github.com/Microsoft/vscode-eslint/issues/527\">Override global eslintrc if one is found in current project</a></li>\n</ul>\n"},{"title":"First Exploration on Mobile","comments":1,"date":"2018-06-14T06:11:45.000Z","_content":"\n## Preface\n\nRecently, I have been working on mobile development. Before this I have heard something strange but I didn't pay attention to. Now, I have to figure out though there is a lot of stuff. I am trying to make it clear as possible as I can but I am not sure content below is completely right.\n\n## Basic concepts\n\n### Css Pixels, Physical Pixels and DPR\n\nFirst, let's start with demo:\n\n```html\n<div class=\"cont\">\n  <div class=\"left\">left</div>\n  <div class=\"right\">right</div>\n</div>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml,\nbody {\n  height: 100%;\n  width: 100%;\n}\n\n.cont {\n  background: pink;\n  overflow: auto;\n  height: 100%;\n  width: 100%;\n}\n\n.left {\n  float: left;\n  width: 50%;\n  height: 20%;\n  background: lightblue;\n}\n\n.right {\n  float: right;\n  width: 50%;\n  height: 20%;\n  background: yellowgreen;\n}\n```\n\nBefore switching to device mode, make sure you don't have code starts with `<meta name=\"viewport\" ...` in your `head` tag.\n\nNormally, we will find everything seems ok when we switch to mobile. For example, Let's switch to iPhone6.\n\n![](../images/截图20180614143059.png)\n\nAccording to [chrome-devtools][chrome-devtools], width 375 and height 667 is `css pixels`. And before we keep going , we need to figure out some terms first including `css pixels`, `physical pixels` and `DPR`. Here is some related readings:\n\n- [converting-between-physical-pixels-and-css-pixels][converting-between-physical-pixels-and-css-pixels]\n\n- [what-exactly-is-device-pixel-ratio][what-exactly-is-device-pixel-ratio]\n\n- [mdn-devicePixelRatio][mdn-devicepixelratio]\n\nAfter reading those stuff, I am still confused. But I can figure something out at least. Well, here is the point based on iPhone6:\n\n- width 375 and height 667 is `css pixels`\n\n- `DPR` is 2\n\n- `DPR` = `physical pixels`/`css pixels`. So `physical pixels` is 750\\*1334\n\n### Layout Viewport and Visual Viewport\n\nOk, let's keep going. If you calculate the dimensions of viewport, you will get some strange values like below:\n\n```js\ndocument.documentElement.clientWidth //980\ndocument.documentElement.clientHeight //1743\n```\n\nMaybe you thought that the value should be 375\\*667 or 750\\*1334. However, it doesn't. The result 980\\*1743 is the dimensions of `layout viewport`. Well, before keep going we need to know something about `layout viewport` and `visual viewport`. Here is the related articles:\n\n- [quirksmode-viewports][quirksmode-viewports]\n\n- [quirksmode-viewports2][quirksmode-viewports2]\n\n- [quirksmode-viewports-app][quirksmode-viewports-app]\n\nBased on the articles above we can be sure of something about `layout viewport` and `visual viewport`.\n\n- `layout viewport` is the area that the browser uses to calculate the dimensions of elements with percentual width.\n\n- `visual viewport` is the part of the page that’s currently shown on-screen. The user may scroll to change the part of the page he sees, or zoom to change the size of the `visual viewport`.\n\n- Zoom doesn't change the size of `layout viewport` but `visual viewport`.\n\n- The size of `visual viewport` <= the size of `layout viewport`.\n\n- Both `layout viewport` and `visual viewport` are measured by `css pixels`.\n\n- Many mobile browsers initially show any page in fully zoomed-out mode to show the complete content of the site. Thus `layout viewport` is equal to the `visual viewport` at that moment.\n\nAnd in this case of iPhone6, here is something we can be sure of:\n\n- `layout viewport` is 980\\*1743\n\n- `visual viewport` is also 980\\*1743\n\n- The mobile browser show the page in fully zoomed-out mode to show the complete content of the site.\n\n### Meta Tag\n\nNow, we know what happened when we switch to mobile mode. Also, we know why the size of font becomes smaller in visual.\n\nHowever, we would want the `layout viewport` to be 375\\*667 or 750\\*1334 if we want to build a adaptive website. Fortunately, we can control the size of `layout viewport` by tag `meta`. For instance,\n\n```html\n<meta name=\"viewport\" content=\"width=375,initial-scale=1,user-scalable=no\">\n```\n\nYou can find the doc of `meta` in [mdn-meta][mdn-meta] and `viewport` in [mdn-viewport_meta_tag][mdn-viewport_meta_tag]. In the code above, we define 375px for the `width` of `layout viewport`. Here, 375px is `css pixels`. Also, you can prove it by:\n\n```js\ndocument.documentElement.clientWidth //375\ndocument.documentElement.clientHeight //667\n```\n\nSo, any change? Yes. The change is the font-size is bigger in visual than before. Before we change the text is too small to read.\n\nWe can keep testing by change the `width` in `meta`. For example, let's try 750:\n\n```html\n<meta name=\"viewport\" content=\"width=750,initial-scale=1,user-scalable=no\">\n```\n\nLook what we got:\n\n![](../images/截图20180614143060.gif)\n\nThis makes sense. However, if you remove `user-scalable=no` in the `meta` the browser will again enter into the fully zoomed-out mode. In that case, you will find the font-size is smaller and the whole page is showed in the screen which make the effect of `initial-scale=1` disappear.\n\nTo be compatible with mobiles with different sizes we need to switch the number to `device-width`:\n\n```html\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\">\n```\n\nIt is easy to understand, I think. Until now, it seems that we can be compatible with mobiles. Is that true?\n\n## Adaptive Layout\n\nIn the case above, we set `width:50%` for the `.left` and `.right` box. So, they could be adaptive. If we use `px` the page will not be adaptive because the size of viewport varies between mobiles. So, we have two choices\n\n1.  Use different size according to the size of viewport\n2.  Use percentage always\n\nOption2 will work if our page is simple enough. In most instances, it will bring a disaster because of nested elements. One modification in parent will bring changes to all descendant elements.\n\nThe problem of option1 is if we can avoid writing so many media queries codes to adapt to different sizes of viewport. For example:\n\n```css\n/* ... other codes for .cont with different sizes */\n@media (max-width: 800px) {\n  .cont {\n    width: 200px;\n  }\n}\n\n@media (max-width: 400px) {\n  .cont {\n    width: 100px;\n  }\n}\n/*... other codes for .cont with different sizes */\n```\n\nActually, we can avoid these codes. The key is `rem`. For example, code above can be simplified like:\n\n```css\nhtml {\n  font-size: 80px;\n}\n\n.cont {\n  width: 2.5rem;\n}\n\n/* no more codes for .cont with different sizes */\n```\n\nWhen the size of viewport is 400px, we just need to update the `font-size` of `html` with `40px`. That is easy with js. Seems wonderful with `rem`? huh?\n\nYou can use `rem` everywhere and js just run one time. Here is the related lib [lib-flexible][lib-flexible].\n\n## Latest Adaptive Layout\n\nBasically, there is no big problem with `rem`. Well, you might realize that we can totally use `vw` instead. That's correct! The compatibility has become better for most developers to use. The same thing happen to `flex` and `grid` layout. Until 2018.6, `flex` is a choice but we still need to wait for `grid` or look for some polyfill.\n\nHowever, there is still some little problems when using `vw` or `rem` layout.\n\n- We still use `px` for `font-size` and `border`.\n\nI think it is easy to understand because decimals would appear. In that case, we may get `15px` or `17px` instead of `16px`. At the same time, `border` may disappear because of some numbers like `0.9px`.\n\n- Develop with plugins\n\nFor instance, if we are developing based on iPhone6 whose width is 375px in css pixel while the designer gives us a PSD whose width is 750px, how we are going to do? Calculate the div with 75px and transform to 10% and write 10vw? So we calculate and write it one by one? That's terrible.\n\nWe can just write 75px and other numbers and leave the transform jobs to plugins(e.g. `less`,`postcss`.etc.).\n\n## Problems Caused by DPR\n\n### Blurry or Sharp in Different DPR Device\n\nUntil now, we haven't talked about DPR which we mentioned in the beginning. As [mdn-devicepixelratio][mdn-devicepixelratio] says:\n\n> In simpler terms, this tells the browser how many of the screen's actual pixels should be used to draw a single CSS pixel.\n\nOn the desktop or before the appearance of Retina display, DPR is always equal to 1. However, things became complicated after that. At present, there is a lot of DPR on the market which varies from 1 to 4. Sometimes, there comes 1.5 or 2.75. Anyway, we will talk about it later.\n\nWe can always get DPR by `window.devicePixelRatio`. The problem is that on retina screens or device whose DPR more than 1 images will become blurry. Of course we will try to avoid that. So, we have to figure out what happened to those mobiles with bigger DPR.\n\nAccording to [towards-retina-web][towards-retina-web],\n\n> A bitmap pixel is the smallest unit of data in a raster image (PNG, JPG, GIF, etc). Each pixel contains information on how it is to be displayed, including its position in the image’s coordinate system and its color.\n\n> Beside its raster resolution, an image on the Web has an abstract size, defined in CSS pixels. The browser squeezes or stretches the image based on its CSS height or width during the rendering process.\n\n> When a raster image is displayed at full size on a standard-density display, 1 bitmap pixel corresponds to 1 device pixel, resulting in a full-fidelity representation. Because a bitmap pixel can’t be further divided, it gets multiplied by four on Retina displays(assuming DPR is 2) to preserve the same physical size of the image, losing detail along the way.\n\nFor example, we got iPhone6 whose DPR is 2. And img we have is:\n\n```html\n<img src=\"example.png\" width=\"2\" height=\"2\">\n```\n\nAssume that size of example.png is 2\\*2 and the picture is like:\n\n![](../images/截图20180615093229.png)\n\nWith DPR of 2, the browser has to use 2 device pixels to draw a single css pixel. So `img` with 2\\*2 css pixels will be drew by 4\\*4 device pixel which means example.png with 2\\*2 bitmap pixels will be drew by 4\\*4 device pixel. So, 4 bitmap pixels of example.png will be drew by 16 device pixels which means 1 bitmap pixel will be drew by 4 device pixels.\n\nLet's move on, normally what we want might be:\n\n![](../images/截图20180615090536.png)\n\nHowever, actual result will be:\n\n![](../images/截图20180615090453.png)\n\nThe result happens because 1 bitmap pixel can't be further divided into 4 device pixels. That's what @smashingmagazine says:\n\n> A bitmap pixel is the smallest unit of data in a raster image (PNG, JPG, GIF, etc).\n\n> Because a bitmap pixel can’t be further divided, it gets multiplied by four on Retina displays(assuming DPR is 2) to preserve the same physical size of the image, losing detail along the way.\n\nYou can also find another example in [mdn-devicepixelratio][mdn-devicepixelratio].\n\nSo, how can we fix this? Basically, choices we have are listed as below:\n\n1.  Change the size of `img`, for example:\n\n```html\n<img src=\"example.png\" width=\"1\" height=\"1\">\n```\n\nIn this case, `img` with 1\\*1 css pixel will be drew by 2\\*2 device pixels which means example.png with 2\\*2 bitmap pixels will be divided by 2\\*2 device pixels. Hence, 1 bitmap pixel corresponds to 1 device pixel.\n\nWe might not use this alone because the layout would be affected.\n\n2.  Replace example.png with 4\\*4 and keep the original `img` with 2\\*2 css pixels, same explanation as above.\n\nIn this case, we might do this by changing the `src` attribute in the `img`. For example, update the `src` search param `?v=2*2` with `?v=4*4` or change from example.png to example@2x.png. [retinajs][retinajs] will help you do this job.\n\n3.  Use icon-font instead of raster image.\n\n4.  Use svg instead.\n\nActually, what you need to care about is not only `img` but also `background-image`. So, option1 and option2 will be not convenient without any other help(e.g. retinajs).\n\nAlso, with DPR smaller than 2 we need to switch size back. If not, image will become sharp which is the opposite process of blur. For instance:\n\n![](../images/截图20180615155759.png)\n\nCompare with the process of blur:\n\n![](../images/截图20180615090453.png)\n\nOption3 and option4 would be easier. And with the help of [iconfont][iconfont], things can be easier and easier when you choose svg.\n\nPersonally, I would choose option4 in daily work. For more information about the options, click [towards-retina-web][towards-retina-web].\n\n### Problems about Border\n\nAssume that we are using iPhone6 whose DPR is 2, border with 1 css pixel will be drew with 2 device pixels. Does that matter?\n\nYeah, sometimes that make the border thicker in visual. When we set 1px on border, actually what we might want is to set the thinnest border that device support. Normally, on desktop browser 1px is the thinnest. So in this case, you might need to talk with designer if he wants the thinnest border(e.g. 0.5px) or still 1px.\n\nAnyway, there is lots of ways if we want to set the thinnest border. So, I wrote another blog to talk about that. Please check [border on mobile][border on mobile].\n\n## Ending\n\nI have written too much about the basic knowledge about layout on mobile. However, there are still lots of problems I haven't mentioned. Anyway, I will write them in other blogs.\n\n## Reference\n\n[quirksmode-viewports][quirksmode-viewports]\n\n[quirksmode-viewports2][quirksmode-viewports2]\n\n[quirksmode-viewports-app][quirksmode-viewports-app]\n\n[a_pixel_is_not][a_pixel_is_not]\n\n[mdn-meta][mdn-meta]\n\n[mdn-viewport_meta_tag][mdn-viewport_meta_tag]\n\n[mdn-devicepixelratio][mdn-devicepixelratio]\n\n[specs-mediaqueries-3][specs-mediaqueries-3]\n\n[chrome-devtools][chrome-devtools]\n\n[what-exactly-is-device-pixel-ratio][what-exactly-is-device-pixel-ratio]\n\n[converting-between-physical-pixels-and-css-pixels][converting-between-physical-pixels-and-css-pixels]\n\n[towards-retina-web][towards-retina-web]\n\n[iconfont][iconfont]\n\n[retinajs][retinajs]\n\n[lib-flexible][lib-flexible]\n\nChinese:\n\n[移动端适配方案(上)][移动端适配方案(上)]\n\n[移动端适配方案(下)][移动端适配方案(下)]\n\n[移动端高清、多屏适配方案][移动端高清、多屏适配方案]\n\n[使用 flexible 实现手淘 h5 页面的终端适配][使用 flexible 实现手淘 h5 页面的终端适配]\n\n[如何在 vue 项目中使用 vw 实现移动端适配][如何在 vue 项目中使用 vw 实现移动端适配]\n\n[再聊移动端页面的适配][再聊移动端页面的适配]\n\n[quirksmode-viewports]: https://www.quirksmode.org/mobile/viewports.html\n[quirksmode-viewports2]: https://www.quirksmode.org/mobile/viewports2.html\n[quirksmode-viewports-app]: https://quirksmode.org/mobile/viewports/\n[a_pixel_is_not]: https://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html\n[mdn-meta]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#Specifications\n[mdn-viewport_meta_tag]: https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag\n[specs-mediaqueries-3]: https://drafts.csswg.org/mediaqueries-3/#units\n[chrome-devtools]: https://developer.chrome.com/devtools/docs/device-mode\n[mdn-devicepixelratio]: https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio\n[what-exactly-is-device-pixel-ratio]: https://stackoverflow.com/questions/8785643/what-exactly-is-device-pixel-ratio\n[converting-between-physical-pixels-and-css-pixels]: https://stackoverflow.com/questions/3588983/converting-between-physical-pixels-and-css-pixels\n[towards-retina-web]: https://www.smashingmagazine.com/2012/08/towards-retina-web/\n[iconfont]: http://www.iconfont.cn/\n[retinajs]: https://github.com/strues/retinajs\n[lib-flexible]: https://github.com/amfe/lib-flexible\n[移动端适配方案(上)]: https://segmentfault.com/a/1190000004336869\n[移动端适配方案(下)]: https://segmentfault.com/a/1190000004358316\n[移动端高清、多屏适配方案]: http://www.html-js.com/article/Mobile-terminal-H5-mobile-terminal-HD-multi-screen-adaptation-scheme%203041\n[使用 flexible 实现手淘 h5 页面的终端适配]: https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html\n[如何在 vue 项目中使用 vw 实现移动端适配]: https://www.w3cplus.com/mobile/vw-layout-in-vue.html\n[再聊移动端页面的适配]: https://www.w3cplus.com/css/vw-for-layout.html\n[border on mobile]: ./layout-on-mobile.md\n","source":"_posts/first-exploration-on-mobile.md","raw":"---\ntitle: First Exploration on Mobile\ntags:\n- mobile\n- layout\n- rem\n- viewport\n- layout viewport\n- visual viewport\n- css pixel\n- device pixel\n- DPR\n- retina\n- meta\n- device-width\n- initial-scale\n- user-scalable\n\ncategories: css\ncomments: true\ndate: 2018-06-14 14:11:45\n---\n\n## Preface\n\nRecently, I have been working on mobile development. Before this I have heard something strange but I didn't pay attention to. Now, I have to figure out though there is a lot of stuff. I am trying to make it clear as possible as I can but I am not sure content below is completely right.\n\n## Basic concepts\n\n### Css Pixels, Physical Pixels and DPR\n\nFirst, let's start with demo:\n\n```html\n<div class=\"cont\">\n  <div class=\"left\">left</div>\n  <div class=\"right\">right</div>\n</div>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml,\nbody {\n  height: 100%;\n  width: 100%;\n}\n\n.cont {\n  background: pink;\n  overflow: auto;\n  height: 100%;\n  width: 100%;\n}\n\n.left {\n  float: left;\n  width: 50%;\n  height: 20%;\n  background: lightblue;\n}\n\n.right {\n  float: right;\n  width: 50%;\n  height: 20%;\n  background: yellowgreen;\n}\n```\n\nBefore switching to device mode, make sure you don't have code starts with `<meta name=\"viewport\" ...` in your `head` tag.\n\nNormally, we will find everything seems ok when we switch to mobile. For example, Let's switch to iPhone6.\n\n![](../images/截图20180614143059.png)\n\nAccording to [chrome-devtools][chrome-devtools], width 375 and height 667 is `css pixels`. And before we keep going , we need to figure out some terms first including `css pixels`, `physical pixels` and `DPR`. Here is some related readings:\n\n- [converting-between-physical-pixels-and-css-pixels][converting-between-physical-pixels-and-css-pixels]\n\n- [what-exactly-is-device-pixel-ratio][what-exactly-is-device-pixel-ratio]\n\n- [mdn-devicePixelRatio][mdn-devicepixelratio]\n\nAfter reading those stuff, I am still confused. But I can figure something out at least. Well, here is the point based on iPhone6:\n\n- width 375 and height 667 is `css pixels`\n\n- `DPR` is 2\n\n- `DPR` = `physical pixels`/`css pixels`. So `physical pixels` is 750\\*1334\n\n### Layout Viewport and Visual Viewport\n\nOk, let's keep going. If you calculate the dimensions of viewport, you will get some strange values like below:\n\n```js\ndocument.documentElement.clientWidth //980\ndocument.documentElement.clientHeight //1743\n```\n\nMaybe you thought that the value should be 375\\*667 or 750\\*1334. However, it doesn't. The result 980\\*1743 is the dimensions of `layout viewport`. Well, before keep going we need to know something about `layout viewport` and `visual viewport`. Here is the related articles:\n\n- [quirksmode-viewports][quirksmode-viewports]\n\n- [quirksmode-viewports2][quirksmode-viewports2]\n\n- [quirksmode-viewports-app][quirksmode-viewports-app]\n\nBased on the articles above we can be sure of something about `layout viewport` and `visual viewport`.\n\n- `layout viewport` is the area that the browser uses to calculate the dimensions of elements with percentual width.\n\n- `visual viewport` is the part of the page that’s currently shown on-screen. The user may scroll to change the part of the page he sees, or zoom to change the size of the `visual viewport`.\n\n- Zoom doesn't change the size of `layout viewport` but `visual viewport`.\n\n- The size of `visual viewport` <= the size of `layout viewport`.\n\n- Both `layout viewport` and `visual viewport` are measured by `css pixels`.\n\n- Many mobile browsers initially show any page in fully zoomed-out mode to show the complete content of the site. Thus `layout viewport` is equal to the `visual viewport` at that moment.\n\nAnd in this case of iPhone6, here is something we can be sure of:\n\n- `layout viewport` is 980\\*1743\n\n- `visual viewport` is also 980\\*1743\n\n- The mobile browser show the page in fully zoomed-out mode to show the complete content of the site.\n\n### Meta Tag\n\nNow, we know what happened when we switch to mobile mode. Also, we know why the size of font becomes smaller in visual.\n\nHowever, we would want the `layout viewport` to be 375\\*667 or 750\\*1334 if we want to build a adaptive website. Fortunately, we can control the size of `layout viewport` by tag `meta`. For instance,\n\n```html\n<meta name=\"viewport\" content=\"width=375,initial-scale=1,user-scalable=no\">\n```\n\nYou can find the doc of `meta` in [mdn-meta][mdn-meta] and `viewport` in [mdn-viewport_meta_tag][mdn-viewport_meta_tag]. In the code above, we define 375px for the `width` of `layout viewport`. Here, 375px is `css pixels`. Also, you can prove it by:\n\n```js\ndocument.documentElement.clientWidth //375\ndocument.documentElement.clientHeight //667\n```\n\nSo, any change? Yes. The change is the font-size is bigger in visual than before. Before we change the text is too small to read.\n\nWe can keep testing by change the `width` in `meta`. For example, let's try 750:\n\n```html\n<meta name=\"viewport\" content=\"width=750,initial-scale=1,user-scalable=no\">\n```\n\nLook what we got:\n\n![](../images/截图20180614143060.gif)\n\nThis makes sense. However, if you remove `user-scalable=no` in the `meta` the browser will again enter into the fully zoomed-out mode. In that case, you will find the font-size is smaller and the whole page is showed in the screen which make the effect of `initial-scale=1` disappear.\n\nTo be compatible with mobiles with different sizes we need to switch the number to `device-width`:\n\n```html\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\">\n```\n\nIt is easy to understand, I think. Until now, it seems that we can be compatible with mobiles. Is that true?\n\n## Adaptive Layout\n\nIn the case above, we set `width:50%` for the `.left` and `.right` box. So, they could be adaptive. If we use `px` the page will not be adaptive because the size of viewport varies between mobiles. So, we have two choices\n\n1.  Use different size according to the size of viewport\n2.  Use percentage always\n\nOption2 will work if our page is simple enough. In most instances, it will bring a disaster because of nested elements. One modification in parent will bring changes to all descendant elements.\n\nThe problem of option1 is if we can avoid writing so many media queries codes to adapt to different sizes of viewport. For example:\n\n```css\n/* ... other codes for .cont with different sizes */\n@media (max-width: 800px) {\n  .cont {\n    width: 200px;\n  }\n}\n\n@media (max-width: 400px) {\n  .cont {\n    width: 100px;\n  }\n}\n/*... other codes for .cont with different sizes */\n```\n\nActually, we can avoid these codes. The key is `rem`. For example, code above can be simplified like:\n\n```css\nhtml {\n  font-size: 80px;\n}\n\n.cont {\n  width: 2.5rem;\n}\n\n/* no more codes for .cont with different sizes */\n```\n\nWhen the size of viewport is 400px, we just need to update the `font-size` of `html` with `40px`. That is easy with js. Seems wonderful with `rem`? huh?\n\nYou can use `rem` everywhere and js just run one time. Here is the related lib [lib-flexible][lib-flexible].\n\n## Latest Adaptive Layout\n\nBasically, there is no big problem with `rem`. Well, you might realize that we can totally use `vw` instead. That's correct! The compatibility has become better for most developers to use. The same thing happen to `flex` and `grid` layout. Until 2018.6, `flex` is a choice but we still need to wait for `grid` or look for some polyfill.\n\nHowever, there is still some little problems when using `vw` or `rem` layout.\n\n- We still use `px` for `font-size` and `border`.\n\nI think it is easy to understand because decimals would appear. In that case, we may get `15px` or `17px` instead of `16px`. At the same time, `border` may disappear because of some numbers like `0.9px`.\n\n- Develop with plugins\n\nFor instance, if we are developing based on iPhone6 whose width is 375px in css pixel while the designer gives us a PSD whose width is 750px, how we are going to do? Calculate the div with 75px and transform to 10% and write 10vw? So we calculate and write it one by one? That's terrible.\n\nWe can just write 75px and other numbers and leave the transform jobs to plugins(e.g. `less`,`postcss`.etc.).\n\n## Problems Caused by DPR\n\n### Blurry or Sharp in Different DPR Device\n\nUntil now, we haven't talked about DPR which we mentioned in the beginning. As [mdn-devicepixelratio][mdn-devicepixelratio] says:\n\n> In simpler terms, this tells the browser how many of the screen's actual pixels should be used to draw a single CSS pixel.\n\nOn the desktop or before the appearance of Retina display, DPR is always equal to 1. However, things became complicated after that. At present, there is a lot of DPR on the market which varies from 1 to 4. Sometimes, there comes 1.5 or 2.75. Anyway, we will talk about it later.\n\nWe can always get DPR by `window.devicePixelRatio`. The problem is that on retina screens or device whose DPR more than 1 images will become blurry. Of course we will try to avoid that. So, we have to figure out what happened to those mobiles with bigger DPR.\n\nAccording to [towards-retina-web][towards-retina-web],\n\n> A bitmap pixel is the smallest unit of data in a raster image (PNG, JPG, GIF, etc). Each pixel contains information on how it is to be displayed, including its position in the image’s coordinate system and its color.\n\n> Beside its raster resolution, an image on the Web has an abstract size, defined in CSS pixels. The browser squeezes or stretches the image based on its CSS height or width during the rendering process.\n\n> When a raster image is displayed at full size on a standard-density display, 1 bitmap pixel corresponds to 1 device pixel, resulting in a full-fidelity representation. Because a bitmap pixel can’t be further divided, it gets multiplied by four on Retina displays(assuming DPR is 2) to preserve the same physical size of the image, losing detail along the way.\n\nFor example, we got iPhone6 whose DPR is 2. And img we have is:\n\n```html\n<img src=\"example.png\" width=\"2\" height=\"2\">\n```\n\nAssume that size of example.png is 2\\*2 and the picture is like:\n\n![](../images/截图20180615093229.png)\n\nWith DPR of 2, the browser has to use 2 device pixels to draw a single css pixel. So `img` with 2\\*2 css pixels will be drew by 4\\*4 device pixel which means example.png with 2\\*2 bitmap pixels will be drew by 4\\*4 device pixel. So, 4 bitmap pixels of example.png will be drew by 16 device pixels which means 1 bitmap pixel will be drew by 4 device pixels.\n\nLet's move on, normally what we want might be:\n\n![](../images/截图20180615090536.png)\n\nHowever, actual result will be:\n\n![](../images/截图20180615090453.png)\n\nThe result happens because 1 bitmap pixel can't be further divided into 4 device pixels. That's what @smashingmagazine says:\n\n> A bitmap pixel is the smallest unit of data in a raster image (PNG, JPG, GIF, etc).\n\n> Because a bitmap pixel can’t be further divided, it gets multiplied by four on Retina displays(assuming DPR is 2) to preserve the same physical size of the image, losing detail along the way.\n\nYou can also find another example in [mdn-devicepixelratio][mdn-devicepixelratio].\n\nSo, how can we fix this? Basically, choices we have are listed as below:\n\n1.  Change the size of `img`, for example:\n\n```html\n<img src=\"example.png\" width=\"1\" height=\"1\">\n```\n\nIn this case, `img` with 1\\*1 css pixel will be drew by 2\\*2 device pixels which means example.png with 2\\*2 bitmap pixels will be divided by 2\\*2 device pixels. Hence, 1 bitmap pixel corresponds to 1 device pixel.\n\nWe might not use this alone because the layout would be affected.\n\n2.  Replace example.png with 4\\*4 and keep the original `img` with 2\\*2 css pixels, same explanation as above.\n\nIn this case, we might do this by changing the `src` attribute in the `img`. For example, update the `src` search param `?v=2*2` with `?v=4*4` or change from example.png to example@2x.png. [retinajs][retinajs] will help you do this job.\n\n3.  Use icon-font instead of raster image.\n\n4.  Use svg instead.\n\nActually, what you need to care about is not only `img` but also `background-image`. So, option1 and option2 will be not convenient without any other help(e.g. retinajs).\n\nAlso, with DPR smaller than 2 we need to switch size back. If not, image will become sharp which is the opposite process of blur. For instance:\n\n![](../images/截图20180615155759.png)\n\nCompare with the process of blur:\n\n![](../images/截图20180615090453.png)\n\nOption3 and option4 would be easier. And with the help of [iconfont][iconfont], things can be easier and easier when you choose svg.\n\nPersonally, I would choose option4 in daily work. For more information about the options, click [towards-retina-web][towards-retina-web].\n\n### Problems about Border\n\nAssume that we are using iPhone6 whose DPR is 2, border with 1 css pixel will be drew with 2 device pixels. Does that matter?\n\nYeah, sometimes that make the border thicker in visual. When we set 1px on border, actually what we might want is to set the thinnest border that device support. Normally, on desktop browser 1px is the thinnest. So in this case, you might need to talk with designer if he wants the thinnest border(e.g. 0.5px) or still 1px.\n\nAnyway, there is lots of ways if we want to set the thinnest border. So, I wrote another blog to talk about that. Please check [border on mobile][border on mobile].\n\n## Ending\n\nI have written too much about the basic knowledge about layout on mobile. However, there are still lots of problems I haven't mentioned. Anyway, I will write them in other blogs.\n\n## Reference\n\n[quirksmode-viewports][quirksmode-viewports]\n\n[quirksmode-viewports2][quirksmode-viewports2]\n\n[quirksmode-viewports-app][quirksmode-viewports-app]\n\n[a_pixel_is_not][a_pixel_is_not]\n\n[mdn-meta][mdn-meta]\n\n[mdn-viewport_meta_tag][mdn-viewport_meta_tag]\n\n[mdn-devicepixelratio][mdn-devicepixelratio]\n\n[specs-mediaqueries-3][specs-mediaqueries-3]\n\n[chrome-devtools][chrome-devtools]\n\n[what-exactly-is-device-pixel-ratio][what-exactly-is-device-pixel-ratio]\n\n[converting-between-physical-pixels-and-css-pixels][converting-between-physical-pixels-and-css-pixels]\n\n[towards-retina-web][towards-retina-web]\n\n[iconfont][iconfont]\n\n[retinajs][retinajs]\n\n[lib-flexible][lib-flexible]\n\nChinese:\n\n[移动端适配方案(上)][移动端适配方案(上)]\n\n[移动端适配方案(下)][移动端适配方案(下)]\n\n[移动端高清、多屏适配方案][移动端高清、多屏适配方案]\n\n[使用 flexible 实现手淘 h5 页面的终端适配][使用 flexible 实现手淘 h5 页面的终端适配]\n\n[如何在 vue 项目中使用 vw 实现移动端适配][如何在 vue 项目中使用 vw 实现移动端适配]\n\n[再聊移动端页面的适配][再聊移动端页面的适配]\n\n[quirksmode-viewports]: https://www.quirksmode.org/mobile/viewports.html\n[quirksmode-viewports2]: https://www.quirksmode.org/mobile/viewports2.html\n[quirksmode-viewports-app]: https://quirksmode.org/mobile/viewports/\n[a_pixel_is_not]: https://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html\n[mdn-meta]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#Specifications\n[mdn-viewport_meta_tag]: https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag\n[specs-mediaqueries-3]: https://drafts.csswg.org/mediaqueries-3/#units\n[chrome-devtools]: https://developer.chrome.com/devtools/docs/device-mode\n[mdn-devicepixelratio]: https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio\n[what-exactly-is-device-pixel-ratio]: https://stackoverflow.com/questions/8785643/what-exactly-is-device-pixel-ratio\n[converting-between-physical-pixels-and-css-pixels]: https://stackoverflow.com/questions/3588983/converting-between-physical-pixels-and-css-pixels\n[towards-retina-web]: https://www.smashingmagazine.com/2012/08/towards-retina-web/\n[iconfont]: http://www.iconfont.cn/\n[retinajs]: https://github.com/strues/retinajs\n[lib-flexible]: https://github.com/amfe/lib-flexible\n[移动端适配方案(上)]: https://segmentfault.com/a/1190000004336869\n[移动端适配方案(下)]: https://segmentfault.com/a/1190000004358316\n[移动端高清、多屏适配方案]: http://www.html-js.com/article/Mobile-terminal-H5-mobile-terminal-HD-multi-screen-adaptation-scheme%203041\n[使用 flexible 实现手淘 h5 页面的终端适配]: https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html\n[如何在 vue 项目中使用 vw 实现移动端适配]: https://www.w3cplus.com/mobile/vw-layout-in-vue.html\n[再聊移动端页面的适配]: https://www.w3cplus.com/css/vw-for-layout.html\n[border on mobile]: ./layout-on-mobile.md\n","slug":"first-exploration-on-mobile","published":1,"updated":"2018-06-18T02:17:59.352Z","layout":"post","photos":[],"link":"","_id":"cjv0yvj4h009qborpqglolyq3","content":"<h2>Preface</h2>\n<p>Recently, I have been working on mobile development. Before this I have heard something strange but I didn't pay attention to. Now, I have to figure out though there is a lot of stuff. I am trying to make it clear as possible as I can but I am not sure content below is completely right.</p>\n<h2>Basic concepts</h2>\n<h3>Css Pixels, Physical Pixels and DPR</h3>\n<p>First, let's start with demo:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cont\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cont</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: yellowgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Before switching to device mode, make sure you don't have code starts with <code>&lt;meta name=&quot;viewport&quot; ...</code> in your <code>head</code> tag.</p>\n<p>Normally, we will find everything seems ok when we switch to mobile. For example, Let's switch to iPhone6.</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180614143059.png\" alt=\"\"></p>\n<p>According to <a href=\"https://developer.chrome.com/devtools/docs/device-mode\" target=\"_blank\" rel=\"noopener\">chrome-devtools</a>, width 375 and height 667 is <code>css pixels</code>. And before we keep going , we need to figure out some terms first including <code>css pixels</code>, <code>physical pixels</code> and <code>DPR</code>. Here is some related readings:</p>\n<ul>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/3588983/converting-between-physical-pixels-and-css-pixels\" target=\"_blank\" rel=\"noopener\">converting-between-physical-pixels-and-css-pixels</a></p>\n</li>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/8785643/what-exactly-is-device-pixel-ratio\" target=\"_blank\" rel=\"noopener\">what-exactly-is-device-pixel-ratio</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio\" target=\"_blank\" rel=\"noopener\">mdn-devicePixelRatio</a></p>\n</li>\n</ul>\n<p>After reading those stuff, I am still confused. But I can figure something out at least. Well, here is the point based on iPhone6:</p>\n<ul>\n<li>\n<p>width 375 and height 667 is <code>css pixels</code></p>\n</li>\n<li>\n<p><code>DPR</code> is 2</p>\n</li>\n<li>\n<p><code>DPR</code> = <code>physical pixels</code>/<code>css pixels</code>. So <code>physical pixels</code> is 750*1334</p>\n</li>\n</ul>\n<h3>Layout Viewport and Visual Viewport</h3>\n<p>Ok, let's keep going. If you calculate the dimensions of viewport, you will get some strange values like below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientWidth <span class=\"comment\">//980</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientHeight <span class=\"comment\">//1743</span></span><br></pre></td></tr></table></figure></p>\n<p>Maybe you thought that the value should be 375*667 or 750*1334. However, it doesn't. The result 980*1743 is the dimensions of <code>layout viewport</code>. Well, before keep going we need to know something about <code>layout viewport</code> and <code>visual viewport</code>. Here is the related articles:</p>\n<ul>\n<li>\n<p><a href=\"https://www.quirksmode.org/mobile/viewports.html\" target=\"_blank\" rel=\"noopener\">quirksmode-viewports</a></p>\n</li>\n<li>\n<p><a href=\"https://www.quirksmode.org/mobile/viewports2.html\" target=\"_blank\" rel=\"noopener\">quirksmode-viewports2</a></p>\n</li>\n<li>\n<p><a href=\"https://quirksmode.org/mobile/viewports/\" target=\"_blank\" rel=\"noopener\">quirksmode-viewports-app</a></p>\n</li>\n</ul>\n<p>Based on the articles above we can be sure of something about <code>layout viewport</code> and <code>visual viewport</code>.</p>\n<ul>\n<li>\n<p><code>layout viewport</code> is the area that the browser uses to calculate the dimensions of elements with percentual width.</p>\n</li>\n<li>\n<p><code>visual viewport</code> is the part of the page that’s currently shown on-screen. The user may scroll to change the part of the page he sees, or zoom to change the size of the <code>visual viewport</code>.</p>\n</li>\n<li>\n<p>Zoom doesn't change the size of <code>layout viewport</code> but <code>visual viewport</code>.</p>\n</li>\n<li>\n<p>The size of <code>visual viewport</code> &lt;= the size of <code>layout viewport</code>.</p>\n</li>\n<li>\n<p>Both <code>layout viewport</code> and <code>visual viewport</code> are measured by <code>css pixels</code>.</p>\n</li>\n<li>\n<p>Many mobile browsers initially show any page in fully zoomed-out mode to show the complete content of the site. Thus <code>layout viewport</code> is equal to the <code>visual viewport</code> at that moment.</p>\n</li>\n</ul>\n<p>And in this case of iPhone6, here is something we can be sure of:</p>\n<ul>\n<li>\n<p><code>layout viewport</code> is 980*1743</p>\n</li>\n<li>\n<p><code>visual viewport</code> is also 980*1743</p>\n</li>\n<li>\n<p>The mobile browser show the page in fully zoomed-out mode to show the complete content of the site.</p>\n</li>\n</ul>\n<h3>Meta Tag</h3>\n<p>Now, we know what happened when we switch to mobile mode. Also, we know why the size of font becomes smaller in visual.</p>\n<p>However, we would want the <code>layout viewport</code> to be 375*667 or 750*1334 if we want to build a adaptive website. Fortunately, we can control the size of <code>layout viewport</code> by tag <code>meta</code>. For instance,</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=375,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>You can find the doc of <code>meta</code> in <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#Specifications\" target=\"_blank\" rel=\"noopener\">mdn-meta</a> and <code>viewport</code> in <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag\" target=\"_blank\" rel=\"noopener\">mdn-viewport_meta_tag</a>. In the code above, we define 375px for the <code>width</code> of <code>layout viewport</code>. Here, 375px is <code>css pixels</code>. Also, you can prove it by:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientWidth <span class=\"comment\">//375</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientHeight <span class=\"comment\">//667</span></span><br></pre></td></tr></table></figure></p>\n<p>So, any change? Yes. The change is the font-size is bigger in visual than before. Before we change the text is too small to read.</p>\n<p>We can keep testing by change the <code>width</code> in <code>meta</code>. For example, let's try 750:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=750,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Look what we got:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180614143060.gif\" alt=\"\"></p>\n<p>This makes sense. However, if you remove <code>user-scalable=no</code> in the <code>meta</code> the browser will again enter into the fully zoomed-out mode. In that case, you will find the font-size is smaller and the whole page is showed in the screen which make the effect of <code>initial-scale=1</code> disappear.</p>\n<p>To be compatible with mobiles with different sizes we need to switch the number to <code>device-width</code>:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>It is easy to understand, I think. Until now, it seems that we can be compatible with mobiles. Is that true?</p>\n<h2>Adaptive Layout</h2>\n<p>In the case above, we set <code>width:50%</code> for the <code>.left</code> and <code>.right</code> box. So, they could be adaptive. If we use <code>px</code> the page will not be adaptive because the size of viewport varies between mobiles. So, we have two choices</p>\n<ol>\n<li>Use different size according to the size of viewport</li>\n<li>Use percentage always</li>\n</ol>\n<p>Option2 will work if our page is simple enough. In most instances, it will bring a disaster because of nested elements. One modification in parent will bring changes to all descendant elements.</p>\n<p>The problem of option1 is if we can avoid writing so many media queries codes to adapt to different sizes of viewport. For example:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ... other codes for .cont with different sizes */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (max-width: <span class=\"number\">800px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.cont</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (max-width: <span class=\"number\">400px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.cont</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*... other codes for .cont with different sizes */</span></span><br></pre></td></tr></table></figure></p>\n<p>Actually, we can avoid these codes. The key is <code>rem</code>. For example, code above can be simplified like:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cont</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">2.5rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* no more codes for .cont with different sizes */</span></span><br></pre></td></tr></table></figure></p>\n<p>When the size of viewport is 400px, we just need to update the <code>font-size</code> of <code>html</code> with <code>40px</code>. That is easy with js. Seems wonderful with <code>rem</code>? huh?</p>\n<p>You can use <code>rem</code> everywhere and js just run one time. Here is the related lib <a href=\"https://github.com/amfe/lib-flexible\">lib-flexible</a>.</p>\n<h2>Latest Adaptive Layout</h2>\n<p>Basically, there is no big problem with <code>rem</code>. Well, you might realize that we can totally use <code>vw</code> instead. That's correct! The compatibility has become better for most developers to use. The same thing happen to <code>flex</code> and <code>grid</code> layout. Until 2018.6, <code>flex</code> is a choice but we still need to wait for <code>grid</code> or look for some polyfill.</p>\n<p>However, there is still some little problems when using <code>vw</code> or <code>rem</code> layout.</p>\n<ul>\n<li>We still use <code>px</code> for <code>font-size</code> and <code>border</code>.</li>\n</ul>\n<p>I think it is easy to understand because decimals would appear. In that case, we may get <code>15px</code> or <code>17px</code> instead of <code>16px</code>. At the same time, <code>border</code> may disappear because of some numbers like <code>0.9px</code>.</p>\n<ul>\n<li>Develop with plugins</li>\n</ul>\n<p>For instance, if we are developing based on iPhone6 whose width is 375px in css pixel while the designer gives us a PSD whose width is 750px, how we are going to do? Calculate the div with 75px and transform to 10% and write 10vw? So we calculate and write it one by one? That's terrible.</p>\n<p>We can just write 75px and other numbers and leave the transform jobs to plugins(e.g. <code>less</code>,<code>postcss</code>.etc.).</p>\n<h2>Problems Caused by DPR</h2>\n<h3>Blurry or Sharp in Different DPR Device</h3>\n<p>Until now, we haven't talked about DPR which we mentioned in the beginning. As <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio\" target=\"_blank\" rel=\"noopener\">mdn-devicepixelratio</a> says:</p>\n<blockquote>\n<p>In simpler terms, this tells the browser how many of the screen's actual pixels should be used to draw a single CSS pixel.</p>\n</blockquote>\n<p>On the desktop or before the appearance of Retina display, DPR is always equal to 1. However, things became complicated after that. At present, there is a lot of DPR on the market which varies from 1 to 4. Sometimes, there comes 1.5 or 2.75. Anyway, we will talk about it later.</p>\n<p>We can always get DPR by <code>window.devicePixelRatio</code>. The problem is that on retina screens or device whose DPR more than 1 images will become blurry. Of course we will try to avoid that. So, we have to figure out what happened to those mobiles with bigger DPR.</p>\n<p>According to <a href=\"https://www.smashingmagazine.com/2012/08/towards-retina-web/\" target=\"_blank\" rel=\"noopener\">towards-retina-web</a>,</p>\n<blockquote>\n<p>A bitmap pixel is the smallest unit of data in a raster image (PNG, JPG, GIF, etc). Each pixel contains information on how it is to be displayed, including its position in the image’s coordinate system and its color.</p>\n</blockquote>\n<blockquote>\n<p>Beside its raster resolution, an image on the Web has an abstract size, defined in CSS pixels. The browser squeezes or stretches the image based on its CSS height or width during the rendering process.</p>\n</blockquote>\n<blockquote>\n<p>When a raster image is displayed at full size on a standard-density display, 1 bitmap pixel corresponds to 1 device pixel, resulting in a full-fidelity representation. Because a bitmap pixel can’t be further divided, it gets multiplied by four on Retina displays(assuming DPR is 2) to preserve the same physical size of the image, losing detail along the way.</p>\n</blockquote>\n<p>For example, we got iPhone6 whose DPR is 2. And img we have is:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"example.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Assume that size of example.png is 2*2 and the picture is like:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180615093229.png\" alt=\"\"></p>\n<p>With DPR of 2, the browser has to use 2 device pixels to draw a single css pixel. So <code>img</code> with 2*2 css pixels will be drew by 4*4 device pixel which means example.png with 2*2 bitmap pixels will be drew by 4*4 device pixel. So, 4 bitmap pixels of example.png will be drew by 16 device pixels which means 1 bitmap pixel will be drew by 4 device pixels.</p>\n<p>Let's move on, normally what we want might be:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180615090536.png\" alt=\"\"></p>\n<p>However, actual result will be:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180615090453.png\" alt=\"\"></p>\n<p>The result happens because 1 bitmap pixel can't be further divided into 4 device pixels. That's what @smashingmagazine says:</p>\n<blockquote>\n<p>A bitmap pixel is the smallest unit of data in a raster image (PNG, JPG, GIF, etc).</p>\n</blockquote>\n<blockquote>\n<p>Because a bitmap pixel can’t be further divided, it gets multiplied by four on Retina displays(assuming DPR is 2) to preserve the same physical size of the image, losing detail along the way.</p>\n</blockquote>\n<p>You can also find another example in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio\" target=\"_blank\" rel=\"noopener\">mdn-devicepixelratio</a>.</p>\n<p>So, how can we fix this? Basically, choices we have are listed as below:</p>\n<ol>\n<li>Change the size of <code>img</code>, for example:</li>\n</ol>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"example.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>In this case, <code>img</code> with 1*1 css pixel will be drew by 2*2 device pixels which means example.png with 2*2 bitmap pixels will be divided by 2*2 device pixels. Hence, 1 bitmap pixel corresponds to 1 device pixel.</p>\n<p>We might not use this alone because the layout would be affected.</p>\n<ol start=\"2\">\n<li>Replace example.png with 4*4 and keep the original <code>img</code> with 2*2 css pixels, same explanation as above.</li>\n</ol>\n<p>In this case, we might do this by changing the <code>src</code> attribute in the <code>img</code>. For example, update the <code>src</code> search param <code>?v=2*2</code> with <code>?v=4*4</code> or change from example.png to example@2x.png. <a href=\"https://github.com/strues/retinajs\">retinajs</a> will help you do this job.</p>\n<ol start=\"3\">\n<li>\n<p>Use icon-font instead of raster image.</p>\n</li>\n<li>\n<p>Use svg instead.</p>\n</li>\n</ol>\n<p>Actually, what you need to care about is not only <code>img</code> but also <code>background-image</code>. So, option1 and option2 will be not convenient without any other help(e.g. retinajs).</p>\n<p>Also, with DPR smaller than 2 we need to switch size back. If not, image will become sharp which is the opposite process of blur. For instance:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180615155759.png\" alt=\"\"></p>\n<p>Compare with the process of blur:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180615090453.png\" alt=\"\"></p>\n<p>Option3 and option4 would be easier. And with the help of <a href=\"http://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">iconfont</a>, things can be easier and easier when you choose svg.</p>\n<p>Personally, I would choose option4 in daily work. For more information about the options, click <a href=\"https://www.smashingmagazine.com/2012/08/towards-retina-web/\" target=\"_blank\" rel=\"noopener\">towards-retina-web</a>.</p>\n<h3>Problems about Border</h3>\n<p>Assume that we are using iPhone6 whose DPR is 2, border with 1 css pixel will be drew with 2 device pixels. Does that matter?</p>\n<p>Yeah, sometimes that make the border thicker in visual. When we set 1px on border, actually what we might want is to set the thinnest border that device support. Normally, on desktop browser 1px is the thinnest. So in this case, you might need to talk with designer if he wants the thinnest border(e.g. 0.5px) or still 1px.</p>\n<p>Anyway, there is lots of ways if we want to set the thinnest border. So, I wrote another blog to talk about that. Please check <a href=\"./layout-on-mobile.md\">border on mobile</a>.</p>\n<h2>Ending</h2>\n<p>I have written too much about the basic knowledge about layout on mobile. However, there are still lots of problems I haven't mentioned. Anyway, I will write them in other blogs.</p>\n<h2>Reference</h2>\n<p><a href=\"https://www.quirksmode.org/mobile/viewports.html\" target=\"_blank\" rel=\"noopener\">quirksmode-viewports</a></p>\n<p><a href=\"https://www.quirksmode.org/mobile/viewports2.html\" target=\"_blank\" rel=\"noopener\">quirksmode-viewports2</a></p>\n<p><a href=\"https://quirksmode.org/mobile/viewports/\" target=\"_blank\" rel=\"noopener\">quirksmode-viewports-app</a></p>\n<p><a href=\"https://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html\" target=\"_blank\" rel=\"noopener\">a_pixel_is_not</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#Specifications\" target=\"_blank\" rel=\"noopener\">mdn-meta</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag\" target=\"_blank\" rel=\"noopener\">mdn-viewport_meta_tag</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio\" target=\"_blank\" rel=\"noopener\">mdn-devicepixelratio</a></p>\n<p><a href=\"https://drafts.csswg.org/mediaqueries-3/#units\" target=\"_blank\" rel=\"noopener\">specs-mediaqueries-3</a></p>\n<p><a href=\"https://developer.chrome.com/devtools/docs/device-mode\" target=\"_blank\" rel=\"noopener\">chrome-devtools</a></p>\n<p><a href=\"https://stackoverflow.com/questions/8785643/what-exactly-is-device-pixel-ratio\" target=\"_blank\" rel=\"noopener\">what-exactly-is-device-pixel-ratio</a></p>\n<p><a href=\"https://stackoverflow.com/questions/3588983/converting-between-physical-pixels-and-css-pixels\" target=\"_blank\" rel=\"noopener\">converting-between-physical-pixels-and-css-pixels</a></p>\n<p><a href=\"https://www.smashingmagazine.com/2012/08/towards-retina-web/\" target=\"_blank\" rel=\"noopener\">towards-retina-web</a></p>\n<p><a href=\"http://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">iconfont</a></p>\n<p><a href=\"https://github.com/strues/retinajs\">retinajs</a></p>\n<p><a href=\"https://github.com/amfe/lib-flexible\">lib-flexible</a></p>\n<p>Chinese:</p>\n<p><a href=\"https://segmentfault.com/a/1190000004336869\" target=\"_blank\" rel=\"noopener\">移动端适配方案(上)</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000004358316\" target=\"_blank\" rel=\"noopener\">移动端适配方案(下)</a></p>\n<p><a href=\"http://www.html-js.com/article/Mobile-terminal-H5-mobile-terminal-HD-multi-screen-adaptation-scheme%203041\" target=\"_blank\" rel=\"noopener\">移动端高清、多屏适配方案</a></p>\n<p><a href=\"https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html\" target=\"_blank\" rel=\"noopener\">使用 flexible 实现手淘 h5 页面的终端适配</a></p>\n<p><a href=\"https://www.w3cplus.com/mobile/vw-layout-in-vue.html\" target=\"_blank\" rel=\"noopener\">如何在 vue 项目中使用 vw 实现移动端适配</a></p>\n<p><a href=\"https://www.w3cplus.com/css/vw-for-layout.html\" target=\"_blank\" rel=\"noopener\">再聊移动端页面的适配</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Preface</h2>\n<p>Recently, I have been working on mobile development. Before this I have heard something strange but I didn't pay attention to. Now, I have to figure out though there is a lot of stuff. I am trying to make it clear as possible as I can but I am not sure content below is completely right.</p>\n<h2>Basic concepts</h2>\n<h3>Css Pixels, Physical Pixels and DPR</h3>\n<p>First, let's start with demo:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cont\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cont</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: pink;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: yellowgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Before switching to device mode, make sure you don't have code starts with <code>&lt;meta name=&quot;viewport&quot; ...</code> in your <code>head</code> tag.</p>\n<p>Normally, we will find everything seems ok when we switch to mobile. For example, Let's switch to iPhone6.</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180614143059.png\" alt=\"\"></p>\n<p>According to <a href=\"https://developer.chrome.com/devtools/docs/device-mode\" target=\"_blank\" rel=\"noopener\">chrome-devtools</a>, width 375 and height 667 is <code>css pixels</code>. And before we keep going , we need to figure out some terms first including <code>css pixels</code>, <code>physical pixels</code> and <code>DPR</code>. Here is some related readings:</p>\n<ul>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/3588983/converting-between-physical-pixels-and-css-pixels\" target=\"_blank\" rel=\"noopener\">converting-between-physical-pixels-and-css-pixels</a></p>\n</li>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/8785643/what-exactly-is-device-pixel-ratio\" target=\"_blank\" rel=\"noopener\">what-exactly-is-device-pixel-ratio</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio\" target=\"_blank\" rel=\"noopener\">mdn-devicePixelRatio</a></p>\n</li>\n</ul>\n<p>After reading those stuff, I am still confused. But I can figure something out at least. Well, here is the point based on iPhone6:</p>\n<ul>\n<li>\n<p>width 375 and height 667 is <code>css pixels</code></p>\n</li>\n<li>\n<p><code>DPR</code> is 2</p>\n</li>\n<li>\n<p><code>DPR</code> = <code>physical pixels</code>/<code>css pixels</code>. So <code>physical pixels</code> is 750*1334</p>\n</li>\n</ul>\n<h3>Layout Viewport and Visual Viewport</h3>\n<p>Ok, let's keep going. If you calculate the dimensions of viewport, you will get some strange values like below:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientWidth <span class=\"comment\">//980</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientHeight <span class=\"comment\">//1743</span></span><br></pre></td></tr></table></figure></p>\n<p>Maybe you thought that the value should be 375*667 or 750*1334. However, it doesn't. The result 980*1743 is the dimensions of <code>layout viewport</code>. Well, before keep going we need to know something about <code>layout viewport</code> and <code>visual viewport</code>. Here is the related articles:</p>\n<ul>\n<li>\n<p><a href=\"https://www.quirksmode.org/mobile/viewports.html\" target=\"_blank\" rel=\"noopener\">quirksmode-viewports</a></p>\n</li>\n<li>\n<p><a href=\"https://www.quirksmode.org/mobile/viewports2.html\" target=\"_blank\" rel=\"noopener\">quirksmode-viewports2</a></p>\n</li>\n<li>\n<p><a href=\"https://quirksmode.org/mobile/viewports/\" target=\"_blank\" rel=\"noopener\">quirksmode-viewports-app</a></p>\n</li>\n</ul>\n<p>Based on the articles above we can be sure of something about <code>layout viewport</code> and <code>visual viewport</code>.</p>\n<ul>\n<li>\n<p><code>layout viewport</code> is the area that the browser uses to calculate the dimensions of elements with percentual width.</p>\n</li>\n<li>\n<p><code>visual viewport</code> is the part of the page that’s currently shown on-screen. The user may scroll to change the part of the page he sees, or zoom to change the size of the <code>visual viewport</code>.</p>\n</li>\n<li>\n<p>Zoom doesn't change the size of <code>layout viewport</code> but <code>visual viewport</code>.</p>\n</li>\n<li>\n<p>The size of <code>visual viewport</code> &lt;= the size of <code>layout viewport</code>.</p>\n</li>\n<li>\n<p>Both <code>layout viewport</code> and <code>visual viewport</code> are measured by <code>css pixels</code>.</p>\n</li>\n<li>\n<p>Many mobile browsers initially show any page in fully zoomed-out mode to show the complete content of the site. Thus <code>layout viewport</code> is equal to the <code>visual viewport</code> at that moment.</p>\n</li>\n</ul>\n<p>And in this case of iPhone6, here is something we can be sure of:</p>\n<ul>\n<li>\n<p><code>layout viewport</code> is 980*1743</p>\n</li>\n<li>\n<p><code>visual viewport</code> is also 980*1743</p>\n</li>\n<li>\n<p>The mobile browser show the page in fully zoomed-out mode to show the complete content of the site.</p>\n</li>\n</ul>\n<h3>Meta Tag</h3>\n<p>Now, we know what happened when we switch to mobile mode. Also, we know why the size of font becomes smaller in visual.</p>\n<p>However, we would want the <code>layout viewport</code> to be 375*667 or 750*1334 if we want to build a adaptive website. Fortunately, we can control the size of <code>layout viewport</code> by tag <code>meta</code>. For instance,</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=375,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>You can find the doc of <code>meta</code> in <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#Specifications\" target=\"_blank\" rel=\"noopener\">mdn-meta</a> and <code>viewport</code> in <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag\" target=\"_blank\" rel=\"noopener\">mdn-viewport_meta_tag</a>. In the code above, we define 375px for the <code>width</code> of <code>layout viewport</code>. Here, 375px is <code>css pixels</code>. Also, you can prove it by:</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientWidth <span class=\"comment\">//375</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.clientHeight <span class=\"comment\">//667</span></span><br></pre></td></tr></table></figure></p>\n<p>So, any change? Yes. The change is the font-size is bigger in visual than before. Before we change the text is too small to read.</p>\n<p>We can keep testing by change the <code>width</code> in <code>meta</code>. For example, let's try 750:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=750,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Look what we got:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180614143060.gif\" alt=\"\"></p>\n<p>This makes sense. However, if you remove <code>user-scalable=no</code> in the <code>meta</code> the browser will again enter into the fully zoomed-out mode. In that case, you will find the font-size is smaller and the whole page is showed in the screen which make the effect of <code>initial-scale=1</code> disappear.</p>\n<p>To be compatible with mobiles with different sizes we need to switch the number to <code>device-width</code>:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>It is easy to understand, I think. Until now, it seems that we can be compatible with mobiles. Is that true?</p>\n<h2>Adaptive Layout</h2>\n<p>In the case above, we set <code>width:50%</code> for the <code>.left</code> and <code>.right</code> box. So, they could be adaptive. If we use <code>px</code> the page will not be adaptive because the size of viewport varies between mobiles. So, we have two choices</p>\n<ol>\n<li>Use different size according to the size of viewport</li>\n<li>Use percentage always</li>\n</ol>\n<p>Option2 will work if our page is simple enough. In most instances, it will bring a disaster because of nested elements. One modification in parent will bring changes to all descendant elements.</p>\n<p>The problem of option1 is if we can avoid writing so many media queries codes to adapt to different sizes of viewport. For example:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ... other codes for .cont with different sizes */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (max-width: <span class=\"number\">800px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.cont</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> (max-width: <span class=\"number\">400px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.cont</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*... other codes for .cont with different sizes */</span></span><br></pre></td></tr></table></figure></p>\n<p>Actually, we can avoid these codes. The key is <code>rem</code>. For example, code above can be simplified like:</p>\n<p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cont</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">2.5rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* no more codes for .cont with different sizes */</span></span><br></pre></td></tr></table></figure></p>\n<p>When the size of viewport is 400px, we just need to update the <code>font-size</code> of <code>html</code> with <code>40px</code>. That is easy with js. Seems wonderful with <code>rem</code>? huh?</p>\n<p>You can use <code>rem</code> everywhere and js just run one time. Here is the related lib <a href=\"https://github.com/amfe/lib-flexible\">lib-flexible</a>.</p>\n<h2>Latest Adaptive Layout</h2>\n<p>Basically, there is no big problem with <code>rem</code>. Well, you might realize that we can totally use <code>vw</code> instead. That's correct! The compatibility has become better for most developers to use. The same thing happen to <code>flex</code> and <code>grid</code> layout. Until 2018.6, <code>flex</code> is a choice but we still need to wait for <code>grid</code> or look for some polyfill.</p>\n<p>However, there is still some little problems when using <code>vw</code> or <code>rem</code> layout.</p>\n<ul>\n<li>We still use <code>px</code> for <code>font-size</code> and <code>border</code>.</li>\n</ul>\n<p>I think it is easy to understand because decimals would appear. In that case, we may get <code>15px</code> or <code>17px</code> instead of <code>16px</code>. At the same time, <code>border</code> may disappear because of some numbers like <code>0.9px</code>.</p>\n<ul>\n<li>Develop with plugins</li>\n</ul>\n<p>For instance, if we are developing based on iPhone6 whose width is 375px in css pixel while the designer gives us a PSD whose width is 750px, how we are going to do? Calculate the div with 75px and transform to 10% and write 10vw? So we calculate and write it one by one? That's terrible.</p>\n<p>We can just write 75px and other numbers and leave the transform jobs to plugins(e.g. <code>less</code>,<code>postcss</code>.etc.).</p>\n<h2>Problems Caused by DPR</h2>\n<h3>Blurry or Sharp in Different DPR Device</h3>\n<p>Until now, we haven't talked about DPR which we mentioned in the beginning. As <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio\" target=\"_blank\" rel=\"noopener\">mdn-devicepixelratio</a> says:</p>\n<blockquote>\n<p>In simpler terms, this tells the browser how many of the screen's actual pixels should be used to draw a single CSS pixel.</p>\n</blockquote>\n<p>On the desktop or before the appearance of Retina display, DPR is always equal to 1. However, things became complicated after that. At present, there is a lot of DPR on the market which varies from 1 to 4. Sometimes, there comes 1.5 or 2.75. Anyway, we will talk about it later.</p>\n<p>We can always get DPR by <code>window.devicePixelRatio</code>. The problem is that on retina screens or device whose DPR more than 1 images will become blurry. Of course we will try to avoid that. So, we have to figure out what happened to those mobiles with bigger DPR.</p>\n<p>According to <a href=\"https://www.smashingmagazine.com/2012/08/towards-retina-web/\" target=\"_blank\" rel=\"noopener\">towards-retina-web</a>,</p>\n<blockquote>\n<p>A bitmap pixel is the smallest unit of data in a raster image (PNG, JPG, GIF, etc). Each pixel contains information on how it is to be displayed, including its position in the image’s coordinate system and its color.</p>\n</blockquote>\n<blockquote>\n<p>Beside its raster resolution, an image on the Web has an abstract size, defined in CSS pixels. The browser squeezes or stretches the image based on its CSS height or width during the rendering process.</p>\n</blockquote>\n<blockquote>\n<p>When a raster image is displayed at full size on a standard-density display, 1 bitmap pixel corresponds to 1 device pixel, resulting in a full-fidelity representation. Because a bitmap pixel can’t be further divided, it gets multiplied by four on Retina displays(assuming DPR is 2) to preserve the same physical size of the image, losing detail along the way.</p>\n</blockquote>\n<p>For example, we got iPhone6 whose DPR is 2. And img we have is:</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"example.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Assume that size of example.png is 2*2 and the picture is like:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180615093229.png\" alt=\"\"></p>\n<p>With DPR of 2, the browser has to use 2 device pixels to draw a single css pixel. So <code>img</code> with 2*2 css pixels will be drew by 4*4 device pixel which means example.png with 2*2 bitmap pixels will be drew by 4*4 device pixel. So, 4 bitmap pixels of example.png will be drew by 16 device pixels which means 1 bitmap pixel will be drew by 4 device pixels.</p>\n<p>Let's move on, normally what we want might be:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180615090536.png\" alt=\"\"></p>\n<p>However, actual result will be:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180615090453.png\" alt=\"\"></p>\n<p>The result happens because 1 bitmap pixel can't be further divided into 4 device pixels. That's what @smashingmagazine says:</p>\n<blockquote>\n<p>A bitmap pixel is the smallest unit of data in a raster image (PNG, JPG, GIF, etc).</p>\n</blockquote>\n<blockquote>\n<p>Because a bitmap pixel can’t be further divided, it gets multiplied by four on Retina displays(assuming DPR is 2) to preserve the same physical size of the image, losing detail along the way.</p>\n</blockquote>\n<p>You can also find another example in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio\" target=\"_blank\" rel=\"noopener\">mdn-devicepixelratio</a>.</p>\n<p>So, how can we fix this? Basically, choices we have are listed as below:</p>\n<ol>\n<li>Change the size of <code>img</code>, for example:</li>\n</ol>\n<p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"example.png\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>In this case, <code>img</code> with 1*1 css pixel will be drew by 2*2 device pixels which means example.png with 2*2 bitmap pixels will be divided by 2*2 device pixels. Hence, 1 bitmap pixel corresponds to 1 device pixel.</p>\n<p>We might not use this alone because the layout would be affected.</p>\n<ol start=\"2\">\n<li>Replace example.png with 4*4 and keep the original <code>img</code> with 2*2 css pixels, same explanation as above.</li>\n</ol>\n<p>In this case, we might do this by changing the <code>src</code> attribute in the <code>img</code>. For example, update the <code>src</code> search param <code>?v=2*2</code> with <code>?v=4*4</code> or change from example.png to example@2x.png. <a href=\"https://github.com/strues/retinajs\">retinajs</a> will help you do this job.</p>\n<ol start=\"3\">\n<li>\n<p>Use icon-font instead of raster image.</p>\n</li>\n<li>\n<p>Use svg instead.</p>\n</li>\n</ol>\n<p>Actually, what you need to care about is not only <code>img</code> but also <code>background-image</code>. So, option1 and option2 will be not convenient without any other help(e.g. retinajs).</p>\n<p>Also, with DPR smaller than 2 we need to switch size back. If not, image will become sharp which is the opposite process of blur. For instance:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180615155759.png\" alt=\"\"></p>\n<p>Compare with the process of blur:</p>\n<p><img src=\"../images/%E6%88%AA%E5%9B%BE20180615090453.png\" alt=\"\"></p>\n<p>Option3 and option4 would be easier. And with the help of <a href=\"http://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">iconfont</a>, things can be easier and easier when you choose svg.</p>\n<p>Personally, I would choose option4 in daily work. For more information about the options, click <a href=\"https://www.smashingmagazine.com/2012/08/towards-retina-web/\" target=\"_blank\" rel=\"noopener\">towards-retina-web</a>.</p>\n<h3>Problems about Border</h3>\n<p>Assume that we are using iPhone6 whose DPR is 2, border with 1 css pixel will be drew with 2 device pixels. Does that matter?</p>\n<p>Yeah, sometimes that make the border thicker in visual. When we set 1px on border, actually what we might want is to set the thinnest border that device support. Normally, on desktop browser 1px is the thinnest. So in this case, you might need to talk with designer if he wants the thinnest border(e.g. 0.5px) or still 1px.</p>\n<p>Anyway, there is lots of ways if we want to set the thinnest border. So, I wrote another blog to talk about that. Please check <a href=\"./layout-on-mobile.md\">border on mobile</a>.</p>\n<h2>Ending</h2>\n<p>I have written too much about the basic knowledge about layout on mobile. However, there are still lots of problems I haven't mentioned. Anyway, I will write them in other blogs.</p>\n<h2>Reference</h2>\n<p><a href=\"https://www.quirksmode.org/mobile/viewports.html\" target=\"_blank\" rel=\"noopener\">quirksmode-viewports</a></p>\n<p><a href=\"https://www.quirksmode.org/mobile/viewports2.html\" target=\"_blank\" rel=\"noopener\">quirksmode-viewports2</a></p>\n<p><a href=\"https://quirksmode.org/mobile/viewports/\" target=\"_blank\" rel=\"noopener\">quirksmode-viewports-app</a></p>\n<p><a href=\"https://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html\" target=\"_blank\" rel=\"noopener\">a_pixel_is_not</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#Specifications\" target=\"_blank\" rel=\"noopener\">mdn-meta</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag\" target=\"_blank\" rel=\"noopener\">mdn-viewport_meta_tag</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio\" target=\"_blank\" rel=\"noopener\">mdn-devicepixelratio</a></p>\n<p><a href=\"https://drafts.csswg.org/mediaqueries-3/#units\" target=\"_blank\" rel=\"noopener\">specs-mediaqueries-3</a></p>\n<p><a href=\"https://developer.chrome.com/devtools/docs/device-mode\" target=\"_blank\" rel=\"noopener\">chrome-devtools</a></p>\n<p><a href=\"https://stackoverflow.com/questions/8785643/what-exactly-is-device-pixel-ratio\" target=\"_blank\" rel=\"noopener\">what-exactly-is-device-pixel-ratio</a></p>\n<p><a href=\"https://stackoverflow.com/questions/3588983/converting-between-physical-pixels-and-css-pixels\" target=\"_blank\" rel=\"noopener\">converting-between-physical-pixels-and-css-pixels</a></p>\n<p><a href=\"https://www.smashingmagazine.com/2012/08/towards-retina-web/\" target=\"_blank\" rel=\"noopener\">towards-retina-web</a></p>\n<p><a href=\"http://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">iconfont</a></p>\n<p><a href=\"https://github.com/strues/retinajs\">retinajs</a></p>\n<p><a href=\"https://github.com/amfe/lib-flexible\">lib-flexible</a></p>\n<p>Chinese:</p>\n<p><a href=\"https://segmentfault.com/a/1190000004336869\" target=\"_blank\" rel=\"noopener\">移动端适配方案(上)</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000004358316\" target=\"_blank\" rel=\"noopener\">移动端适配方案(下)</a></p>\n<p><a href=\"http://www.html-js.com/article/Mobile-terminal-H5-mobile-terminal-HD-multi-screen-adaptation-scheme%203041\" target=\"_blank\" rel=\"noopener\">移动端高清、多屏适配方案</a></p>\n<p><a href=\"https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html\" target=\"_blank\" rel=\"noopener\">使用 flexible 实现手淘 h5 页面的终端适配</a></p>\n<p><a href=\"https://www.w3cplus.com/mobile/vw-layout-in-vue.html\" target=\"_blank\" rel=\"noopener\">如何在 vue 项目中使用 vw 实现移动端适配</a></p>\n<p><a href=\"https://www.w3cplus.com/css/vw-for-layout.html\" target=\"_blank\" rel=\"noopener\">再聊移动端页面的适配</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjv0yvim20004borpwfrc32sp","category_id":"cjv0yvimb0007borpsyiw7rcr","_id":"cjv0yvin4000gborpgc88ys9b"},{"post_id":"cjv0yvim70006borpt7k6wxve","category_id":"cjv0yvimt000cborpnvi6ua29","_id":"cjv0yvini000nborpa17hds6n"},{"post_id":"cjv0yvime0009borpmygfm547","category_id":"cjv0yvin6000hborpko6xjpsg","_id":"cjv0yvinr000sborp92fwi8kc"},{"post_id":"cjv0yvimk000aborp198lc7jb","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yvio90010borpq3dz5sfc"},{"post_id":"cjv0yvino000rborpom28y2k0","category_id":"cjv0yvin6000hborpko6xjpsg","_id":"cjv0yvioe0013borp2fxyns1u"},{"post_id":"cjv0yvinu000vborplbfz3mq7","category_id":"cjv0yvin6000hborpko6xjpsg","_id":"cjv0yvioh0015borpujvfhnvu"},{"post_id":"cjv0yvimq000bborpvhfzp8r6","category_id":"cjv0yvin6000hborpko6xjpsg","_id":"cjv0yvioo0019borp9360c3v4"},{"post_id":"cjv0yvioa0011borp4roymivn","category_id":"cjv0yvin6000hborpko6xjpsg","_id":"cjv0yvios001cborpsic3ftyv"},{"post_id":"cjv0yviof0014borpu80ngkfb","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yvioz001hborpo47dibhs"},{"post_id":"cjv0yvimw000eborpxje9u4hs","category_id":"cjv0yvio8000zborp8iixhxsq","_id":"cjv0yvip3001jborp84tp2f87"},{"post_id":"cjv0yvioj0016borpdjis8ugo","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yvip9001mborp8er9a0ea"},{"post_id":"cjv0yvin2000fborpvssjqxnf","category_id":"cjv0yviol0017borp0kv1e1fl","_id":"cjv0yvipd001pborpt32pb39b"},{"post_id":"cjv0yviot001dborpustsx1f8","category_id":"cjv0yviol0017borp0kv1e1fl","_id":"cjv0yvipj001sborp9iff72a5"},{"post_id":"cjv0yvip0001iborplar8ci13","category_id":"cjv0yvin6000hborpko6xjpsg","_id":"cjv0yvipm001vborp72fom82j"},{"post_id":"cjv0yvin9000jborp4qnapp9w","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yvipr001yborpeshczzjv"},{"post_id":"cjv0yvinf000lborpzx5v3t6w","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yviq20021borpxbav2pzj"},{"post_id":"cjv0yvipe001qborphzhe8cna","category_id":"cjv0yvin6000hborpko6xjpsg","_id":"cjv0yviqn0025borp3ew4f8gt"},{"post_id":"cjv0yvipk001tborpm091guof","category_id":"cjv0yviol0017borp0kv1e1fl","_id":"cjv0yvirj0029borphi0zoobr"},{"post_id":"cjv0yvinl000qborp0myuyjj1","category_id":"cjv0yvio8000zborp8iixhxsq","_id":"cjv0yvirq002dborpw3ey6k30"},{"post_id":"cjv0yvipn001wborpqlocewqo","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yvirw002gborp75dwp1cx"},{"post_id":"cjv0yvipt001zborpfjtvk9l0","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yvis2002jborpunixu879"},{"post_id":"cjv0yvio1000xborpjnrpsh5u","category_id":"cjv0yvipq001xborp3kzs2wpb","_id":"cjv0yvis8002mborpq2601qcs"},{"post_id":"cjv0yviq70022borpiv9kzksv","category_id":"cjv0yvipq001xborp3kzs2wpb","_id":"cjv0yvise002pborpw8s7f644"},{"post_id":"cjv0yviqu0026borp52e5i0nn","category_id":"cjv0yviqh0024borpjeo3obwb","_id":"cjv0yvisj002sborpz0fif0dl"},{"post_id":"cjv0yviop001aborpz9jn41ex","category_id":"cjv0yviqh0024borpjeo3obwb","_id":"cjv0yviso002vborp2nk40rga"},{"post_id":"cjv0yvirl002aborpdvy7rvbc","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yvist002yborpd5zk9551"},{"post_id":"cjv0yvirs002eborpqterikzo","category_id":"cjv0yvio8000zborp8iixhxsq","_id":"cjv0yvit00033borp52rp18il"},{"post_id":"cjv0yvip4001kborp4qono8ap","category_id":"cjv0yvirp002cborphck64c69","_id":"cjv0yvit50036borp3enqv5wg"},{"post_id":"cjv0yvis3002kborp8andtx6m","category_id":"cjv0yvipq001xborp3kzs2wpb","_id":"cjv0yvita0039borpoukyr6th"},{"post_id":"cjv0yvis9002nborpq8s9l23w","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yvite003cborp2kahe6hr"},{"post_id":"cjv0yvipa001oborpdnoqongb","category_id":"cjv0yvirp002cborphck64c69","_id":"cjv0yvitj003eborpd2hrvzqo"},{"post_id":"cjv0yvisf002qborpf23f7m3a","category_id":"cjv0yvin6000hborpko6xjpsg","_id":"cjv0yvitp003hborp04oj4w72"},{"post_id":"cjv0yvisk002tborpv6a45bn7","category_id":"cjv0yvipq001xborp3kzs2wpb","_id":"cjv0yvitt003jborps9k9c6id"},{"post_id":"cjv0yvirz002iborpvq01it4m","category_id":"cjv0yvish002rborpug8xvsgq","_id":"cjv0yvity003mborpzup56otf"},{"post_id":"cjv0yvisu002zborpidy8tmcv","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yviu3003pborpq79sy8g0"},{"post_id":"cjv0yvit10034borpk783ao61","category_id":"cjv0yvin6000hborpko6xjpsg","_id":"cjv0yviu7003sborprk5c028i"},{"post_id":"cjv0yvit60037borptbcbbzmp","category_id":"cjv0yvin6000hborpko6xjpsg","_id":"cjv0yviu9003uborp47mqat89"},{"post_id":"cjv0yvisp002wborp09j498u4","category_id":"cjv0yvisz0032borp3p80c3we","_id":"cjv0yviub003wborplf4cx2p0"},{"post_id":"cjv0yvitb003bborpoo84wjsm","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yviud003yborpr46ezqr5"},{"post_id":"cjv0yvitf003dborph86nlrlu","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yviue003zborp3nva4sx9"},{"post_id":"cjv0yvitj003fborpw030oxb9","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yviug0041borp74r59q7x"},{"post_id":"cjv0yvitq003iborpruij2hpu","category_id":"cjv0yvipq001xborp3kzs2wpb","_id":"cjv0yviui0043borpwzk4woof"},{"post_id":"cjv0yvitu003kborpz304tcg3","category_id":"cjv0yviqh0024borpjeo3obwb","_id":"cjv0yviul0046borp0trtvhon"},{"post_id":"cjv0yvitz003nborpvn4kojkf","category_id":"cjv0yviol0017borp0kv1e1fl","_id":"cjv0yviun0048borp12zisgxh"},{"post_id":"cjv0yvj18008tborpswaxovpz","category_id":"cjv0yvin6000hborpko6xjpsg","_id":"cjv0yvj1l008yborp2r3b3kyq"},{"post_id":"cjv0yvj1b008uborp6e1hzmye","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yvj1n008zborpd9ns8aeh"},{"post_id":"cjv0yvj1f008wborpon3qumrw","category_id":"cjv0yvipq001xborp3kzs2wpb","_id":"cjv0yvj1p0091borp0hc02rel"},{"post_id":"cjv0yvj1j008xborpsi8njlnw","category_id":"cjv0yvinj000oborpa6951yhf","_id":"cjv0yvj1q0092borpev77lfiq"},{"post_id":"cjv0yvj4h009qborpqglolyq3","category_id":"cjv0yvin6000hborpko6xjpsg","_id":"cjv0yvj4m009sborp95kx3b5b"}],"PostTag":[{"post_id":"cjv0yvim20004borpwfrc32sp","tag_id":"cjv0yvimd0008borpkwva20co","_id":"cjv0yvind000kborp8d4lhcqv"},{"post_id":"cjv0yvim20004borpwfrc32sp","tag_id":"cjv0yvimu000dborpcbx7g701","_id":"cjv0yvinh000mborpwyz6to4p"},{"post_id":"cjv0yvim70006borpt7k6wxve","tag_id":"cjv0yvin7000iborpg0h0d7lq","_id":"cjv0yvio0000wborp5v4kkbgf"},{"post_id":"cjv0yvim70006borpt7k6wxve","tag_id":"cjv0yvink000pborpmghy06u7","_id":"cjv0yvio4000yborpmrhnjp1f"},{"post_id":"cjv0yvime0009borpmygfm547","tag_id":"cjv0yvint000uborppe46b38h","_id":"cjv0yvior001bborpxosl1x16"},{"post_id":"cjv0yvime0009borpmygfm547","tag_id":"cjv0yvioc0012borpwz593quz","_id":"cjv0yviov001eborphkosxukq"},{"post_id":"cjv0yvimk000aborp198lc7jb","tag_id":"cjv0yvion0018borpbx4i0737","_id":"cjv0yviqa0023borpoyd9c5sm"},{"post_id":"cjv0yvimk000aborp198lc7jb","tag_id":"cjv0yvioy001gborpoqh90nar","_id":"cjv0yvir60027borp88dma3zu"},{"post_id":"cjv0yvimk000aborp198lc7jb","tag_id":"cjv0yvip9001nborp6f8fhkuv","_id":"cjv0yviro002bborpd39oa2tu"},{"post_id":"cjv0yvimk000aborp198lc7jb","tag_id":"cjv0yvipl001uborpyb3i61dk","_id":"cjv0yvirv002fborprma9i5c4"},{"post_id":"cjv0yvimq000bborpvhfzp8r6","tag_id":"cjv0yvipv0020borpufbdmyjv","_id":"cjv0yviss002xborpurnzhk23"},{"post_id":"cjv0yvimq000bborpvhfzp8r6","tag_id":"cjv0yviri0028borppkezcyks","_id":"cjv0yvisx0030borp6spqzh1k"},{"post_id":"cjv0yvimq000bborpvhfzp8r6","tag_id":"cjv0yvirx002hborpiustavv4","_id":"cjv0yvit30035borpcrl87w7h"},{"post_id":"cjv0yvimq000bborpvhfzp8r6","tag_id":"cjv0yvisb002oborpze45k1ui","_id":"cjv0yvit80038borpq9g1f75x"},{"post_id":"cjv0yvimw000eborpxje9u4hs","tag_id":"cjv0yvisn002uborphfplr5d3","_id":"cjv0yviu2003oborp3jr05tno"},{"post_id":"cjv0yvimw000eborpxje9u4hs","tag_id":"cjv0yvisy0031borpebhx5hcr","_id":"cjv0yviu5003qborp1yrllhwn"},{"post_id":"cjv0yvimw000eborpxje9u4hs","tag_id":"cjv0yvita003aborplvjb0i7c","_id":"cjv0yviu8003tborpfpdwjfsf"},{"post_id":"cjv0yvimw000eborpxje9u4hs","tag_id":"cjv0yvitm003gborp4ymrg4fc","_id":"cjv0yviua003vborptv7yn1ri"},{"post_id":"cjv0yvin2000fborpvssjqxnf","tag_id":"cjv0yvitx003lborpqc5ne529","_id":"cjv0yviuh0042borp1uvzy0ay"},{"post_id":"cjv0yvin2000fborpvssjqxnf","tag_id":"cjv0yviu6003rborp30jbn66n","_id":"cjv0yviuj0044borpijbhoxv2"},{"post_id":"cjv0yvin2000fborpvssjqxnf","tag_id":"cjv0yviuc003xborpnrygb3t4","_id":"cjv0yvium0047borphsnk19a0"},{"post_id":"cjv0yvin9000jborp4qnapp9w","tag_id":"cjv0yviuf0040borp7wxom0ld","_id":"cjv0yviuo004aborpnxrhtls2"},{"post_id":"cjv0yvin9000jborp4qnapp9w","tag_id":"cjv0yviuk0045borphlojm5b6","_id":"cjv0yviuq004bborpowk4nnv3"},{"post_id":"cjv0yvinf000lborpzx5v3t6w","tag_id":"cjv0yviun0049borphuk3agi8","_id":"cjv0yviuu004eborpwu5mepg1"},{"post_id":"cjv0yvinf000lborpzx5v3t6w","tag_id":"cjv0yviur004cborptzvsg9pg","_id":"cjv0yviuv004fborpn1gs1klv"},{"post_id":"cjv0yvinl000qborp0myuyjj1","tag_id":"cjv0yvius004dborpuo27o4ey","_id":"cjv0yviv1004jborp61n4fwfx"},{"post_id":"cjv0yvinl000qborp0myuyjj1","tag_id":"cjv0yviuw004gborpvew2tja0","_id":"cjv0yviv3004kborphacstqck"},{"post_id":"cjv0yvinl000qborp0myuyjj1","tag_id":"cjv0yviuy004hborplqs4qxl1","_id":"cjv0yviv4004mborpdpjl1yyq"},{"post_id":"cjv0yvinu000vborplbfz3mq7","tag_id":"cjv0yviv0004iborpfgksx47j","_id":"cjv0yviv6004oborpxfpv634d"},{"post_id":"cjv0yvinu000vborplbfz3mq7","tag_id":"cjv0yviv4004lborprrvtrql7","_id":"cjv0yviv8004pborp8530a9b9"},{"post_id":"cjv0yvio1000xborpjnrpsh5u","tag_id":"cjv0yviv6004nborpk4b41tso","_id":"cjv0yvivh004tborpd69lmsu4"},{"post_id":"cjv0yvio1000xborpjnrpsh5u","tag_id":"cjv0yviv8004qborpsw29nxic","_id":"cjv0yvivi004uborpox2m0ii9"},{"post_id":"cjv0yvio1000xborpjnrpsh5u","tag_id":"cjv0yvivb004rborpbdnrvsaj","_id":"cjv0yvivl004wborpgaaugk2l"},{"post_id":"cjv0yvioa0011borp4roymivn","tag_id":"cjv0yvivf004sborprvxjuirf","_id":"cjv0yvivm004xborpfcx7uyg9"},{"post_id":"cjv0yviof0014borpu80ngkfb","tag_id":"cjv0yvivk004vborp2jzwuj87","_id":"cjv0yvivr0051borpmlrdzwc7"},{"post_id":"cjv0yviof0014borpu80ngkfb","tag_id":"cjv0yvivo004yborpk7b0lk7k","_id":"cjv0yvivs0052borpa7odkf8q"},{"post_id":"cjv0yviof0014borpu80ngkfb","tag_id":"cjv0yvivp004zborpssw1rfoz","_id":"cjv0yvivu0054borpaf1q27h1"},{"post_id":"cjv0yvioj0016borpdjis8ugo","tag_id":"cjv0yvivq0050borp3r0am17n","_id":"cjv0yvivv0055borpojzmb4xi"},{"post_id":"cjv0yviop001aborpz9jn41ex","tag_id":"cjv0yvivt0053borph42ludbg","_id":"cjv0yvivy0058borpyvzsts2y"},{"post_id":"cjv0yviop001aborpz9jn41ex","tag_id":"cjv0yvivv0056borpcljjrlao","_id":"cjv0yvivz0059borp9clly9rb"},{"post_id":"cjv0yviot001dborpustsx1f8","tag_id":"cjv0yvivx0057borp9rvsu8b3","_id":"cjv0yviw6005fborpld683pvu"},{"post_id":"cjv0yviot001dborpustsx1f8","tag_id":"cjv0yviuc003xborpnrygb3t4","_id":"cjv0yviw7005gborpu5pfne2c"},{"post_id":"cjv0yviot001dborpustsx1f8","tag_id":"cjv0yviw1005bborpmqbeh0rt","_id":"cjv0yviw9005iborpiog906ff"},{"post_id":"cjv0yviot001dborpustsx1f8","tag_id":"cjv0yviw2005cborpuhpmh70v","_id":"cjv0yviw9005jborpb8i52a1a"},{"post_id":"cjv0yviot001dborpustsx1f8","tag_id":"cjv0yvipv0020borpufbdmyjv","_id":"cjv0yviwb005lborprpq5cymo"},{"post_id":"cjv0yvip0001iborplar8ci13","tag_id":"cjv0yvipv0020borpufbdmyjv","_id":"cjv0yviwl005rborp7fpejb2n"},{"post_id":"cjv0yvip0001iborplar8ci13","tag_id":"cjv0yviw8005hborphc023xty","_id":"cjv0yviwm005sborpjpyza1ol"},{"post_id":"cjv0yvip0001iborplar8ci13","tag_id":"cjv0yviwa005kborpa6hmr67b","_id":"cjv0yviwo005uborpstfvc5yc"},{"post_id":"cjv0yvip0001iborplar8ci13","tag_id":"cjv0yviwc005mborptxcr20hq","_id":"cjv0yviwo005vborpyixatomn"},{"post_id":"cjv0yvip0001iborplar8ci13","tag_id":"cjv0yviwd005nborpds7r4bvi","_id":"cjv0yviwq005xborpv19d4ghv"},{"post_id":"cjv0yvip0001iborplar8ci13","tag_id":"cjv0yviwe005oborpmjbbwm8j","_id":"cjv0yviwr005yborpaf6n8t9s"},{"post_id":"cjv0yvip0001iborplar8ci13","tag_id":"cjv0yviwg005pborpatdl8i2s","_id":"cjv0yviwt0060borpncu7edtw"},{"post_id":"cjv0yvipa001oborpdnoqongb","tag_id":"cjv0yviuk0045borphlojm5b6","_id":"cjv0yviwu0061borpzokp54xs"},{"post_id":"cjv0yvipe001qborphzhe8cna","tag_id":"cjv0yviwm005tborplh62gzcq","_id":"cjv0yviww0063borpt3qulk46"},{"post_id":"cjv0yvipk001tborpm091guof","tag_id":"cjv0yviwp005wborpzy4hfg4n","_id":"cjv0yviwx0064borp5eoxv6hh"},{"post_id":"cjv0yvipn001wborpqlocewqo","tag_id":"cjv0yviws005zborpq0bgyb93","_id":"cjv0yviwz0066borpe1j75887"},{"post_id":"cjv0yvipn001wborpqlocewqo","tag_id":"cjv0yviwv0062borpay86gfqz","_id":"cjv0yvix00067borpffh75m7b"},{"post_id":"cjv0yvipt001zborpfjtvk9l0","tag_id":"cjv0yviwy0065borpzfqdk6kv","_id":"cjv0yvix5006bborpz3d5ady4"},{"post_id":"cjv0yvipt001zborpfjtvk9l0","tag_id":"cjv0yvix10068borp0eyja86z","_id":"cjv0yvix6006cborpikcxqdjn"},{"post_id":"cjv0yvipt001zborpfjtvk9l0","tag_id":"cjv0yvix20069borpap9jb875","_id":"cjv0yvix8006eborp9lt5mz4r"},{"post_id":"cjv0yviq70022borpiv9kzksv","tag_id":"cjv0yviv8004qborpsw29nxic","_id":"cjv0yvix9006fborp24gthws3"},{"post_id":"cjv0yviqu0026borp52e5i0nn","tag_id":"cjv0yviuk0045borphlojm5b6","_id":"cjv0yvixc006iborp0oww2e3s"},{"post_id":"cjv0yviqu0026borp52e5i0nn","tag_id":"cjv0yvixa006gborplaypbkq4","_id":"cjv0yvixd006jborpj2300smy"},{"post_id":"cjv0yvirl002aborpdvy7rvbc","tag_id":"cjv0yvixb006hborp9r4lxury","_id":"cjv0yvixg006mborpe7mhh3d0"},{"post_id":"cjv0yvirl002aborpdvy7rvbc","tag_id":"cjv0yvixe006kborp959kz3ch","_id":"cjv0yvixi006nborpa82ui23w"},{"post_id":"cjv0yvirs002eborpqterikzo","tag_id":"cjv0yvixf006lborpt2rldsnn","_id":"cjv0yvixk006pborp2kv119qi"},{"post_id":"cjv0yvirz002iborpvq01it4m","tag_id":"cjv0yvixj006oborpg3nxalja","_id":"cjv0yvixo006tborpurlg5thz"},{"post_id":"cjv0yvirz002iborpvq01it4m","tag_id":"cjv0yvixl006qborp8v84oowy","_id":"cjv0yvixp006uborplbv4ilhm"},{"post_id":"cjv0yvirz002iborpvq01it4m","tag_id":"cjv0yvixm006rborps1r05ho9","_id":"cjv0yvixr006wborp2b88z8yb"},{"post_id":"cjv0yvis3002kborp8andtx6m","tag_id":"cjv0yviv8004qborpsw29nxic","_id":"cjv0yvixt006yborp17hukbpb"},{"post_id":"cjv0yvis3002kborp8andtx6m","tag_id":"cjv0yvixq006vborpyjd8jpu2","_id":"cjv0yvixu006zborpqifuc0pz"},{"post_id":"cjv0yvis9002nborpq8s9l23w","tag_id":"cjv0yviv8004qborpsw29nxic","_id":"cjv0yvixw0071borpkfcb51jm"},{"post_id":"cjv0yvisf002qborpf23f7m3a","tag_id":"cjv0yvixv0070borpomgnap6v","_id":"cjv0yviy00074borpwskyqjty"},{"post_id":"cjv0yvisf002qborpf23f7m3a","tag_id":"cjv0yvixx0072borpr6nwkvjv","_id":"cjv0yviy10075borp0wlneg5u"},{"post_id":"cjv0yvisk002tborpv6a45bn7","tag_id":"cjv0yviv8004qborpsw29nxic","_id":"cjv0yviy20077borplwl8bian"},{"post_id":"cjv0yvisp002wborp09j498u4","tag_id":"cjv0yviy10076borpow92pspw","_id":"cjv0yviy7007bborpoqy5izwl"},{"post_id":"cjv0yvisp002wborp09j498u4","tag_id":"cjv0yviy30078borp8s3pkkb0","_id":"cjv0yviy7007cborphcubw2m6"},{"post_id":"cjv0yvisp002wborp09j498u4","tag_id":"cjv0yviws005zborpq0bgyb93","_id":"cjv0yviy9007eborp7uzlqr2w"},{"post_id":"cjv0yvisu002zborpidy8tmcv","tag_id":"cjv0yviy5007aborpd686fh84","_id":"cjv0yviyb007gborp87sld0k7"},{"post_id":"cjv0yvisu002zborpidy8tmcv","tag_id":"cjv0yviy8007dborpoewpcna8","_id":"cjv0yviyc007hborpvl7p9996"},{"post_id":"cjv0yvit10034borpk783ao61","tag_id":"cjv0yviya007fborpfu7c6z91","_id":"cjv0yviyg007lborp9t6fn3fa"},{"post_id":"cjv0yvit10034borpk783ao61","tag_id":"cjv0yviyd007iborpoye3hzzd","_id":"cjv0yviyh007mborpzriezq99"},{"post_id":"cjv0yvit10034borpk783ao61","tag_id":"cjv0yviye007jborpirg2degl","_id":"cjv0yviyj007oborpyaq1wsvl"},{"post_id":"cjv0yvit60037borptbcbbzmp","tag_id":"cjv0yviyf007kborpa5b3kvhf","_id":"cjv0yviyl007qborpsdan08f5"},{"post_id":"cjv0yvit60037borptbcbbzmp","tag_id":"cjv0yviyi007nborpqbtfey1t","_id":"cjv0yviym007rborpvcebadir"},{"post_id":"cjv0yvitb003bborpoo84wjsm","tag_id":"cjv0yviyk007pborpqxsfl4a2","_id":"cjv0yviyr007wborprht9xi1k"},{"post_id":"cjv0yvitb003bborpoo84wjsm","tag_id":"cjv0yviym007sborpls48lcpr","_id":"cjv0yviyr007xborp8yjr3q31"},{"post_id":"cjv0yvitb003bborpoo84wjsm","tag_id":"cjv0yviyn007tborpxifyqgif","_id":"cjv0yviyt007zborpaz4ps9nl"},{"post_id":"cjv0yvitb003bborpoo84wjsm","tag_id":"cjv0yviyo007uborpg1h8ycmf","_id":"cjv0yviyu0080borpzle27rvn"},{"post_id":"cjv0yvitf003dborph86nlrlu","tag_id":"cjv0yviyq007vborpa1uc1wcb","_id":"cjv0yviyz0085borp9bg0vgwq"},{"post_id":"cjv0yvitf003dborph86nlrlu","tag_id":"cjv0yviys007yborpt3i27zq4","_id":"cjv0yviz00086borps9q2svur"},{"post_id":"cjv0yvitf003dborph86nlrlu","tag_id":"cjv0yviyu0081borp0xix465e","_id":"cjv0yviz20088borpt43pzs0h"},{"post_id":"cjv0yvitf003dborph86nlrlu","tag_id":"cjv0yviyv0082borpwtekwcy6","_id":"cjv0yviz30089borpnqiidzb8"},{"post_id":"cjv0yvitf003dborph86nlrlu","tag_id":"cjv0yviyw0083borponjvayxd","_id":"cjv0yviz5008bborpu8jx1pwk"},{"post_id":"cjv0yvitj003fborpw030oxb9","tag_id":"cjv0yviuk0045borphlojm5b6","_id":"cjv0yviz7008dborpaf28j52v"},{"post_id":"cjv0yvitj003fborpw030oxb9","tag_id":"cjv0yviz10087borpsci3df9r","_id":"cjv0yviz8008eborpi00kt9nm"},{"post_id":"cjv0yvitj003fborpw030oxb9","tag_id":"cjv0yviz4008aborp9juk3uqu","_id":"cjv0yviza008gborpzlgvrzgr"},{"post_id":"cjv0yvitu003kborpz304tcg3","tag_id":"cjv0yviz6008cborpjzhqvtwk","_id":"cjv0yvizc008iborp7aoke1kp"},{"post_id":"cjv0yvitu003kborpz304tcg3","tag_id":"cjv0yviz9008fborprb9fs2qw","_id":"cjv0yvizd008jborp7s6u86cv"},{"post_id":"cjv0yvitz003nborpvn4kojkf","tag_id":"cjv0yvizb008hborp425wcrsu","_id":"cjv0yvizm008oborp234js1vw"},{"post_id":"cjv0yvitz003nborpvn4kojkf","tag_id":"cjv0yvize008kborpszvo0s3u","_id":"cjv0yvizn008pborppkuij213"},{"post_id":"cjv0yvitz003nborpvn4kojkf","tag_id":"cjv0yvizh008lborpfzk43i2a","_id":"cjv0yvizo008qborpe930xymk"},{"post_id":"cjv0yvitz003nborpvn4kojkf","tag_id":"cjv0yvizj008mborpuv3ob3w1","_id":"cjv0yvizp008rborp322qz0lo"},{"post_id":"cjv0yvitz003nborpvn4kojkf","tag_id":"cjv0yvizl008nborpio6pkepp","_id":"cjv0yvizq008sborpg2mpbawb"},{"post_id":"cjv0yvj18008tborpswaxovpz","tag_id":"cjv0yviuk0045borphlojm5b6","_id":"cjv0yvj1v0097borpxo9z5b19"},{"post_id":"cjv0yvj18008tborpswaxovpz","tag_id":"cjv0yvj1e008vborphzvkhy9m","_id":"cjv0yvj1w0098borpj305nu8u"},{"post_id":"cjv0yvj18008tborpswaxovpz","tag_id":"cjv0yvj1o0090borp1v7eflvd","_id":"cjv0yvj1y009aborpbhs1thrb"},{"post_id":"cjv0yvj18008tborpswaxovpz","tag_id":"cjv0yvj1r0093borpoj4z1njt","_id":"cjv0yvj1z009bborpx4xhzuff"},{"post_id":"cjv0yvj18008tborpswaxovpz","tag_id":"cjv0yvj1s0094borp1yu1igdv","_id":"cjv0yvj21009dborpo8r5wptk"},{"post_id":"cjv0yvj18008tborpswaxovpz","tag_id":"cjv0yvj1t0095borpy2y271q7","_id":"cjv0yvj22009eborpifvrl40m"},{"post_id":"cjv0yvj18008tborpswaxovpz","tag_id":"cjv0yviwd005nborpds7r4bvi","_id":"cjv0yvj23009gborphbdx3eqp"},{"post_id":"cjv0yvj18008tborpswaxovpz","tag_id":"cjv0yviuf0040borp7wxom0ld","_id":"cjv0yvj24009hborpuj98efwe"},{"post_id":"cjv0yvj1b008uborp6e1hzmye","tag_id":"cjv0yvj1u0096borpttfcf3a1","_id":"cjv0yvj24009iborp74lw6jma"},{"post_id":"cjv0yvj1b008uborp6e1hzmye","tag_id":"cjv0yviwy0065borpzfqdk6kv","_id":"cjv0yvj26009kborpfbdg3exh"},{"post_id":"cjv0yvj1b008uborp6e1hzmye","tag_id":"cjv0yvj1x0099borpspa7ayro","_id":"cjv0yvj27009lborpidi21oh8"},{"post_id":"cjv0yvj1f008wborpon3qumrw","tag_id":"cjv0yviv8004qborpsw29nxic","_id":"cjv0yvj28009mborpegat5k0u"},{"post_id":"cjv0yvj1f008wborpon3qumrw","tag_id":"cjv0yvj20009cborpj2nwlftl","_id":"cjv0yvj28009nborpsqanpmwr"},{"post_id":"cjv0yvj1f008wborpon3qumrw","tag_id":"cjv0yvj22009fborpcqj3so3s","_id":"cjv0yvj29009oborpcisvbxn6"},{"post_id":"cjv0yvj1j008xborpsi8njlnw","tag_id":"cjv0yvj25009jborpkzamp4rb","_id":"cjv0yvj29009pborpvt4uq3dt"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yviuk0045borphlojm5b6","_id":"cjv0yvj4x00a0borpzgb9o1z9"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yvj4l009rborpqep17uvp","_id":"cjv0yvj4y00a1borpqzgufqzu"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yvj1e008vborphzvkhy9m","_id":"cjv0yvj4z00a2borptgkp7xne"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yvj4n009tborpug1vqgai","_id":"cjv0yvj5000a3borpln8633er"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yvj4o009uborpv4w2baso","_id":"cjv0yvj5000a4borpfbzb8b3m"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yvj4q009vborpx7bkvtg6","_id":"cjv0yvj5100a5borpfmt1udib"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yvj4r009wborp8s9ap2vs","_id":"cjv0yvj5200a6borpdiux33uh"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yvj4t009xborpgeq9p511","_id":"cjv0yvj5300a7borpod6xun2a"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yvj1s0094borp1yu1igdv","_id":"cjv0yvj5400a8borpyzu1llmm"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yvj4u009yborpap9sl8r8","_id":"cjv0yvj5400a9borpz7utn2jc"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yvizb008hborp425wcrsu","_id":"cjv0yvj5500aaborp9cws64aw"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yvj1r0093borpoj4z1njt","_id":"cjv0yvj5600abborplpu8pyj0"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yvj1o0090borp1v7eflvd","_id":"cjv0yvj5700acborppos7ty67"},{"post_id":"cjv0yvj4h009qborpqglolyq3","tag_id":"cjv0yvj4v009zborpsc1wabg9","_id":"cjv0yvj5800adborpx4zqdqiz"}],"Tag":[{"name":"event-handler","_id":"cjv0yvimd0008borpkwva20co"},{"name":"asynchronous","_id":"cjv0yvimu000dborpcbx7g701"},{"name":"skill","_id":"cjv0yvin7000iborpg0h0d7lq"},{"name":"job","_id":"cjv0yvink000pborpmghy06u7"},{"name":"specifications","_id":"cjv0yvint000uborppe46b38h"},{"name":"vertical-align","_id":"cjv0yvioc0012borpwz593quz"},{"name":"smooth-scroll","_id":"cjv0yvion0018borpbx4i0737"},{"name":"scrollTo","_id":"cjv0yvioy001gborpoqh90nar"},{"name":"requestAnimationFrame","_id":"cjv0yvip9001nborp6f8fhkuv"},{"name":"setTimeout","_id":"cjv0yvipl001uborpyb3i61dk"},{"name":"bug","_id":"cjv0yvipv0020borpufbdmyjv"},{"name":"chrome","_id":"cjv0yviri0028borppkezcyks"},{"name":"inline-block","_id":"cjv0yvirx002hborpiustavv4"},{"name":"letter-spacing","_id":"cjv0yvisb002oborpze45k1ui"},{"name":"VirtualBox","_id":"cjv0yvisn002uborphfplr5d3"},{"name":"LAN","_id":"cjv0yvisy0031borpebhx5hcr"},{"name":"192.168.x.x","_id":"cjv0yvita003aborplvjb0i7c"},{"name":"chinese","_id":"cjv0yvitm003gborp4ymrg4fc"},{"name":"form","_id":"cjv0yvitx003lborpqc5ne529"},{"name":"IOS","_id":"cjv0yviu6003rborp30jbn66n"},{"name":"focus","_id":"cjv0yviuc003xborpnrygb3t4"},{"name":"orientationchange","_id":"cjv0yviuf0040borp7wxom0ld"},{"name":"mobile","_id":"cjv0yviuk0045borphlojm5b6"},{"name":"audio","_id":"cjv0yviun0049borphuk3agi8"},{"name":"autoplay","_id":"cjv0yviur004cborptzvsg9pg"},{"name":"blog","_id":"cjv0yvius004dborpuo27o4ey"},{"name":"hexo","_id":"cjv0yviuw004gborpvew2tja0"},{"name":"github","_id":"cjv0yviuy004hborplqs4qxl1"},{"name":"vh","_id":"cjv0yviv0004iborpfgksx47j"},{"name":"CSS variables","_id":"cjv0yviv4004lborprrvtrql7"},{"name":"ant-design-vue","_id":"cjv0yviv6004nborpk4b41tso"},{"name":"vue","_id":"cjv0yviv8004qborpsw29nxic"},{"name":"multiple-choice-cascader","_id":"cjv0yvivb004rborpbdnrvsaj"},{"name":"font-family","_id":"cjv0yvivf004sborprvxjuirf"},{"name":"mouseup","_id":"cjv0yvivk004vborp2jzwuj87"},{"name":"contextmenu","_id":"cjv0yvivo004yborpk7b0lk7k"},{"name":"preventDefault","_id":"cjv0yvivp004zborpssw1rfoz"},{"name":"img","_id":"cjv0yvivq0050borp3r0am17n"},{"name":"debug","_id":"cjv0yvivt0053borph42ludbg"},{"name":"efficiency","_id":"cjv0yvivv0056borpcljjrlao"},{"name":"label","_id":"cjv0yvivx0057borp9rvsu8b3"},{"name":"firefox","_id":"cjv0yviw1005bborpmqbeh0rt"},{"name":"contentEditable","_id":"cjv0yviw2005cborpuhpmh70v"},{"name":"ms","_id":"cjv0yviw8005hborphc023xty"},{"name":"min-height","_id":"cjv0yviwa005kborpa6hmr67b"},{"name":"display","_id":"cjv0yviwc005mborptxcr20hq"},{"name":"flex","_id":"cjv0yviwd005nborpds7r4bvi"},{"name":"IE","_id":"cjv0yviwe005oborpmjbbwm8j"},{"name":"Edge","_id":"cjv0yviwg005pborpatdl8i2s"},{"name":"override.css","_id":"cjv0yviwm005tborplh62gzcq"},{"name":"canvas","_id":"cjv0yviwp005wborpzy4hfg4n"},{"name":"performance","_id":"cjv0yviws005zborpq0bgyb93"},{"name":"image","_id":"cjv0yviwv0062borpay86gfqz"},{"name":"wechat","_id":"cjv0yviwy0065borpzfqdk6kv"},{"name":"share","_id":"cjv0yvix10068borp0eyja86z"},{"name":"qq","_id":"cjv0yvix20069borpap9jb875"},{"name":"webpack","_id":"cjv0yvixa006gborplaypbkq4"},{"name":"Blob","_id":"cjv0yvixb006hborp9r4lxury"},{"name":"Chinese","_id":"cjv0yvixe006kborp959kz3ch"},{"name":"--vscode","_id":"cjv0yvixf006lborpt2rldsnn"},{"name":"TCP","_id":"cjv0yvixj006oborpg3nxalja"},{"name":"http/1.1","_id":"cjv0yvixl006qborp8v84oowy"},{"name":"http/2.0","_id":"cjv0yvixm006rborps1r05ho9"},{"name":"sync","_id":"cjv0yvixq006vborpyjd8jpu2"},{"name":"font","_id":"cjv0yvixv0070borpomgnap6v"},{"name":"fontmin","_id":"cjv0yvixx0072borpr6nwkvjv"},{"name":"browser","_id":"cjv0yviy10076borpow92pspw"},{"name":"LightHouse","_id":"cjv0yviy30078borp8s3pkkb0"},{"name":"apply","_id":"cjv0yviy5007aborpd686fh84"},{"name":"call","_id":"cjv0yviy8007dborpoewpcna8"},{"name":"background-color","_id":"cjv0yviya007fborpfu7c6z91"},{"name":"inline non-replaced element","_id":"cjv0yviyd007iborpoye3hzzd"},{"name":"content area","_id":"cjv0yviye007jborpirg2degl"},{"name":"text-align","_id":"cjv0yviyf007kborpa5b3kvhf"},{"name":"text-align-last","_id":"cjv0yviyi007nborpqbtfey1t"},{"name":"event capturing","_id":"cjv0yviyk007pborpqxsfl4a2"},{"name":"event bubbling","_id":"cjv0yviym007sborpls48lcpr"},{"name":"event delegate","_id":"cjv0yviyn007tborpxifyqgif"},{"name":"image load error","_id":"cjv0yviyo007uborpg1h8ycmf"},{"name":"WheelEvent","_id":"cjv0yviyq007vborpa1uc1wcb"},{"name":"delta","_id":"cjv0yviys007yborpt3i27zq4"},{"name":"wheel","_id":"cjv0yviyu0081borp0xix465e"},{"name":"DOMMouseScroll","_id":"cjv0yviyv0082borpwtekwcy6"},{"name":"mousewheel","_id":"cjv0yviyw0083borponjvayxd"},{"name":"mousemove","_id":"cjv0yviz10087borpsci3df9r"},{"name":"touchmove","_id":"cjv0yviz4008aborp9juk3uqu"},{"name":"console.log","_id":"cjv0yviz6008cborpjzhqvtwk"},{"name":"URLSearchParams","_id":"cjv0yviz9008fborprb9fs2qw"},{"name":"meta","_id":"cjv0yvizb008hborp425wcrsu"},{"name":"http-equiv","_id":"cjv0yvize008kborpszvo0s3u"},{"name":"X-UA-Compatible","_id":"cjv0yvizh008lborpfzk43i2a"},{"name":"content","_id":"cjv0yvizj008mborpuv3ob3w1"},{"name":"ie=edge","_id":"cjv0yvizl008nborpio6pkepp"},{"name":"rem","_id":"cjv0yvj1e008vborphzvkhy9m"},{"name":"initial-scale","_id":"cjv0yvj1o0090borp1v7eflvd"},{"name":"device-width","_id":"cjv0yvj1r0093borpoj4z1njt"},{"name":"DPR","_id":"cjv0yvj1s0094borp1yu1igdv"},{"name":"vw","_id":"cjv0yvj1t0095borpy2y271q7"},{"name":"qrcodejs","_id":"cjv0yvj1u0096borpttfcf3a1"},{"name":"MutationObserver","_id":"cjv0yvj1x0099borpspa7ayro"},{"name":"computed","_id":"cjv0yvj20009cborpj2nwlftl"},{"name":"$recomputed","_id":"cjv0yvj22009fborpcqj3so3s"},{"name":"ESLint","_id":"cjv0yvj25009jborpkzamp4rb"},{"name":"layout","_id":"cjv0yvj4l009rborpqep17uvp"},{"name":"viewport","_id":"cjv0yvj4n009tborpug1vqgai"},{"name":"layout viewport","_id":"cjv0yvj4o009uborpv4w2baso"},{"name":"visual viewport","_id":"cjv0yvj4q009vborpx7bkvtg6"},{"name":"css pixel","_id":"cjv0yvj4r009wborp8s9ap2vs"},{"name":"device pixel","_id":"cjv0yvj4t009xborpgeq9p511"},{"name":"retina","_id":"cjv0yvj4u009yborpap9sl8r8"},{"name":"user-scalable","_id":"cjv0yvj4v009zborpsc1wabg9"}]}}